/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter represents the /nokia-conf/configure/service/vprn/interface/vpls/ingress/routed-override-filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_IpMirrorInterface represents the /nokia-conf/configure/service/vprn/ip-mirror-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_IpMirrorInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                 `path:"description" module:"nokia-conf"`
	InterfaceName      *string                                                                 `path:"interface-name" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_IpMirrorInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface) IsYANGGoStruct() {}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vprn_IpMirrorInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vprn_IpMirrorInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_IpMirrorInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vprn_IpMirrorInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_IpMirrorInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vprn_IpMirrorInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_IpMirrorInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_IpMirrorInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_IpMirrorInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_IpMirrorInterface.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp represents the /nokia-conf/configure/service/vprn/ip-mirror-interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                              `path:"description" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                              `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress represents the /nokia-conf/configure/service/vprn/ip-mirror-interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                     `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/vprn/ip-mirror-interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipsec represents the /nokia-conf/configure/service/vprn/ipsec YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipsec struct {
	AllowReverseRouteOverride     *bool                                                                  `path:"allow-reverse-route-override" module:"nokia-conf"`
	AllowReverseRouteOverrideType E_NokiaConf_Configure_Service_Vprn_Ipsec_AllowReverseRouteOverrideType `path:"allow-reverse-route-override-type" module:"nokia-conf"`
	SecurityPolicy                map[uint32]*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy      `path:"security-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipsec) IsYANGGoStruct() {}

// NewSecurityPolicy creates a new entry in the SecurityPolicy list of the
// NokiaConf_Configure_Service_Vprn_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) NewSecurityPolicy(Id uint32) (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityPolicy == nil {
		t.SecurityPolicy = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SecurityPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SecurityPolicy", key)
	}

	t.SecurityPolicy[key] = &NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy{
		Id: &Id,
	}

	return t.SecurityPolicy[key], nil
}

// RenameSecurityPolicy renames an entry in the list SecurityPolicy within
// the NokiaConf_Configure_Service_Vprn_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) RenameSecurityPolicy(oldK, newK uint32) error {
	if _, ok := t.SecurityPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SecurityPolicy", newK)
	}

	e, ok := t.SecurityPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SecurityPolicy", oldK)
	}
	e.Id = &newK

	t.SecurityPolicy[newK] = e
	delete(t.SecurityPolicy, oldK)
	return nil
}

// GetOrCreateSecurityPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) GetOrCreateSecurityPolicy(Id uint32) *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy {

	key := Id

	if v, ok := t.SecurityPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecurityPolicy(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecurityPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSecurityPolicy retrieves the value with the specified key from
// the SecurityPolicy map field of NokiaConf_Configure_Service_Vprn_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) GetSecurityPolicy(Id uint32) *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.SecurityPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecurityPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) DeleteSecurityPolicy(Id uint32) {
	key := Id

	delete(t.SecurityPolicy, key)
}

// AppendSecurityPolicy appends the supplied NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy struct to the
// list SecurityPolicy of NokiaConf_Configure_Service_Vprn_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) AppendSecurityPolicy(v *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityPolicy == nil {
		t.SecurityPolicy = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy)
	}

	if _, ok := t.SecurityPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SecurityPolicy %v", key)
	}

	t.SecurityPolicy[key] = v
	return nil
}

// GetAllowReverseRouteOverride retrieves the value of the leaf AllowReverseRouteOverride from the NokiaConf_Configure_Service_Vprn_Ipsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowReverseRouteOverride is set, it can
// safely use t.GetAllowReverseRouteOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowReverseRouteOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) GetAllowReverseRouteOverride() bool {
	if t == nil || t.AllowReverseRouteOverride == nil {
		return false
	}
	return *t.AllowReverseRouteOverride
}

// GetAllowReverseRouteOverrideType retrieves the value of the leaf AllowReverseRouteOverrideType from the NokiaConf_Configure_Service_Vprn_Ipsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowReverseRouteOverrideType is set, it can
// safely use t.GetAllowReverseRouteOverrideType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowReverseRouteOverrideType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) GetAllowReverseRouteOverrideType() E_NokiaConf_Configure_Service_Vprn_Ipsec_AllowReverseRouteOverrideType {
	if t == nil || t.AllowReverseRouteOverrideType == 0 {
		return 0
	}
	return t.AllowReverseRouteOverrideType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowReverseRouteOverride == nil {
		var v bool = false
		t.AllowReverseRouteOverride = &v
	}
	for _, e := range t.SecurityPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipsec.
func (*NokiaConf_Configure_Service_Vprn_Ipsec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy represents the /nokia-conf/configure/service/vprn/ipsec/security-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry `path:"entry" module:"nokia-conf"`
	Id                 *uint32                                                                 `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) NewEntry(EntryId uint32) (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) GetEntry(EntryId uint32) *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) AppendEntry(v *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry represents the /nokia-conf/configure/service/vprn/ipsec/security-policy/entry YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                                                 `path:"entry-id" module:"nokia-conf"`
	LocalIp            *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp    `path:"local-ip" module:"nokia-conf"`
	LocalIpv6          *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6  `path:"local-ipv6" module:"nokia-conf"`
	RemoteIp           *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp   `path:"remote-ip" module:"nokia-conf"`
	RemoteIpv6         *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 `path:"remote-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) IsYANGGoStruct() {}

// GetOrCreateLocalIp retrieves the value of the LocalIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateLocalIp() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp {
	if t.LocalIp != nil {
		return t.LocalIp
	}
	t.LocalIp = &NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp{}
	return t.LocalIp
}

// GetOrCreateLocalIpv6 retrieves the value of the LocalIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateLocalIpv6() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 {
	if t.LocalIpv6 != nil {
		return t.LocalIpv6
	}
	t.LocalIpv6 = &NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6{}
	return t.LocalIpv6
}

// GetOrCreateRemoteIp retrieves the value of the RemoteIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateRemoteIp() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp {
	if t.RemoteIp != nil {
		return t.RemoteIp
	}
	t.RemoteIp = &NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp{}
	return t.RemoteIp
}

// GetOrCreateRemoteIpv6 retrieves the value of the RemoteIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetOrCreateRemoteIpv6() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 {
	if t.RemoteIpv6 != nil {
		return t.RemoteIpv6
	}
	t.RemoteIpv6 = &NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6{}
	return t.RemoteIpv6
}

// GetLocalIp returns the value of the LocalIp struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field LocalIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetLocalIp() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp {
	if t != nil && t.LocalIp != nil {
		return t.LocalIp
	}
	return nil
}

// GetLocalIpv6 returns the value of the LocalIpv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field LocalIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetLocalIpv6() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 {
	if t != nil && t.LocalIpv6 != nil {
		return t.LocalIpv6
	}
	return nil
}

// GetRemoteIp returns the value of the RemoteIp struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field RemoteIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetRemoteIp() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp {
	if t != nil && t.RemoteIp != nil {
		return t.RemoteIp
	}
	return nil
}

// GetRemoteIpv6 returns the value of the RemoteIpv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry. If the receiver or the field RemoteIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetRemoteIpv6() *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 {
	if t != nil && t.RemoteIpv6 != nil {
		return t.RemoteIpv6
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocalIp.PopulateDefaults()
	t.LocalIpv6.PopulateDefaults()
	t.RemoteIp.PopulateDefaults()
	t.RemoteIpv6.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp represents the /nokia-conf/configure/service/vprn/ipsec/security-policy/entry/local-ip YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 represents the /nokia-conf/configure/service/vprn/ipsec/security-policy/entry/local-ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_LocalIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp represents the /nokia-conf/configure/service/vprn/ipsec/security-policy/entry/remote-ip YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 represents the /nokia-conf/configure/service/vprn/ipsec/security-policy/entry/remote-ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Any     *bool   `path:"any" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Any == nil {
		var v bool = false
		t.Any = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6.
func (*NokiaConf_Configure_Service_Vprn_Ipsec_SecurityPolicy_Entry_RemoteIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipv6 represents the /nokia-conf/configure/service/vprn/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipv6 struct {
	NeighborDiscovery   *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery   `path:"neighbor-discovery" module:"nokia-conf"`
	RouterAdvertisement *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipv6) IsYANGGoStruct() {}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) GetOrCreateRouterAdvertisement() *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) GetRouterAdvertisement() *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NeighborDiscovery.PopulateDefaults()
	t.RouterAdvertisement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/service/vprn/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery struct {
	ReachableTime *uint32 `path:"reachable-time" module:"nokia-conf"`
	StaleTime     *uint32 `path:"stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 30
	}
	return *t.ReachableTime
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 14400
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReachableTime == nil {
		var v uint32 = 30
		t.ReachableTime = &v
	}
	if t.StaleTime == nil {
		var v uint32 = 14400
		t.StaleTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement represents the /nokia-conf/configure/service/vprn/ipv6/router-advertisement YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	DnsOptions         *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions           `path:"dns-options" module:"nokia-conf" yangPresence:"true"`
	Interface          map[string]*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) NewInterface(IpIntName string) (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface)
	}

	key := IpIntName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface{
		IpIntName: &IpIntName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpIntName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) GetOrCreateInterface(IpIntName string) *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface {

	key := IpIntName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpIntName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) GetInterface(IpIntName string) *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface {

	if t == nil {
		return nil
	}

	key := IpIntName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) DeleteInterface(IpIntName string) {
	key := IpIntName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) error {
	if v.IpIntName == nil {
		return fmt.Errorf("invalid nil key received for IpIntName")
	}

	key := *v.IpIntName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateDnsOptions retrieves the value of the DnsOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) GetOrCreateDnsOptions() *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions {
	if t.DnsOptions != nil {
		return t.DnsOptions
	}
	t.DnsOptions = &NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions{}
	return t.DnsOptions
}

// GetDnsOptions returns the value of the DnsOptions struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement. If the receiver or the field DnsOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) GetDnsOptions() *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions {
	if t != nil && t.DnsOptions != nil {
		return t.DnsOptions
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DnsOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions represents the /nokia-conf/configure/service/vprn/ipv6/router-advertisement/dns-options YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	RdnssLifetime      NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
	Server             []string                                                                                 `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) GetRdnssLifetime() NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Enum_infinite
	}
	return t.RdnssLifetime
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RdnssLifetime == nil {
		t.RdnssLifetime = NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Enum_infinite
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_DnsOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface represents the /nokia-conf/configure/service/vprn/ipv6/router-advertisement/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct {
	AdminState                 E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CurrentHopLimit            *uint16                                                                                `path:"current-hop-limit" module:"nokia-conf"`
	DnsOptions                 *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions        `path:"dns-options" module:"nokia-conf" yangPresence:"true"`
	IpIntName                  *string                                                                                `path:"ip-int-name" module:"nokia-conf"`
	ManagedConfiguration       *bool                                                                                  `path:"managed-configuration" module:"nokia-conf"`
	MaxAdvertisementInterval   *uint32                                                                                `path:"max-advertisement-interval" module:"nokia-conf"`
	MinAdvertisementInterval   *uint32                                                                                `path:"min-advertisement-interval" module:"nokia-conf"`
	Mtu                        *uint32                                                                                `path:"mtu" module:"nokia-conf"`
	OtherStatefulConfiguration *bool                                                                                  `path:"other-stateful-configuration" module:"nokia-conf"`
	Prefix                     map[string]*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix `path:"prefix" module:"nokia-conf"`
	ReachableTime              *uint32                                                                                `path:"reachable-time" module:"nokia-conf"`
	RetransmitTime             *uint32                                                                                `path:"retransmit-time" module:"nokia-conf"`
	RouterLifetime             *uint32                                                                                `path:"router-lifetime" module:"nokia-conf"`
	UseVirtualMac              *bool                                                                                  `path:"use-virtual-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) AppendPrefix(v *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDnsOptions retrieves the value of the DnsOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetOrCreateDnsOptions() *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions {
	if t.DnsOptions != nil {
		return t.DnsOptions
	}
	t.DnsOptions = &NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions{}
	return t.DnsOptions
}

// GetDnsOptions returns the value of the DnsOptions struct pointer
// from NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface. If the receiver or the field DnsOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetDnsOptions() *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions {
	if t != nil && t.DnsOptions != nil {
		return t.DnsOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetCurrentHopLimit() uint16 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// GetManagedConfiguration retrieves the value of the leaf ManagedConfiguration from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfiguration is set, it can
// safely use t.GetManagedConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetManagedConfiguration() bool {
	if t == nil || t.ManagedConfiguration == nil {
		return false
	}
	return *t.ManagedConfiguration
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetMaxAdvertisementInterval() uint32 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 600
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetMinAdvertisementInterval() uint32 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 200
	}
	return *t.MinAdvertisementInterval
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetOtherStatefulConfiguration retrieves the value of the leaf OtherStatefulConfiguration from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherStatefulConfiguration is set, it can
// safely use t.GetOtherStatefulConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherStatefulConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetOtherStatefulConfiguration() bool {
	if t == nil || t.OtherStatefulConfiguration == nil {
		return false
	}
	return *t.OtherStatefulConfiguration
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTime retrieves the value of the leaf RetransmitTime from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTime is set, it can
// safely use t.GetRetransmitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetRetransmitTime() uint32 {
	if t == nil || t.RetransmitTime == nil {
		return 0
	}
	return *t.RetransmitTime
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetRouterLifetime() uint32 {
	if t == nil || t.RouterLifetime == nil {
		return 1800
	}
	return *t.RouterLifetime
}

// GetUseVirtualMac retrieves the value of the leaf UseVirtualMac from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseVirtualMac is set, it can
// safely use t.GetUseVirtualMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseVirtualMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) GetUseVirtualMac() bool {
	if t == nil || t.UseVirtualMac == nil {
		return false
	}
	return *t.UseVirtualMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CurrentHopLimit == nil {
		var v uint16 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfiguration == nil {
		var v bool = false
		t.ManagedConfiguration = &v
	}
	if t.MaxAdvertisementInterval == nil {
		var v uint32 = 600
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint32 = 200
		t.MinAdvertisementInterval = &v
	}
	if t.OtherStatefulConfiguration == nil {
		var v bool = false
		t.OtherStatefulConfiguration = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTime == nil {
		var v uint32 = 0
		t.RetransmitTime = &v
	}
	if t.RouterLifetime == nil {
		var v uint32 = 1800
		t.RouterLifetime = &v
	}
	if t.UseVirtualMac == nil {
		var v bool = false
		t.UseVirtualMac = &v
	}
	t.DnsOptions.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpIntName == nil {
		return nil, fmt.Errorf("nil value for key IpIntName")
	}

	return map[string]interface{}{
		"ip-int-name": *t.IpIntName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions represents the /nokia-conf/configure/service/vprn/ipv6/router-advertisement/interface/dns-options YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions struct {
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	IncludeRdnss       *bool                                                                                              `path:"include-rdnss" module:"nokia-conf"`
	RdnssLifetime      NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
	Server             []string                                                                                           `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIncludeRdnss retrieves the value of the leaf IncludeRdnss from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeRdnss is set, it can
// safely use t.GetIncludeRdnss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeRdnss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetIncludeRdnss() bool {
	if t == nil || t.IncludeRdnss == nil {
		return true
	}
	return *t.IncludeRdnss
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetRdnssLifetime() NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return nil
	}
	return t.RdnssLifetime
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeRdnss == nil {
		var v bool = true
		t.IncludeRdnss = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix represents the /nokia-conf/configure/service/vprn/ipv6/router-advertisement/interface/prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix struct {
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Autonomous         *bool                                                                                              `path:"autonomous" module:"nokia-conf"`
	Ipv6Prefix         *string                                                                                            `path:"ipv6-prefix" module:"nokia-conf"`
	OnLink             *bool                                                                                              `path:"on-link" module:"nokia-conf"`
	PreferredLifetime  NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime      NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutonomous retrieves the value of the leaf Autonomous from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonomous is set, it can
// safely use t.GetAutonomous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonomous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetAutonomous() bool {
	if t == nil || t.Autonomous == nil {
		return true
	}
	return *t.Autonomous
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetPreferredLifetime() NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(604800)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) GetValidLifetime() NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(2592000)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Autonomous == nil {
		var v bool = true
		t.Autonomous = &v
	}
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(604800)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(2592000)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix.
func (*NokiaConf_Configure_Service_Vprn_Ipv6_RouterAdvertisement_Interface_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis represents the /nokia-conf/configure/service/vprn/isis YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis struct {
	AdminState                  E_NokiaTypesSros_AdminState                                                                                `path:"admin-state" module:"nokia-conf"`
	AdvertisePassiveOnly        *bool                                                                                                      `path:"advertise-passive-only" module:"nokia-conf"`
	AdvertiseRouterCapability   E_NokiaConf_Configure_Service_Vprn_Isis_AdvertiseRouterCapability                                          `path:"advertise-router-capability" module:"nokia-conf"`
	AllL1Isis                   *string                                                                                                    `path:"all-l1isis" module:"nokia-conf"`
	AllL2Isis                   *string                                                                                                    `path:"all-l2isis" module:"nokia-conf"`
	ApplyGroups                 []string                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AreaAddress                 []string                                                                                                   `path:"area-address" module:"nokia-conf"`
	AuthenticationCheck         *bool                                                                                                      `path:"authentication-check" module:"nokia-conf"`
	AuthenticationKey           *string                                                                                                    `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain      *string                                                                                                    `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType          E_NokiaTypesIsis_AuthType                                                                                  `path:"authentication-type" module:"nokia-conf"`
	CsnpAuthentication          *bool                                                                                                      `path:"csnp-authentication" module:"nokia-conf"`
	DefaultRouteTag             *uint32                                                                                                    `path:"default-route-tag" module:"nokia-conf"`
	ExportLimit                 *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit                                                         `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy                []string                                                                                                   `path:"export-policy" module:"nokia-conf"`
	GracefulRestart             *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart                                                     `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	HelloAuthentication         *bool                                                                                                      `path:"hello-authentication" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                                                          `path:"hello-padding" module:"nokia-conf"`
	IgnoreAttachedBit           *bool                                                                                                      `path:"ignore-attached-bit" module:"nokia-conf"`
	IgnoreLspErrors             *bool                                                                                                      `path:"ignore-lsp-errors" module:"nokia-conf"`
	IgnoreNarrowMetric          *bool                                                                                                      `path:"ignore-narrow-metric" module:"nokia-conf"`
	IidTlv                      *bool                                                                                                      `path:"iid-tlv" module:"nokia-conf"`
	ImportPolicy                []string                                                                                                   `path:"import-policy" module:"nokia-conf"`
	Interface                   map[string]*NokiaConf_Configure_Service_Vprn_Isis_Interface                                                `path:"interface" module:"nokia-conf"`
	Ipv4MulticastRouting        E_NokiaTypesIsis_RoutingTopology                                                                           `path:"ipv4-multicast-routing" module:"nokia-conf"`
	Ipv4Routing                 *bool                                                                                                      `path:"ipv4-routing" module:"nokia-conf"`
	Ipv6Routing                 E_NokiaTypesIsis_RoutingTopology                                                                           `path:"ipv6-routing" module:"nokia-conf"`
	IsisInstance                *int32                                                                                                     `path:"isis-instance" module:"nokia-conf"`
	Level                       map[E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_Level `path:"level" module:"nokia-conf"`
	LevelCapability             E_NokiaTypesIsis_Level                                                                                     `path:"level-capability" module:"nokia-conf"`
	LinkGroup                   map[string]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup                                                `path:"link-group" module:"nokia-conf"`
	LoopfreeAlternate           *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate                                                   `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	LspLifetime                 *uint32                                                                                                    `path:"lsp-lifetime" module:"nokia-conf"`
	LspMinimumRemainingLifetime *uint32                                                                                                    `path:"lsp-minimum-remaining-lifetime" module:"nokia-conf"`
	LspMtuSize                  *int32                                                                                                     `path:"lsp-mtu-size" module:"nokia-conf"`
	LspRefresh                  *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh                                                          `path:"lsp-refresh" module:"nokia-conf"`
	MruMismatchDetection        *bool                                                                                                      `path:"mru-mismatch-detection" module:"nokia-conf"`
	MultiTopology               *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology                                                       `path:"multi-topology" module:"nokia-conf" yangPresence:"true"`
	MulticastImport             *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport                                                     `path:"multicast-import" module:"nokia-conf"`
	Overload                    *NokiaConf_Configure_Service_Vprn_Isis_Overload                                                            `path:"overload" module:"nokia-conf" yangPresence:"true"`
	OverloadExportExternal      *bool                                                                                                      `path:"overload-export-external" module:"nokia-conf"`
	OverloadExportInterlevel    *bool                                                                                                      `path:"overload-export-interlevel" module:"nokia-conf"`
	OverloadOnBoot              *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot                                                      `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	PoiTlv                      *bool                                                                                                      `path:"poi-tlv" module:"nokia-conf"`
	PrefixAttributesTlv         *bool                                                                                                      `path:"prefix-attributes-tlv" module:"nokia-conf"`
	PrefixLimit                 *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit                                                         `path:"prefix-limit" module:"nokia-conf" yangPresence:"true"`
	PsnpAuthentication          *bool                                                                                                      `path:"psnp-authentication" module:"nokia-conf"`
	ReferenceBandwidth          *uint64                                                                                                    `path:"reference-bandwidth" module:"nokia-conf"`
	RibPriority                 *NokiaConf_Configure_Service_Vprn_Isis_RibPriority                                                         `path:"rib-priority" module:"nokia-conf"`
	RouterId                    *string                                                                                                    `path:"router-id" module:"nokia-conf"`
	StandardMultiInstance       *bool                                                                                                      `path:"standard-multi-instance" module:"nokia-conf"`
	StrictAdjacencyCheck        *bool                                                                                                      `path:"strict-adjacency-check" module:"nokia-conf"`
	SummaryAddress              map[string]*NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress                                           `path:"summary-address" module:"nokia-conf"`
	SuppressAttachedBit         *bool                                                                                                      `path:"suppress-attached-bit" module:"nokia-conf"`
	SystemId                    *string                                                                                                    `path:"system-id" module:"nokia-conf"`
	Timers                      *NokiaConf_Configure_Service_Vprn_Isis_Timers                                                              `path:"timers" module:"nokia-conf"`
	UnicastImport               *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport                                                       `path:"unicast-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Isis) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Isis_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Isis_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Isis_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Isis_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Isis) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Isis_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Isis) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Isis_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Isis) NewLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber) (*NokiaConf_Configure_Service_Vprn_Isis_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vprn_Isis_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) RenameLevel(oldK, newK E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber) *NokiaConf_Configure_Service_Vprn_Isis_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber) *NokiaConf_Configure_Service_Vprn_Isis_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Isis) DeleteLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vprn_Isis_Level struct to the
// list Level of NokiaConf_Configure_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Isis) AppendLevel(v *NokiaConf_Configure_Service_Vprn_Isis_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewLinkGroup creates a new entry in the LinkGroup list of the
// NokiaConf_Configure_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Isis) NewLinkGroup(LinkGroupName string) (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkGroup == nil {
		t.LinkGroup = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup)
	}

	key := LinkGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LinkGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LinkGroup", key)
	}

	t.LinkGroup[key] = &NokiaConf_Configure_Service_Vprn_Isis_LinkGroup{
		LinkGroupName: &LinkGroupName,
	}

	return t.LinkGroup[key], nil
}

// RenameLinkGroup renames an entry in the list LinkGroup within
// the NokiaConf_Configure_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) RenameLinkGroup(oldK, newK string) error {
	if _, ok := t.LinkGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in LinkGroup", newK)
	}

	e, ok := t.LinkGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LinkGroup", oldK)
	}
	e.LinkGroupName = &newK

	t.LinkGroup[newK] = e
	delete(t.LinkGroup, oldK)
	return nil
}

// GetOrCreateLinkGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateLinkGroup(LinkGroupName string) *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup {

	key := LinkGroupName

	if v, ok := t.LinkGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLinkGroup(LinkGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLinkGroup got unexpected error: %v", err))
	}
	return v
}

// GetLinkGroup retrieves the value with the specified key from
// the LinkGroup map field of NokiaConf_Configure_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLinkGroup(LinkGroupName string) *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup {

	if t == nil {
		return nil
	}

	key := LinkGroupName

	if lm, ok := t.LinkGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteLinkGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Isis) DeleteLinkGroup(LinkGroupName string) {
	key := LinkGroupName

	delete(t.LinkGroup, key)
}

// AppendLinkGroup appends the supplied NokiaConf_Configure_Service_Vprn_Isis_LinkGroup struct to the
// list LinkGroup of NokiaConf_Configure_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis_LinkGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Isis) AppendLinkGroup(v *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) error {
	if v.LinkGroupName == nil {
		return fmt.Errorf("invalid nil key received for LinkGroupName")
	}

	key := *v.LinkGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkGroup == nil {
		t.LinkGroup = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup)
	}

	if _, ok := t.LinkGroup[key]; ok {
		return fmt.Errorf("duplicate key for list LinkGroup %v", key)
	}

	t.LinkGroup[key] = v
	return nil
}

// NewSummaryAddress creates a new entry in the SummaryAddress list of the
// NokiaConf_Configure_Service_Vprn_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Isis) NewSummaryAddress(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryAddress", key)
	}

	t.SummaryAddress[key] = &NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress{
		IpPrefix: &IpPrefix,
	}

	return t.SummaryAddress[key], nil
}

// RenameSummaryAddress renames an entry in the list SummaryAddress within
// the NokiaConf_Configure_Service_Vprn_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) RenameSummaryAddress(oldK, newK string) error {
	if _, ok := t.SummaryAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryAddress", newK)
	}

	e, ok := t.SummaryAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryAddress", oldK)
	}
	e.IpPrefix = &newK

	t.SummaryAddress[newK] = e
	delete(t.SummaryAddress, oldK)
	return nil
}

// GetOrCreateSummaryAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateSummaryAddress(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress {

	key := IpPrefix

	if v, ok := t.SummaryAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryAddress(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryAddress got unexpected error: %v", err))
	}
	return v
}

// GetSummaryAddress retrieves the value with the specified key from
// the SummaryAddress map field of NokiaConf_Configure_Service_Vprn_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetSummaryAddress(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SummaryAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSummaryAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Isis) DeleteSummaryAddress(IpPrefix string) {
	key := IpPrefix

	delete(t.SummaryAddress, key)
}

// AppendSummaryAddress appends the supplied NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress struct to the
// list SummaryAddress of NokiaConf_Configure_Service_Vprn_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Isis) AppendSummaryAddress(v *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress)
	}

	if _, ok := t.SummaryAddress[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryAddress %v", key)
	}

	t.SummaryAddress[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateExportLimit() *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Service_Vprn_Isis_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateGracefulRestart() *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateLspRefresh retrieves the value of the LspRefresh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateLspRefresh() *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh {
	if t.LspRefresh != nil {
		return t.LspRefresh
	}
	t.LspRefresh = &NokiaConf_Configure_Service_Vprn_Isis_LspRefresh{}
	return t.LspRefresh
}

// GetOrCreateMultiTopology retrieves the value of the MultiTopology field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateMultiTopology() *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology {
	if t.MultiTopology != nil {
		return t.MultiTopology
	}
	t.MultiTopology = &NokiaConf_Configure_Service_Vprn_Isis_MultiTopology{}
	return t.MultiTopology
}

// GetOrCreateMulticastImport retrieves the value of the MulticastImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateMulticastImport() *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport {
	if t.MulticastImport != nil {
		return t.MulticastImport
	}
	t.MulticastImport = &NokiaConf_Configure_Service_Vprn_Isis_MulticastImport{}
	return t.MulticastImport
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateOverload() *NokiaConf_Configure_Service_Vprn_Isis_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &NokiaConf_Configure_Service_Vprn_Isis_Overload{}
	return t.Overload
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreatePrefixLimit() *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit{}
	return t.PrefixLimit
}

// GetOrCreateRibPriority retrieves the value of the RibPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateRibPriority() *NokiaConf_Configure_Service_Vprn_Isis_RibPriority {
	if t.RibPriority != nil {
		return t.RibPriority
	}
	t.RibPriority = &NokiaConf_Configure_Service_Vprn_Isis_RibPriority{}
	return t.RibPriority
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Isis_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Isis_Timers{}
	return t.Timers
}

// GetOrCreateUnicastImport retrieves the value of the UnicastImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOrCreateUnicastImport() *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport {
	if t.UnicastImport != nil {
		return t.UnicastImport
	}
	t.UnicastImport = &NokiaConf_Configure_Service_Vprn_Isis_UnicastImport{}
	return t.UnicastImport
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetExportLimit() *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetGracefulRestart() *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetLspRefresh returns the value of the LspRefresh struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field LspRefresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLspRefresh() *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh {
	if t != nil && t.LspRefresh != nil {
		return t.LspRefresh
	}
	return nil
}

// GetMultiTopology returns the value of the MultiTopology struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field MultiTopology is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetMultiTopology() *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology {
	if t != nil && t.MultiTopology != nil {
		return t.MultiTopology
	}
	return nil
}

// GetMulticastImport returns the value of the MulticastImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field MulticastImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetMulticastImport() *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport {
	if t != nil && t.MulticastImport != nil {
		return t.MulticastImport
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOverload() *NokiaConf_Configure_Service_Vprn_Isis_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOverloadOnBoot() *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetPrefixLimit() *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetRibPriority returns the value of the RibPriority struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field RibPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetRibPriority() *NokiaConf_Configure_Service_Vprn_Isis_RibPriority {
	if t != nil && t.RibPriority != nil {
		return t.RibPriority
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetTimers() *NokiaConf_Configure_Service_Vprn_Isis_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetUnicastImport returns the value of the UnicastImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis. If the receiver or the field UnicastImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetUnicastImport() *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport {
	if t != nil && t.UnicastImport != nil {
		return t.UnicastImport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertisePassiveOnly retrieves the value of the leaf AdvertisePassiveOnly from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisePassiveOnly is set, it can
// safely use t.GetAdvertisePassiveOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisePassiveOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAdvertisePassiveOnly() bool {
	if t == nil || t.AdvertisePassiveOnly == nil {
		return false
	}
	return *t.AdvertisePassiveOnly
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAdvertiseRouterCapability() E_NokiaConf_Configure_Service_Vprn_Isis_AdvertiseRouterCapability {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return 0
	}
	return t.AdvertiseRouterCapability
}

// GetAllL1Isis retrieves the value of the leaf AllL1Isis from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllL1Isis is set, it can
// safely use t.GetAllL1Isis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllL1Isis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAllL1Isis() string {
	if t == nil || t.AllL1Isis == nil {
		return "01:80:C2:00:00:14"
	}
	return *t.AllL1Isis
}

// GetAllL2Isis retrieves the value of the leaf AllL2Isis from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllL2Isis is set, it can
// safely use t.GetAllL2Isis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllL2Isis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAllL2Isis() string {
	if t == nil || t.AllL2Isis == nil {
		return "01:80:C2:00:00:15"
	}
	return *t.AllL2Isis
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAreaAddress retrieves the value of the leaf AreaAddress from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaAddress is set, it can
// safely use t.GetAreaAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAreaAddress() []string {
	if t == nil || t.AreaAddress == nil {
		return nil
	}
	return t.AreaAddress
}

// GetAuthenticationCheck retrieves the value of the leaf AuthenticationCheck from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationCheck is set, it can
// safely use t.GetAuthenticationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAuthenticationCheck() bool {
	if t == nil || t.AuthenticationCheck == nil {
		return true
	}
	return *t.AuthenticationCheck
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetCsnpAuthentication retrieves the value of the leaf CsnpAuthentication from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpAuthentication is set, it can
// safely use t.GetCsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetCsnpAuthentication() bool {
	if t == nil || t.CsnpAuthentication == nil {
		return true
	}
	return *t.CsnpAuthentication
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetDefaultRouteTag() uint32 {
	if t == nil || t.DefaultRouteTag == nil {
		return 0
	}
	return *t.DefaultRouteTag
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetIgnoreAttachedBit retrieves the value of the leaf IgnoreAttachedBit from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreAttachedBit is set, it can
// safely use t.GetIgnoreAttachedBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreAttachedBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIgnoreAttachedBit() bool {
	if t == nil || t.IgnoreAttachedBit == nil {
		return false
	}
	return *t.IgnoreAttachedBit
}

// GetIgnoreLspErrors retrieves the value of the leaf IgnoreLspErrors from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreLspErrors is set, it can
// safely use t.GetIgnoreLspErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreLspErrors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIgnoreLspErrors() bool {
	if t == nil || t.IgnoreLspErrors == nil {
		return false
	}
	return *t.IgnoreLspErrors
}

// GetIgnoreNarrowMetric retrieves the value of the leaf IgnoreNarrowMetric from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreNarrowMetric is set, it can
// safely use t.GetIgnoreNarrowMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreNarrowMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIgnoreNarrowMetric() bool {
	if t == nil || t.IgnoreNarrowMetric == nil {
		return false
	}
	return *t.IgnoreNarrowMetric
}

// GetIidTlv retrieves the value of the leaf IidTlv from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IidTlv is set, it can
// safely use t.GetIidTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IidTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIidTlv() bool {
	if t == nil || t.IidTlv == nil {
		return false
	}
	return *t.IidTlv
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetIpv4MulticastRouting retrieves the value of the leaf Ipv4MulticastRouting from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastRouting is set, it can
// safely use t.GetIpv4MulticastRouting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastRouting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIpv4MulticastRouting() E_NokiaTypesIsis_RoutingTopology {
	if t == nil || t.Ipv4MulticastRouting == 0 {
		return NokiaTypesIsis_RoutingTopology_native
	}
	return t.Ipv4MulticastRouting
}

// GetIpv4Routing retrieves the value of the leaf Ipv4Routing from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Routing is set, it can
// safely use t.GetIpv4Routing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Routing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIpv4Routing() bool {
	if t == nil || t.Ipv4Routing == nil {
		return true
	}
	return *t.Ipv4Routing
}

// GetIpv6Routing retrieves the value of the leaf Ipv6Routing from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Routing is set, it can
// safely use t.GetIpv6Routing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Routing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIpv6Routing() E_NokiaTypesIsis_RoutingTopology {
	if t == nil || t.Ipv6Routing == 0 {
		return NokiaTypesIsis_RoutingTopology_false
	}
	return t.Ipv6Routing
}

// GetIsisInstance retrieves the value of the leaf IsisInstance from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsisInstance is set, it can
// safely use t.GetIsisInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsisInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetIsisInstance() int32 {
	if t == nil || t.IsisInstance == nil {
		return 0
	}
	return *t.IsisInstance
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetLspLifetime retrieves the value of the leaf LspLifetime from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspLifetime is set, it can
// safely use t.GetLspLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLspLifetime() uint32 {
	if t == nil || t.LspLifetime == nil {
		return 1200
	}
	return *t.LspLifetime
}

// GetLspMinimumRemainingLifetime retrieves the value of the leaf LspMinimumRemainingLifetime from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMinimumRemainingLifetime is set, it can
// safely use t.GetLspMinimumRemainingLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMinimumRemainingLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLspMinimumRemainingLifetime() uint32 {
	if t == nil || t.LspMinimumRemainingLifetime == nil {
		return 0
	}
	return *t.LspMinimumRemainingLifetime
}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetLspMtuSize() int32 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// GetMruMismatchDetection retrieves the value of the leaf MruMismatchDetection from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MruMismatchDetection is set, it can
// safely use t.GetMruMismatchDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MruMismatchDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetMruMismatchDetection() bool {
	if t == nil || t.MruMismatchDetection == nil {
		return false
	}
	return *t.MruMismatchDetection
}

// GetOverloadExportExternal retrieves the value of the leaf OverloadExportExternal from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadExportExternal is set, it can
// safely use t.GetOverloadExportExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadExportExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOverloadExportExternal() bool {
	if t == nil || t.OverloadExportExternal == nil {
		return false
	}
	return *t.OverloadExportExternal
}

// GetOverloadExportInterlevel retrieves the value of the leaf OverloadExportInterlevel from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadExportInterlevel is set, it can
// safely use t.GetOverloadExportInterlevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadExportInterlevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetOverloadExportInterlevel() bool {
	if t == nil || t.OverloadExportInterlevel == nil {
		return false
	}
	return *t.OverloadExportInterlevel
}

// GetPoiTlv retrieves the value of the leaf PoiTlv from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoiTlv is set, it can
// safely use t.GetPoiTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoiTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetPoiTlv() bool {
	if t == nil || t.PoiTlv == nil {
		return false
	}
	return *t.PoiTlv
}

// GetPrefixAttributesTlv retrieves the value of the leaf PrefixAttributesTlv from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixAttributesTlv is set, it can
// safely use t.GetPrefixAttributesTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixAttributesTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetPrefixAttributesTlv() bool {
	if t == nil || t.PrefixAttributesTlv == nil {
		return false
	}
	return *t.PrefixAttributesTlv
}

// GetPsnpAuthentication retrieves the value of the leaf PsnpAuthentication from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsnpAuthentication is set, it can
// safely use t.GetPsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetPsnpAuthentication() bool {
	if t == nil || t.PsnpAuthentication == nil {
		return true
	}
	return *t.PsnpAuthentication
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 0
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetStandardMultiInstance retrieves the value of the leaf StandardMultiInstance from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandardMultiInstance is set, it can
// safely use t.GetStandardMultiInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandardMultiInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetStandardMultiInstance() bool {
	if t == nil || t.StandardMultiInstance == nil {
		return false
	}
	return *t.StandardMultiInstance
}

// GetStrictAdjacencyCheck retrieves the value of the leaf StrictAdjacencyCheck from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictAdjacencyCheck is set, it can
// safely use t.GetStrictAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictAdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetStrictAdjacencyCheck() bool {
	if t == nil || t.StrictAdjacencyCheck == nil {
		return false
	}
	return *t.StrictAdjacencyCheck
}

// GetSuppressAttachedBit retrieves the value of the leaf SuppressAttachedBit from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressAttachedBit is set, it can
// safely use t.GetSuppressAttachedBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressAttachedBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetSuppressAttachedBit() bool {
	if t == nil || t.SuppressAttachedBit == nil {
		return false
	}
	return *t.SuppressAttachedBit
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Service_Vprn_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return "0000.0000.0000"
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvertisePassiveOnly == nil {
		var v bool = false
		t.AdvertisePassiveOnly = &v
	}
	if t.AllL1Isis == nil {
		var v string = "01:80:C2:00:00:14"
		t.AllL1Isis = &v
	}
	if t.AllL2Isis == nil {
		var v string = "01:80:C2:00:00:15"
		t.AllL2Isis = &v
	}
	if t.AuthenticationCheck == nil {
		var v bool = true
		t.AuthenticationCheck = &v
	}
	if t.CsnpAuthentication == nil {
		var v bool = true
		t.CsnpAuthentication = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.IgnoreAttachedBit == nil {
		var v bool = false
		t.IgnoreAttachedBit = &v
	}
	if t.IgnoreLspErrors == nil {
		var v bool = false
		t.IgnoreLspErrors = &v
	}
	if t.IgnoreNarrowMetric == nil {
		var v bool = false
		t.IgnoreNarrowMetric = &v
	}
	if t.IidTlv == nil {
		var v bool = false
		t.IidTlv = &v
	}
	if t.Ipv4MulticastRouting == 0 {
		t.Ipv4MulticastRouting = NokiaTypesIsis_RoutingTopology_native
	}
	if t.Ipv4Routing == nil {
		var v bool = true
		t.Ipv4Routing = &v
	}
	if t.Ipv6Routing == 0 {
		t.Ipv6Routing = NokiaTypesIsis_RoutingTopology_false
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	if t.LspLifetime == nil {
		var v uint32 = 1200
		t.LspLifetime = &v
	}
	if t.LspMtuSize == nil {
		var v int32 = 1492
		t.LspMtuSize = &v
	}
	if t.MruMismatchDetection == nil {
		var v bool = false
		t.MruMismatchDetection = &v
	}
	if t.OverloadExportExternal == nil {
		var v bool = false
		t.OverloadExportExternal = &v
	}
	if t.OverloadExportInterlevel == nil {
		var v bool = false
		t.OverloadExportInterlevel = &v
	}
	if t.PoiTlv == nil {
		var v bool = false
		t.PoiTlv = &v
	}
	if t.PrefixAttributesTlv == nil {
		var v bool = false
		t.PrefixAttributesTlv = &v
	}
	if t.PsnpAuthentication == nil {
		var v bool = true
		t.PsnpAuthentication = &v
	}
	if t.StandardMultiInstance == nil {
		var v bool = false
		t.StandardMultiInstance = &v
	}
	if t.StrictAdjacencyCheck == nil {
		var v bool = false
		t.StrictAdjacencyCheck = &v
	}
	if t.SuppressAttachedBit == nil {
		var v bool = false
		t.SuppressAttachedBit = &v
	}
	if t.SystemId == nil {
		var v string = "0000.0000.0000"
		t.SystemId = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.LspRefresh.PopulateDefaults()
	t.MultiTopology.PopulateDefaults()
	t.MulticastImport.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
	t.RibPriority.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.UnicastImport.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.LinkGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SummaryAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IsisInstance == nil {
		return nil, fmt.Errorf("nil value for key IsisInstance")
	}

	return map[string]interface{}{
		"isis-instance": *t.IsisInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis.
func (*NokiaConf_Configure_Service_Vprn_Isis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_ExportLimit represents the /nokia-conf/configure/service/vprn/isis/export-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Service_Vprn_Isis_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Isis_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_ExportLimit.
func (*NokiaConf_Configure_Service_Vprn_Isis_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart represents the /nokia-conf/configure/service/vprn/isis/graceful-restart YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart struct {
	HelperMode *bool `path:"helper-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart.
func (*NokiaConf_Configure_Service_Vprn_Isis_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface represents the /nokia-conf/configure/service/vprn/isis/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface struct {
	AdminState                  E_NokiaTypesSros_AdminState                                                                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                 []string                                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness                 *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness                                                                   `path:"bfd-liveness" module:"nokia-conf"`
	CsnpInterval                *uint32                                                                                                                        `path:"csnp-interval" module:"nokia-conf"`
	DefaultInstance             *bool                                                                                                                          `path:"default-instance" module:"nokia-conf"`
	HelloAuthentication         *bool                                                                                                                          `path:"hello-authentication" module:"nokia-conf"`
	HelloAuthenticationKey      *string                                                                                                                        `path:"hello-authentication-key" module:"nokia-conf"`
	HelloAuthenticationKeychain *string                                                                                                                        `path:"hello-authentication-keychain" module:"nokia-conf"`
	HelloAuthenticationType     E_NokiaTypesIsis_AuthType                                                                                                      `path:"hello-authentication-type" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                                                                              `path:"hello-padding" module:"nokia-conf"`
	InterfaceName               *string                                                                                                                        `path:"interface-name" module:"nokia-conf"`
	InterfaceType               E_NokiaTypesIsis_InterfaceType                                                                                                 `path:"interface-type" module:"nokia-conf"`
	Ipv4Multicast               *bool                                                                                                                          `path:"ipv4-multicast" module:"nokia-conf"`
	Ipv6Unicast                 *bool                                                                                                                          `path:"ipv6-unicast" module:"nokia-conf"`
	Level                       map[E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_Interface_Level `path:"level" module:"nokia-conf"`
	LevelCapability             E_NokiaTypesIsis_Level                                                                                                         `path:"level-capability" module:"nokia-conf"`
	LoadBalancingWeight         *uint32                                                                                                                        `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate           *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate                                                             `path:"loopfree-alternate" module:"nokia-conf"`
	LspPacingInterval           *uint32                                                                                                                        `path:"lsp-pacing-interval" module:"nokia-conf"`
	MeshGroup                   *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup                                                                     `path:"mesh-group" module:"nokia-conf" yangPresence:"true"`
	Passive                     *bool                                                                                                                          `path:"passive" module:"nokia-conf"`
	RetransmitInterval          *uint32                                                                                                                        `path:"retransmit-interval" module:"nokia-conf"`
	Tag                         *uint32                                                                                                                        `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vprn_Isis_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) NewLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber) (*NokiaConf_Configure_Service_Vprn_Isis_Interface_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_Interface_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vprn_Isis_Interface_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vprn_Isis_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) RenameLevel(oldK, newK E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetOrCreateLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber) *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vprn_Isis_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber) *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) DeleteLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vprn_Isis_Interface_Level struct to the
// list Level of NokiaConf_Configure_Service_Vprn_Isis_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis_Interface_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) AppendLevel(v *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_Interface_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateMeshGroup retrieves the value of the MeshGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetOrCreateMeshGroup() *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup {
	if t.MeshGroup != nil {
		return t.MeshGroup
	}
	t.MeshGroup = &NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup{}
	return t.MeshGroup
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetMeshGroup returns the value of the MeshGroup struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Interface. If the receiver or the field MeshGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetMeshGroup() *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup {
	if t != nil && t.MeshGroup != nil {
		return t.MeshGroup
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCsnpInterval retrieves the value of the leaf CsnpInterval from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpInterval is set, it can
// safely use t.GetCsnpInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetCsnpInterval() uint32 {
	if t == nil || t.CsnpInterval == nil {
		return 10
	}
	return *t.CsnpInterval
}

// GetDefaultInstance retrieves the value of the leaf DefaultInstance from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultInstance is set, it can
// safely use t.GetDefaultInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetDefaultInstance() bool {
	if t == nil || t.DefaultInstance == nil {
		return false
	}
	return *t.DefaultInstance
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloAuthenticationKey retrieves the value of the leaf HelloAuthenticationKey from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKey is set, it can
// safely use t.GetHelloAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetHelloAuthenticationKey() string {
	if t == nil || t.HelloAuthenticationKey == nil {
		return ""
	}
	return *t.HelloAuthenticationKey
}

// GetHelloAuthenticationKeychain retrieves the value of the leaf HelloAuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKeychain is set, it can
// safely use t.GetHelloAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetHelloAuthenticationKeychain() string {
	if t == nil || t.HelloAuthenticationKeychain == nil {
		return ""
	}
	return *t.HelloAuthenticationKeychain
}

// GetHelloAuthenticationType retrieves the value of the leaf HelloAuthenticationType from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationType is set, it can
// safely use t.GetHelloAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetHelloAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.HelloAuthenticationType == 0 {
		return 0
	}
	return t.HelloAuthenticationType
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetInterfaceType() E_NokiaTypesIsis_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetIpv4Multicast retrieves the value of the leaf Ipv4Multicast from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Multicast is set, it can
// safely use t.GetIpv4Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetIpv4Multicast() bool {
	if t == nil || t.Ipv4Multicast == nil {
		return true
	}
	return *t.Ipv4Multicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return true
	}
	return *t.Ipv6Unicast
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLspPacingInterval retrieves the value of the leaf LspPacingInterval from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPacingInterval is set, it can
// safely use t.GetLspPacingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPacingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetLspPacingInterval() uint32 {
	if t == nil || t.LspPacingInterval == nil {
		return 100
	}
	return *t.LspPacingInterval
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Vprn_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CsnpInterval == nil {
		var v uint32 = 10
		t.CsnpInterval = &v
	}
	if t.DefaultInstance == nil {
		var v bool = false
		t.DefaultInstance = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.Ipv4Multicast == nil {
		var v bool = true
		t.Ipv4Multicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = true
		t.Ipv6Unicast = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	if t.LspPacingInterval == nil {
		var v uint32 = 100
		t.LspPacingInterval = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	t.BfdLiveness.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.MeshGroup.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness represents the /nokia-conf/configure/service/vprn/isis/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness struct {
	Ipv4 *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6 *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) GetIpv4() *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) GetIpv6() *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 represents the /nokia-conf/configure/service/vprn/isis/interface/bfd-liveness/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 struct {
	IncludeBfdTlv *bool `path:"include-bfd-tlv" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) IsYANGGoStruct() {}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 represents the /nokia-conf/configure/service/vprn/isis/interface/bfd-liveness/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 struct {
	IncludeBfdTlv *bool `path:"include-bfd-tlv" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) IsYANGGoStruct() {}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_BfdLiveness_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface_Level represents the /nokia-conf/configure/service/vprn/isis/interface/level YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface_Level struct {
	ApplyGroups                 []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	HelloAuthenticationKey      *string                                                             `path:"hello-authentication-key" module:"nokia-conf"`
	HelloAuthenticationKeychain *string                                                             `path:"hello-authentication-keychain" module:"nokia-conf"`
	HelloAuthenticationType     E_NokiaTypesIsis_AuthType                                           `path:"hello-authentication-type" module:"nokia-conf"`
	HelloInterval               *uint32                                                             `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier             *int32                                                              `path:"hello-multiplier" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                   `path:"hello-padding" module:"nokia-conf"`
	Ipv4MulticastMetric         *uint32                                                             `path:"ipv4-multicast-metric" module:"nokia-conf"`
	Ipv6UnicastMetric           *uint32                                                             `path:"ipv6-unicast-metric" module:"nokia-conf"`
	LevelNumber                 E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber `path:"level-number" module:"nokia-conf"`
	Metric                      *uint32                                                             `path:"metric" module:"nokia-conf"`
	Passive                     *bool                                                               `path:"passive" module:"nokia-conf"`
	Priority                    *uint32                                                             `path:"priority" module:"nokia-conf"`
	SdOffset                    *uint32                                                             `path:"sd-offset" module:"nokia-conf"`
	SfOffset                    *uint32                                                             `path:"sf-offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHelloAuthenticationKey retrieves the value of the leaf HelloAuthenticationKey from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKey is set, it can
// safely use t.GetHelloAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetHelloAuthenticationKey() string {
	if t == nil || t.HelloAuthenticationKey == nil {
		return ""
	}
	return *t.HelloAuthenticationKey
}

// GetHelloAuthenticationKeychain retrieves the value of the leaf HelloAuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKeychain is set, it can
// safely use t.GetHelloAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetHelloAuthenticationKeychain() string {
	if t == nil || t.HelloAuthenticationKeychain == nil {
		return ""
	}
	return *t.HelloAuthenticationKeychain
}

// GetHelloAuthenticationType retrieves the value of the leaf HelloAuthenticationType from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationType is set, it can
// safely use t.GetHelloAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetHelloAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.HelloAuthenticationType == 0 {
		return 0
	}
	return t.HelloAuthenticationType
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 9
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetHelloMultiplier() int32 {
	if t == nil || t.HelloMultiplier == nil {
		return 3
	}
	return *t.HelloMultiplier
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetIpv4MulticastMetric retrieves the value of the leaf Ipv4MulticastMetric from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastMetric is set, it can
// safely use t.GetIpv4MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetIpv4MulticastMetric() uint32 {
	if t == nil || t.Ipv4MulticastMetric == nil {
		return 0
	}
	return *t.Ipv4MulticastMetric
}

// GetIpv6UnicastMetric retrieves the value of the leaf Ipv6UnicastMetric from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetric is set, it can
// safely use t.GetIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetIpv6UnicastMetric() uint32 {
	if t == nil || t.Ipv6UnicastMetric == nil {
		return 0
	}
	return *t.Ipv6UnicastMetric
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetLevelNumber() E_NokiaConf_Configure_Service_Vprn_Isis_Interface_Level_LevelNumber {
	if t == nil || t.LevelNumber == 0 {
		return 0
	}
	return t.LevelNumber
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 64
	}
	return *t.Priority
}

// GetSdOffset retrieves the value of the leaf SdOffset from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdOffset is set, it can
// safely use t.GetSdOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetSdOffset() uint32 {
	if t == nil || t.SdOffset == nil {
		return 0
	}
	return *t.SdOffset
}

// GetSfOffset retrieves the value of the leaf SfOffset from the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfOffset is set, it can
// safely use t.GetSfOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) GetSfOffset() uint32 {
	if t == nil || t.SfOffset == nil {
		return 0
	}
	return *t.SfOffset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint32 = 9
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v int32 = 3
		t.HelloMultiplier = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.Priority == nil {
		var v uint32 = 64
		t.Priority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis_Interface_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface_Level.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate represents the /nokia-conf/configure/service/vprn/isis/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                        `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/service/vprn/isis/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {
}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup represents the /nokia-conf/configure/service/vprn/isis/interface/mesh-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup struct {
	Blocked YANGEmpty `path:"blocked" module:"nokia-conf"`
	Value   *int32    `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) IsYANGGoStruct() {}

// GetBlocked retrieves the value of the leaf Blocked from the NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Blocked is set, it can
// safely use t.GetBlocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Blocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) GetBlocked() YANGEmpty {
	if t == nil || t.Blocked == false {
		return false
	}
	return t.Blocked
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup.
func (*NokiaConf_Configure_Service_Vprn_Isis_Interface_MeshGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Level represents the /nokia-conf/configure/service/vprn/isis/level YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Level struct {
	AdvertiseRouterCapability  *bool                                                     `path:"advertise-router-capability" module:"nokia-conf"`
	ApplyGroups                []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey          *string                                                   `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain     *string                                                   `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType         E_NokiaTypesIsis_AuthType                                 `path:"authentication-type" module:"nokia-conf"`
	CsnpAuthentication         *bool                                                     `path:"csnp-authentication" module:"nokia-conf"`
	DefaultIpv4MulticastMetric *uint32                                                   `path:"default-ipv4-multicast-metric" module:"nokia-conf"`
	DefaultIpv6UnicastMetric   *uint32                                                   `path:"default-ipv6-unicast-metric" module:"nokia-conf"`
	DefaultMetric              *uint32                                                   `path:"default-metric" module:"nokia-conf"`
	ExternalPreference         *uint32                                                   `path:"external-preference" module:"nokia-conf"`
	HelloAuthentication        *bool                                                     `path:"hello-authentication" module:"nokia-conf"`
	HelloPadding               E_NokiaTypesIsis_HelloPaddingType                         `path:"hello-padding" module:"nokia-conf"`
	LevelNumber                E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber `path:"level-number" module:"nokia-conf"`
	LoopfreeAlternateExclude   *bool                                                     `path:"loopfree-alternate-exclude" module:"nokia-conf"`
	LspMtuSize                 *int32                                                    `path:"lsp-mtu-size" module:"nokia-conf"`
	Preference                 *uint32                                                   `path:"preference" module:"nokia-conf"`
	PsnpAuthentication         *bool                                                     `path:"psnp-authentication" module:"nokia-conf"`
	WideMetricsOnly            *bool                                                     `path:"wide-metrics-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Level) IsYANGGoStruct() {}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetCsnpAuthentication retrieves the value of the leaf CsnpAuthentication from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpAuthentication is set, it can
// safely use t.GetCsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetCsnpAuthentication() bool {
	if t == nil || t.CsnpAuthentication == nil {
		return true
	}
	return *t.CsnpAuthentication
}

// GetDefaultIpv4MulticastMetric retrieves the value of the leaf DefaultIpv4MulticastMetric from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpv4MulticastMetric is set, it can
// safely use t.GetDefaultIpv4MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpv4MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetDefaultIpv4MulticastMetric() uint32 {
	if t == nil || t.DefaultIpv4MulticastMetric == nil {
		return 10
	}
	return *t.DefaultIpv4MulticastMetric
}

// GetDefaultIpv6UnicastMetric retrieves the value of the leaf DefaultIpv6UnicastMetric from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpv6UnicastMetric is set, it can
// safely use t.GetDefaultIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetDefaultIpv6UnicastMetric() uint32 {
	if t == nil || t.DefaultIpv6UnicastMetric == nil {
		return 10
	}
	return *t.DefaultIpv6UnicastMetric
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 10
	}
	return *t.DefaultMetric
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetExternalPreference() uint32 {
	if t == nil || t.ExternalPreference == nil {
		return 0
	}
	return *t.ExternalPreference
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetLevelNumber() E_NokiaConf_Configure_Service_Vprn_Isis_Level_LevelNumber {
	if t == nil || t.LevelNumber == 0 {
		return 0
	}
	return t.LevelNumber
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetLspMtuSize() int32 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetPsnpAuthentication retrieves the value of the leaf PsnpAuthentication from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsnpAuthentication is set, it can
// safely use t.GetPsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetPsnpAuthentication() bool {
	if t == nil || t.PsnpAuthentication == nil {
		return true
	}
	return *t.PsnpAuthentication
}

// GetWideMetricsOnly retrieves the value of the leaf WideMetricsOnly from the NokiaConf_Configure_Service_Vprn_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WideMetricsOnly is set, it can
// safely use t.GetWideMetricsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WideMetricsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) GetWideMetricsOnly() bool {
	if t == nil || t.WideMetricsOnly == nil {
		return false
	}
	return *t.WideMetricsOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.CsnpAuthentication == nil {
		var v bool = true
		t.CsnpAuthentication = &v
	}
	if t.DefaultIpv4MulticastMetric == nil {
		var v uint32 = 10
		t.DefaultIpv4MulticastMetric = &v
	}
	if t.DefaultIpv6UnicastMetric == nil {
		var v uint32 = 10
		t.DefaultIpv6UnicastMetric = &v
	}
	if t.DefaultMetric == nil {
		var v uint32 = 10
		t.DefaultMetric = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	if t.LspMtuSize == nil {
		var v int32 = 1492
		t.LspMtuSize = &v
	}
	if t.PsnpAuthentication == nil {
		var v bool = true
		t.PsnpAuthentication = &v
	}
	if t.WideMetricsOnly == nil {
		var v bool = false
		t.WideMetricsOnly = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Level.
func (*NokiaConf_Configure_Service_Vprn_Isis_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_LinkGroup represents the /nokia-conf/configure/service/vprn/isis/link-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_LinkGroup struct {
	ApplyGroups        []string                                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                                        `path:"description" module:"nokia-conf"`
	Level              map[E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level `path:"level" module:"nokia-conf"`
	LinkGroupName      *string                                                                                                                        `path:"link-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_LinkGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vprn_Isis_LinkGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) NewLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber) (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) RenameLevel(oldK, newK E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis_LinkGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) GetOrCreateLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber) *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vprn_Isis_LinkGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) GetLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber) *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis_LinkGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) DeleteLevel(LevelNumber E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level struct to the
// list Level of NokiaConf_Configure_Service_Vprn_Isis_LinkGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) AppendLevel(v *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkGroupName retrieves the value of the leaf LinkGroupName from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkGroupName is set, it can
// safely use t.GetLinkGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) GetLinkGroupName() string {
	if t == nil || t.LinkGroupName == nil {
		return ""
	}
	return *t.LinkGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkGroupName == nil {
		return nil, fmt.Errorf("nil value for key LinkGroupName")
	}

	return map[string]interface{}{
		"link-group-name": *t.LinkGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_LinkGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_LinkGroup.
func (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level represents the /nokia-conf/configure/service/vprn/isis/link-group/level YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level struct {
	ApplyGroups               []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4MulticastMetricOffset *uint32                                                                  `path:"ipv4-multicast-metric-offset" module:"nokia-conf"`
	Ipv4UnicastMetricOffset   *uint32                                                                  `path:"ipv4-unicast-metric-offset" module:"nokia-conf"`
	Ipv6UnicastMetricOffset   *uint32                                                                  `path:"ipv6-unicast-metric-offset" module:"nokia-conf"`
	LevelNumber               E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber      `path:"level-number" module:"nokia-conf"`
	Member                    map[string]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member `path:"member" module:"nokia-conf"`
	OperMembers               *uint32                                                                  `path:"oper-members" module:"nokia-conf"`
	RevertMembers             *uint32                                                                  `path:"revert-members" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) NewMember(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member{
		InterfaceName: &InterfaceName,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.InterfaceName = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetOrCreateMember(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member {

	key := InterfaceName

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetMember(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// DeleteMember deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) DeleteMember(InterfaceName string) {
	key := InterfaceName

	delete(t.Member, key)
}

// AppendMember appends the supplied NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member struct to the
// list Member of NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) AppendMember(v *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4MulticastMetricOffset retrieves the value of the leaf Ipv4MulticastMetricOffset from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastMetricOffset is set, it can
// safely use t.GetIpv4MulticastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetIpv4MulticastMetricOffset() uint32 {
	if t == nil || t.Ipv4MulticastMetricOffset == nil {
		return 0
	}
	return *t.Ipv4MulticastMetricOffset
}

// GetIpv4UnicastMetricOffset retrieves the value of the leaf Ipv4UnicastMetricOffset from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4UnicastMetricOffset is set, it can
// safely use t.GetIpv4UnicastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4UnicastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetIpv4UnicastMetricOffset() uint32 {
	if t == nil || t.Ipv4UnicastMetricOffset == nil {
		return 0
	}
	return *t.Ipv4UnicastMetricOffset
}

// GetIpv6UnicastMetricOffset retrieves the value of the leaf Ipv6UnicastMetricOffset from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetricOffset is set, it can
// safely use t.GetIpv6UnicastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetIpv6UnicastMetricOffset() uint32 {
	if t == nil || t.Ipv6UnicastMetricOffset == nil {
		return 0
	}
	return *t.Ipv6UnicastMetricOffset
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetLevelNumber() E_NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_LevelNumber {
	if t == nil || t.LevelNumber == 0 {
		return 0
	}
	return t.LevelNumber
}

// GetOperMembers retrieves the value of the leaf OperMembers from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperMembers is set, it can
// safely use t.GetOperMembers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperMembers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetOperMembers() uint32 {
	if t == nil || t.OperMembers == nil {
		return 0
	}
	return *t.OperMembers
}

// GetRevertMembers retrieves the value of the leaf RevertMembers from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertMembers is set, it can
// safely use t.GetRevertMembers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertMembers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) GetRevertMembers() uint32 {
	if t == nil || t.RevertMembers == nil {
		return 0
	}
	return *t.RevertMembers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level.
func (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member represents the /nokia-conf/configure/service/vprn/isis/link-group/level/member YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member.
func (*NokiaConf_Configure_Service_Vprn_Isis_LinkGroup_Level_Member) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate represents the /nokia-conf/configure/service/vprn/isis/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate struct {
	Exclude *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude `path:"exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exclude.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate.
func (*NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/service/vprn/isis/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude) IsYANGGoStruct() {}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Service_Vprn_Isis_LoopfreeAlternate_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_LspRefresh represents the /nokia-conf/configure/service/vprn/isis/lsp-refresh YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_LspRefresh struct {
	HalfLifetime *bool   `path:"half-lifetime" module:"nokia-conf"`
	Interval     *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_LspRefresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) IsYANGGoStruct() {}

// GetHalfLifetime retrieves the value of the leaf HalfLifetime from the NokiaConf_Configure_Service_Vprn_Isis_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLifetime is set, it can
// safely use t.GetHalfLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) GetHalfLifetime() bool {
	if t == nil || t.HalfLifetime == nil {
		return true
	}
	return *t.HalfLifetime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_Isis_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 600
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_LspRefresh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HalfLifetime == nil {
		var v bool = true
		t.HalfLifetime = &v
	}
	if t.Interval == nil {
		var v uint32 = 600
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_LspRefresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_LspRefresh.
func (*NokiaConf_Configure_Service_Vprn_Isis_LspRefresh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_MultiTopology represents the /nokia-conf/configure/service/vprn/isis/multi-topology YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_MultiTopology struct {
	Ipv4Multicast *bool `path:"ipv4-multicast" module:"nokia-conf"`
	Ipv6Unicast   *bool `path:"ipv6-unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_MultiTopology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) IsYANGGoStruct() {}

// GetIpv4Multicast retrieves the value of the leaf Ipv4Multicast from the NokiaConf_Configure_Service_Vprn_Isis_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Multicast is set, it can
// safely use t.GetIpv4Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) GetIpv4Multicast() bool {
	if t == nil || t.Ipv4Multicast == nil {
		return false
	}
	return *t.Ipv4Multicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the NokiaConf_Configure_Service_Vprn_Isis_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return false
	}
	return *t.Ipv6Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_MultiTopology
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4Multicast == nil {
		var v bool = false
		t.Ipv4Multicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = false
		t.Ipv6Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_MultiTopology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_MultiTopology.
func (*NokiaConf_Configure_Service_Vprn_Isis_MultiTopology) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_MulticastImport represents the /nokia-conf/configure/service/vprn/isis/multicast-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_MulticastImport struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_MulticastImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_MulticastImport) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Isis_MulticastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_MulticastImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_MulticastImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_MulticastImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_MulticastImport.
func (*NokiaConf_Configure_Service_Vprn_Isis_MulticastImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Overload represents the /nokia-conf/configure/service/vprn/isis/overload YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Overload struct {
	MaxMetric *bool `path:"max-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Overload) IsYANGGoStruct() {}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the NokiaConf_Configure_Service_Vprn_Isis_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Overload) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Overload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Overload.
func (*NokiaConf_Configure_Service_Vprn_Isis_Overload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot represents the /nokia-conf/configure/service/vprn/isis/overload-on-boot YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot struct {
	MaxMetric *bool   `path:"max-metric" module:"nokia-conf"`
	Timeout   *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) IsYANGGoStruct() {}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot.
func (*NokiaConf_Configure_Service_Vprn_Isis_OverloadOnBoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit represents the /nokia-conf/configure/service/vprn/isis/prefix-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit struct {
	Limit            *uint32                                                                 `path:"limit" module:"nokia-conf"`
	LogOnly          *bool                                                                   `path:"log-only" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                                 `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) IsYANGGoStruct() {}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) GetOverloadTimeout() NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit.
func (*NokiaConf_Configure_Service_Vprn_Isis_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_RibPriority represents the /nokia-conf/configure/service/vprn/isis/rib-priority YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_RibPriority struct {
	High *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority) GetHigh() *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_RibPriority.
func (*NokiaConf_Configure_Service_Vprn_Isis_RibPriority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High represents the /nokia-conf/configure/service/vprn/isis/rib-priority/high YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
	Tag        *uint32 `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High.
func (*NokiaConf_Configure_Service_Vprn_Isis_RibPriority_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress represents the /nokia-conf/configure/service/vprn/isis/summary-address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress struct {
	ApplyGroups        []string               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string               `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string                `path:"ip-prefix" module:"nokia-conf"`
	LevelCapability    E_NokiaTypesIsis_Level `path:"level-capability" module:"nokia-conf"`
	RouteTag           *uint32                `path:"route-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress.
func (*NokiaConf_Configure_Service_Vprn_Isis_SummaryAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Timers represents the /nokia-conf/configure/service/vprn/isis/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Timers struct {
	LspWait *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait `path:"lsp-wait" module:"nokia-conf"`
	SpfWait *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Timers) IsYANGGoStruct() {}

// GetOrCreateLspWait retrieves the value of the LspWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) GetOrCreateLspWait() *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait {
	if t.LspWait != nil {
		return t.LspWait
	}
	t.LspWait = &NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait{}
	return t.LspWait
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait{}
	return t.SpfWait
}

// GetLspWait returns the value of the LspWait struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Timers. If the receiver or the field LspWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) GetLspWait() *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait {
	if t != nil && t.LspWait != nil {
		return t.LspWait
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Service_Vprn_Isis_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) GetSpfWait() *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LspWait.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Timers.
func (*NokiaConf_Configure_Service_Vprn_Isis_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait represents the /nokia-conf/configure/service/vprn/isis/timers/lsp-wait YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait struct {
	LspInitialWait *uint32 `path:"lsp-initial-wait" module:"nokia-conf"`
	LspMaxWait     *uint32 `path:"lsp-max-wait" module:"nokia-conf"`
	LspSecondWait  *uint32 `path:"lsp-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) IsYANGGoStruct() {}

// GetLspInitialWait retrieves the value of the leaf LspInitialWait from the NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspInitialWait is set, it can
// safely use t.GetLspInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) GetLspInitialWait() uint32 {
	if t == nil || t.LspInitialWait == nil {
		return 10
	}
	return *t.LspInitialWait
}

// GetLspMaxWait retrieves the value of the leaf LspMaxWait from the NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMaxWait is set, it can
// safely use t.GetLspMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) GetLspMaxWait() uint32 {
	if t == nil || t.LspMaxWait == nil {
		return 5000
	}
	return *t.LspMaxWait
}

// GetLspSecondWait retrieves the value of the leaf LspSecondWait from the NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspSecondWait is set, it can
// safely use t.GetLspSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) GetLspSecondWait() uint32 {
	if t == nil || t.LspSecondWait == nil {
		return 1000
	}
	return *t.LspSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspInitialWait == nil {
		var v uint32 = 10
		t.LspInitialWait = &v
	}
	if t.LspMaxWait == nil {
		var v uint32 = 5000
		t.LspMaxWait = &v
	}
	if t.LspSecondWait == nil {
		var v uint32 = 1000
		t.LspSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait.
func (*NokiaConf_Configure_Service_Vprn_Isis_Timers_LspWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait represents the /nokia-conf/configure/service/vprn/isis/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait.
func (*NokiaConf_Configure_Service_Vprn_Isis_Timers_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Isis_UnicastImport represents the /nokia-conf/configure/service/vprn/isis/unicast-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Isis_UnicastImport struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Isis_UnicastImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Isis_UnicastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Isis_UnicastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Isis_UnicastImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Isis_UnicastImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Isis_UnicastImport.
func (*NokiaConf_Configure_Service_Vprn_Isis_UnicastImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp represents the /nokia-conf/configure/service/vprn/l2tp YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp struct {
	AdminState               E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups              []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	AvpHiding                E_NokiaTypesL2Tp_BaseAvpHiding                                  `path:"avp-hiding" module:"nokia-conf"`
	Challenge                *bool                                                           `path:"challenge" module:"nokia-conf"`
	DestructTimeout          *uint32                                                         `path:"destruct-timeout" module:"nokia-conf"`
	EthernetTunnel           *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel           `path:"ethernet-tunnel" module:"nokia-conf"`
	ExcludeAvps              *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps              `path:"exclude-avps" module:"nokia-conf"`
	Failover                 *NokiaConf_Configure_Service_Vprn_L2Tp_Failover                 `path:"failover" module:"nokia-conf"`
	Group                    map[string]*NokiaConf_Configure_Service_Vprn_L2Tp_Group         `path:"group" module:"nokia-conf"`
	GroupSessionLimit        *int32                                                          `path:"group-session-limit" module:"nokia-conf"`
	HelloInterval            NokiaConf_Configure_Service_Vprn_L2Tp_HelloInterval_Union       `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout              NokiaConf_Configure_Service_Vprn_L2Tp_IdleTimeout_Union         `path:"idle-timeout" module:"nokia-conf"`
	IgnoreAvps               *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps               `path:"ignore-avps" module:"nokia-conf"`
	L2Tpv3                   *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3                   `path:"l2tpv3" module:"nokia-conf"`
	Lac                      *NokiaConf_Configure_Service_Vprn_L2Tp_Lac                      `path:"lac" module:"nokia-conf"`
	LocalAddress             *string                                                         `path:"local-address" module:"nokia-conf"`
	LocalName                *string                                                         `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab          *int32                                                          `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab       *int32                                                          `path:"max-retries-not-estab" module:"nokia-conf"`
	NextAttempt              E_NokiaConf_Configure_Service_Vprn_L2Tp_NextAttempt             `path:"next-attempt" module:"nokia-conf"`
	Password                 *string                                                         `path:"password" module:"nokia-conf"`
	PeerAddressChangePolicy  E_NokiaTypesL2Tp_PeerAddressChangePolicyOption                  `path:"peer-address-change-policy" module:"nokia-conf"`
	RadiusAccountingPolicy   *string                                                         `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize        *uint32                                                         `path:"receive-window-size" module:"nokia-conf"`
	ReplaceResultCode        *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode        `path:"replace-result-code" module:"nokia-conf"`
	RtmDebounceTime          NokiaConf_Configure_Service_Vprn_L2Tp_RtmDebounceTime_Union     `path:"rtm-debounce-time" module:"nokia-conf"`
	SessionAssignMethod      E_NokiaTypesL2Tp_BaseSessionAssignMethod                        `path:"session-assign-method" module:"nokia-conf"`
	SessionLimit             *int32                                                          `path:"session-limit" module:"nokia-conf"`
	TunnelSelectionBlacklist *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist `path:"tunnel-selection-blacklist" module:"nokia-conf"`
	TunnelSessionLimit       *int32                                                          `path:"tunnel-session-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_L2Tp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) NewGroup(TunnelGroupName string) (*NokiaConf_Configure_Service_Vprn_L2Tp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_L2Tp_Group)
	}

	key := TunnelGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_L2Tp_Group{
		TunnelGroupName: &TunnelGroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_L2Tp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.TunnelGroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_L2Tp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateGroup(TunnelGroupName string) *NokiaConf_Configure_Service_Vprn_L2Tp_Group {

	key := TunnelGroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(TunnelGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetGroup(TunnelGroupName string) *NokiaConf_Configure_Service_Vprn_L2Tp_Group {

	if t == nil {
		return nil
	}

	key := TunnelGroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_L2Tp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) DeleteGroup(TunnelGroupName string) {
	key := TunnelGroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_L2Tp_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_L2Tp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_L2Tp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) AppendGroup(v *NokiaConf_Configure_Service_Vprn_L2Tp_Group) error {
	if v.TunnelGroupName == nil {
		return fmt.Errorf("invalid nil key received for TunnelGroupName")
	}

	key := *v.TunnelGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_L2Tp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateEthernetTunnel retrieves the value of the EthernetTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateEthernetTunnel() *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel {
	if t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	t.EthernetTunnel = &NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel{}
	return t.EthernetTunnel
}

// GetOrCreateExcludeAvps retrieves the value of the ExcludeAvps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateExcludeAvps() *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps {
	if t.ExcludeAvps != nil {
		return t.ExcludeAvps
	}
	t.ExcludeAvps = &NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps{}
	return t.ExcludeAvps
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateFailover() *NokiaConf_Configure_Service_Vprn_L2Tp_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Service_Vprn_L2Tp_Failover{}
	return t.Failover
}

// GetOrCreateIgnoreAvps retrieves the value of the IgnoreAvps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateIgnoreAvps() *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps {
	if t.IgnoreAvps != nil {
		return t.IgnoreAvps
	}
	t.IgnoreAvps = &NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps{}
	return t.IgnoreAvps
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateL2Tpv3() *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateLac() *NokiaConf_Configure_Service_Vprn_L2Tp_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Service_Vprn_L2Tp_Lac{}
	return t.Lac
}

// GetOrCreateReplaceResultCode retrieves the value of the ReplaceResultCode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateReplaceResultCode() *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode {
	if t.ReplaceResultCode != nil {
		return t.ReplaceResultCode
	}
	t.ReplaceResultCode = &NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode{}
	return t.ReplaceResultCode
}

// GetOrCreateTunnelSelectionBlacklist retrieves the value of the TunnelSelectionBlacklist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetOrCreateTunnelSelectionBlacklist() *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist {
	if t.TunnelSelectionBlacklist != nil {
		return t.TunnelSelectionBlacklist
	}
	t.TunnelSelectionBlacklist = &NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist{}
	return t.TunnelSelectionBlacklist
}

// GetEthernetTunnel returns the value of the EthernetTunnel struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field EthernetTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetEthernetTunnel() *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel {
	if t != nil && t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	return nil
}

// GetExcludeAvps returns the value of the ExcludeAvps struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field ExcludeAvps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetExcludeAvps() *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps {
	if t != nil && t.ExcludeAvps != nil {
		return t.ExcludeAvps
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetFailover() *NokiaConf_Configure_Service_Vprn_L2Tp_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetIgnoreAvps returns the value of the IgnoreAvps struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field IgnoreAvps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetIgnoreAvps() *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps {
	if t != nil && t.IgnoreAvps != nil {
		return t.IgnoreAvps
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetL2Tpv3() *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetLac() *NokiaConf_Configure_Service_Vprn_L2Tp_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetReplaceResultCode returns the value of the ReplaceResultCode struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field ReplaceResultCode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetReplaceResultCode() *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode {
	if t != nil && t.ReplaceResultCode != nil {
		return t.ReplaceResultCode
	}
	return nil
}

// GetTunnelSelectionBlacklist returns the value of the TunnelSelectionBlacklist struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp. If the receiver or the field TunnelSelectionBlacklist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetTunnelSelectionBlacklist() *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist {
	if t != nil && t.TunnelSelectionBlacklist != nil {
		return t.TunnelSelectionBlacklist
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetAvpHiding() E_NokiaTypesL2Tp_BaseAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetChallenge() bool {
	if t == nil || t.Challenge == nil {
		return false
	}
	return *t.Challenge
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 60
	}
	return *t.DestructTimeout
}

// GetGroupSessionLimit retrieves the value of the leaf GroupSessionLimit from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupSessionLimit is set, it can
// safely use t.GetGroupSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetGroupSessionLimit() int32 {
	if t == nil || t.GroupSessionLimit == nil {
		return 0
	}
	return *t.GroupSessionLimit
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetHelloInterval() NokiaConf_Configure_Service_Vprn_L2Tp_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return UnionUint32(300)
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetIdleTimeout() NokiaConf_Configure_Service_Vprn_L2Tp_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return NokiaTypesL2Tp_BaseIdleTimeout_Enum_infinite
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 5
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 5
	}
	return *t.MaxRetriesNotEstab
}

// GetNextAttempt retrieves the value of the leaf NextAttempt from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextAttempt is set, it can
// safely use t.GetNextAttempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextAttempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetNextAttempt() E_NokiaConf_Configure_Service_Vprn_L2Tp_NextAttempt {
	if t == nil || t.NextAttempt == 0 {
		return NokiaConf_Configure_Service_Vprn_L2Tp_NextAttempt_next_preference_level
	}
	return t.NextAttempt
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPeerAddressChangePolicy retrieves the value of the leaf PeerAddressChangePolicy from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAddressChangePolicy is set, it can
// safely use t.GetPeerAddressChangePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAddressChangePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetPeerAddressChangePolicy() E_NokiaTypesL2Tp_PeerAddressChangePolicyOption {
	if t == nil || t.PeerAddressChangePolicy == 0 {
		return NokiaTypesL2Tp_PeerAddressChangePolicyOption_reject
	}
	return t.PeerAddressChangePolicy
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 64
	}
	return *t.ReceiveWindowSize
}

// GetRtmDebounceTime retrieves the value of the leaf RtmDebounceTime from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtmDebounceTime is set, it can
// safely use t.GetRtmDebounceTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtmDebounceTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetRtmDebounceTime() NokiaConf_Configure_Service_Vprn_L2Tp_RtmDebounceTime_Union {
	if t == nil || t.RtmDebounceTime == nil {
		return NokiaTypesL2Tp_RtmDebounceTime_Enum_infinite
	}
	return t.RtmDebounceTime
}

// GetSessionAssignMethod retrieves the value of the leaf SessionAssignMethod from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionAssignMethod is set, it can
// safely use t.GetSessionAssignMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionAssignMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetSessionAssignMethod() E_NokiaTypesL2Tp_BaseSessionAssignMethod {
	if t == nil || t.SessionAssignMethod == 0 {
		return NokiaTypesL2Tp_BaseSessionAssignMethod_existing_first
	}
	return t.SessionAssignMethod
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetSessionLimit() int32 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTunnelSessionLimit retrieves the value of the leaf TunnelSessionLimit from the NokiaConf_Configure_Service_Vprn_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelSessionLimit is set, it can
// safely use t.GetTunnelSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) GetTunnelSessionLimit() int32 {
	if t == nil || t.TunnelSessionLimit == nil {
		return 0
	}
	return *t.TunnelSessionLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Challenge == nil {
		var v bool = false
		t.Challenge = &v
	}
	if t.DestructTimeout == nil {
		var v uint32 = 60
		t.DestructTimeout = &v
	}
	if t.HelloInterval == nil {
		t.HelloInterval = UnionUint32(300)
	}
	if t.IdleTimeout == nil {
		t.IdleTimeout = NokiaTypesL2Tp_BaseIdleTimeout_Enum_infinite
	}
	if t.MaxRetriesEstab == nil {
		var v int32 = 5
		t.MaxRetriesEstab = &v
	}
	if t.MaxRetriesNotEstab == nil {
		var v int32 = 5
		t.MaxRetriesNotEstab = &v
	}
	if t.NextAttempt == 0 {
		t.NextAttempt = NokiaConf_Configure_Service_Vprn_L2Tp_NextAttempt_next_preference_level
	}
	if t.PeerAddressChangePolicy == 0 {
		t.PeerAddressChangePolicy = NokiaTypesL2Tp_PeerAddressChangePolicyOption_reject
	}
	if t.ReceiveWindowSize == nil {
		var v uint32 = 64
		t.ReceiveWindowSize = &v
	}
	if t.RtmDebounceTime == nil {
		t.RtmDebounceTime = NokiaTypesL2Tp_RtmDebounceTime_Enum_infinite
	}
	if t.SessionAssignMethod == 0 {
		t.SessionAssignMethod = NokiaTypesL2Tp_BaseSessionAssignMethod_existing_first
	}
	t.EthernetTunnel.PopulateDefaults()
	t.ExcludeAvps.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.IgnoreAvps.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.ReplaceResultCode.PopulateDefaults()
	t.TunnelSelectionBlacklist.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp.
func (*NokiaConf_Configure_Service_Vprn_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel represents the /nokia-conf/configure/service/vprn/l2tp/ethernet-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel struct {
	ReconnectTimeout NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel_ReconnectTimeout_Union `path:"reconnect-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel) IsYANGGoStruct() {}

// GetReconnectTimeout retrieves the value of the leaf ReconnectTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconnectTimeout is set, it can
// safely use t.GetReconnectTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconnectTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel) GetReconnectTimeout() NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel_ReconnectTimeout_Union {
	if t == nil || t.ReconnectTimeout == nil {
		return NokiaTypesL2Tp_BaseV3ReconnectTimeout_Enum_infinite
	}
	return t.ReconnectTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReconnectTimeout == nil {
		t.ReconnectTimeout = NokiaTypesL2Tp_BaseV3ReconnectTimeout_Enum_infinite
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_EthernetTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps represents the /nokia-conf/configure/service/vprn/l2tp/exclude-avps YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps struct {
	CallingNumber       *bool `path:"calling-number" module:"nokia-conf"`
	InitialRxLcpConfReq *bool `path:"initial-rx-lcp-conf-req" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) IsYANGGoStruct() {}

// GetCallingNumber retrieves the value of the leaf CallingNumber from the NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingNumber is set, it can
// safely use t.GetCallingNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) GetCallingNumber() bool {
	if t == nil || t.CallingNumber == nil {
		return false
	}
	return *t.CallingNumber
}

// GetInitialRxLcpConfReq retrieves the value of the leaf InitialRxLcpConfReq from the NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialRxLcpConfReq is set, it can
// safely use t.GetInitialRxLcpConfReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialRxLcpConfReq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) GetInitialRxLcpConfReq() bool {
	if t == nil || t.InitialRxLcpConfReq == nil {
		return false
	}
	return *t.InitialRxLcpConfReq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingNumber == nil {
		var v bool = false
		t.CallingNumber = &v
	}
	if t.InitialRxLcpConfReq == nil {
		var v bool = false
		t.InitialRxLcpConfReq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_ExcludeAvps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Failover represents the /nokia-conf/configure/service/vprn/l2tp/failover YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Failover struct {
	RecoveryMaxSessionLifetime *uint32                                                              `path:"recovery-max-session-lifetime" module:"nokia-conf"`
	RecoveryMethod             E_NokiaTypesL2Tp_BaseFailoverRecoveryMethod                          `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime               *int32                                                               `path:"recovery-time" module:"nokia-conf"`
	TrackSrrp                  map[uint32]*NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Failover) IsYANGGoStruct() {}

// NewTrackSrrp creates a new entry in the TrackSrrp list of the
// NokiaConf_Configure_Service_Vprn_L2Tp_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) NewTrackSrrp(Id uint32) (*NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[uint32]*NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrackSrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrackSrrp", key)
	}

	t.TrackSrrp[key] = &NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp{
		Id: &Id,
	}

	return t.TrackSrrp[key], nil
}

// RenameTrackSrrp renames an entry in the list TrackSrrp within
// the NokiaConf_Configure_Service_Vprn_L2Tp_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) RenameTrackSrrp(oldK, newK uint32) error {
	if _, ok := t.TrackSrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in TrackSrrp", newK)
	}

	e, ok := t.TrackSrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrackSrrp", oldK)
	}
	e.Id = &newK

	t.TrackSrrp[newK] = e
	delete(t.TrackSrrp, oldK)
	return nil
}

// GetOrCreateTrackSrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_L2Tp_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) GetOrCreateTrackSrrp(Id uint32) *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp {

	key := Id

	if v, ok := t.TrackSrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrackSrrp(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrackSrrp got unexpected error: %v", err))
	}
	return v
}

// GetTrackSrrp retrieves the value with the specified key from
// the TrackSrrp map field of NokiaConf_Configure_Service_Vprn_L2Tp_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) GetTrackSrrp(Id uint32) *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.TrackSrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrackSrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_L2Tp_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) DeleteTrackSrrp(Id uint32) {
	key := Id

	delete(t.TrackSrrp, key)
}

// AppendTrackSrrp appends the supplied NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp struct to the
// list TrackSrrp of NokiaConf_Configure_Service_Vprn_L2Tp_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) AppendTrackSrrp(v *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[uint32]*NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp)
	}

	if _, ok := t.TrackSrrp[key]; ok {
		return fmt.Errorf("duplicate key for list TrackSrrp %v", key)
	}

	t.TrackSrrp[key] = v
	return nil
}

// GetRecoveryMaxSessionLifetime retrieves the value of the leaf RecoveryMaxSessionLifetime from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMaxSessionLifetime is set, it can
// safely use t.GetRecoveryMaxSessionLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMaxSessionLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) GetRecoveryMaxSessionLifetime() uint32 {
	if t == nil || t.RecoveryMaxSessionLifetime == nil {
		return 2
	}
	return *t.RecoveryMaxSessionLifetime
}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_BaseFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return NokiaTypesL2Tp_BaseFailoverRecoveryMethod_mcs
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RecoveryMaxSessionLifetime == nil {
		var v uint32 = 2
		t.RecoveryMaxSessionLifetime = &v
	}
	if t.RecoveryMethod == 0 {
		t.RecoveryMethod = NokiaTypesL2Tp_BaseFailoverRecoveryMethod_mcs
	}
	if t.RecoveryTime == nil {
		var v int32 = 0
		t.RecoveryTime = &v
	}
	for _, e := range t.TrackSrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Failover.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp represents the /nokia-conf/configure/service/vprn/l2tp/failover/track-srrp YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32  `path:"id" module:"nokia-conf"`
	Peer               *string  `path:"peer" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Failover_TrackSrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group represents the /nokia-conf/configure/service/vprn/l2tp/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group struct {
	AdminState             E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	AvpHiding              E_NokiaTypesL2Tp_ChildAvpHiding                                 `path:"avp-hiding" module:"nokia-conf"`
	Challenge              E_NokiaTypesSros_BoolWithInherit                                `path:"challenge" module:"nokia-conf"`
	Description            *string                                                         `path:"description" module:"nokia-conf"`
	DestructTimeout        *uint32                                                         `path:"destruct-timeout" module:"nokia-conf"`
	EthernetTunnel         *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel     `path:"ethernet-tunnel" module:"nokia-conf"`
	Failover               *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover           `path:"failover" module:"nokia-conf"`
	HelloInterval          NokiaConf_Configure_Service_Vprn_L2Tp_Group_HelloInterval_Union `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout            NokiaConf_Configure_Service_Vprn_L2Tp_Group_IdleTimeout_Union   `path:"idle-timeout" module:"nokia-conf"`
	L2Tpv3                 *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3             `path:"l2tpv3" module:"nokia-conf"`
	Lac                    *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac                `path:"lac" module:"nokia-conf"`
	Lns                    *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns                `path:"lns" module:"nokia-conf"`
	LocalAddress           *string                                                         `path:"local-address" module:"nokia-conf"`
	LocalName              *string                                                         `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab        *int32                                                          `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab     *int32                                                          `path:"max-retries-not-estab" module:"nokia-conf"`
	Password               *string                                                         `path:"password" module:"nokia-conf"`
	Protocol               E_NokiaTypesL2Tp_ProtocolVersion                                `path:"protocol" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                         `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize      *uint32                                                         `path:"receive-window-size" module:"nokia-conf"`
	SessionAssignMethod    E_NokiaTypesL2Tp_ChildSessionAssignMethod                       `path:"session-assign-method" module:"nokia-conf"`
	SessionLimit           NokiaConf_Configure_Service_Vprn_L2Tp_Group_SessionLimit_Union  `path:"session-limit" module:"nokia-conf"`
	Tunnel                 map[string]*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel  `path:"tunnel" module:"nokia-conf"`
	TunnelGroupName        *string                                                         `path:"tunnel-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group) IsYANGGoStruct() {}

// NewTunnel creates a new entry in the Tunnel list of the
// NokiaConf_Configure_Service_Vprn_L2Tp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) NewTunnel(TunnelName string) (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel)
	}

	key := TunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel{
		TunnelName: &TunnelName,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the NokiaConf_Configure_Service_Vprn_L2Tp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) RenameTunnel(oldK, newK string) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.TunnelName = &newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetOrCreateTunnel(TunnelName string) *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel {

	key := TunnelName

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(TunnelName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetTunnel(TunnelName string) *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel {

	if t == nil {
		return nil
	}

	key := TunnelName

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_L2Tp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) DeleteTunnel(TunnelName string) {
	key := TunnelName

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel struct to the
// list Tunnel of NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) AppendTunnel(v *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) error {
	if v.TunnelName == nil {
		return fmt.Errorf("invalid nil key received for TunnelName")
	}

	key := *v.TunnelName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// GetOrCreateEthernetTunnel retrieves the value of the EthernetTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetOrCreateEthernetTunnel() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel {
	if t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	t.EthernetTunnel = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel{}
	return t.EthernetTunnel
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetOrCreateFailover() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover{}
	return t.Failover
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetOrCreateL2Tpv3() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetOrCreateLac() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac{}
	return t.Lac
}

// GetOrCreateLns retrieves the value of the Lns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetOrCreateLns() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns {
	if t.Lns != nil {
		return t.Lns
	}
	t.Lns = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns{}
	return t.Lns
}

// GetEthernetTunnel returns the value of the EthernetTunnel struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the receiver or the field EthernetTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetEthernetTunnel() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel {
	if t != nil && t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetFailover() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetL2Tpv3() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetLac() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetLns returns the value of the Lns struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group. If the receiver or the field Lns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetLns() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns {
	if t != nil && t.Lns != nil {
		return t.Lns
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetAvpHiding() E_NokiaTypesL2Tp_ChildAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetChallenge() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Challenge == 0 {
		return 0
	}
	return t.Challenge
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 0
	}
	return *t.DestructTimeout
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetHelloInterval() NokiaConf_Configure_Service_Vprn_L2Tp_Group_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return nil
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetIdleTimeout() NokiaConf_Configure_Service_Vprn_L2Tp_Group_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return nil
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 0
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 0
	}
	return *t.MaxRetriesNotEstab
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetProtocol() E_NokiaTypesL2Tp_ProtocolVersion {
	if t == nil || t.Protocol == 0 {
		return NokiaTypesL2Tp_ProtocolVersion_v2
	}
	return t.Protocol
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 0
	}
	return *t.ReceiveWindowSize
}

// GetSessionAssignMethod retrieves the value of the leaf SessionAssignMethod from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionAssignMethod is set, it can
// safely use t.GetSessionAssignMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionAssignMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetSessionAssignMethod() E_NokiaTypesL2Tp_ChildSessionAssignMethod {
	if t == nil || t.SessionAssignMethod == 0 {
		return 0
	}
	return t.SessionAssignMethod
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetSessionLimit() NokiaConf_Configure_Service_Vprn_L2Tp_Group_SessionLimit_Union {
	if t == nil || t.SessionLimit == nil {
		return nil
	}
	return t.SessionLimit
}

// GetTunnelGroupName retrieves the value of the leaf TunnelGroupName from the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupName is set, it can
// safely use t.GetTunnelGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) GetTunnelGroupName() string {
	if t == nil || t.TunnelGroupName == nil {
		return ""
	}
	return *t.TunnelGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Protocol == 0 {
		t.Protocol = NokiaTypesL2Tp_ProtocolVersion_v2
	}
	t.EthernetTunnel.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.Lns.PopulateDefaults()
	for _, e := range t.Tunnel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_L2Tp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelGroupName == nil {
		return nil, fmt.Errorf("nil value for key TunnelGroupName")
	}

	return map[string]interface{}{
		"tunnel-group-name": *t.TunnelGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel represents the /nokia-conf/configure/service/vprn/l2tp/group/ethernet-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel struct {
	ReconnectTimeout NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel_ReconnectTimeout_Union `path:"reconnect-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel) IsYANGGoStruct() {}

// GetReconnectTimeout retrieves the value of the leaf ReconnectTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconnectTimeout is set, it can
// safely use t.GetReconnectTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconnectTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel) GetReconnectTimeout() NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel_ReconnectTimeout_Union {
	if t == nil || t.ReconnectTimeout == nil {
		return nil
	}
	return t.ReconnectTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_EthernetTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover represents the /nokia-conf/configure/service/vprn/l2tp/group/failover YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover struct {
	RecoveryMethod E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime   *int32                                       `path:"recovery-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) IsYANGGoStruct() {}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return 0
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3 represents the /nokia-conf/configure/service/vprn/l2tp/group/l2tpv3 YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3 struct {
	CookieLength        NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_CookieLength_Union        `path:"cookie-length" module:"nokia-conf"`
	DigestType          E_NokiaTypesL2Tp_ChildV3DigestType                                           `path:"digest-type" module:"nokia-conf"`
	NonceLength         *int32                                                                       `path:"nonce-length" module:"nokia-conf"`
	Password            *string                                                                      `path:"password" module:"nokia-conf"`
	PrivateTcpMssAdjust NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PrivateTcpMssAdjust_Union `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PublicTcpMssAdjust_Union  `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	PwCapList           *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList                `path:"pw-cap-list" module:"nokia-conf"`
	RemRouterId         *string                                                                      `path:"rem-router-id" module:"nokia-conf"`
	TrackPasswordChange *bool                                                                        `path:"track-password-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreatePwCapList retrieves the value of the PwCapList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetOrCreatePwCapList() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList {
	if t.PwCapList != nil {
		return t.PwCapList
	}
	t.PwCapList = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList{}
	return t.PwCapList
}

// GetPwCapList returns the value of the PwCapList struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3. If the receiver or the field PwCapList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetPwCapList() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList {
	if t != nil && t.PwCapList != nil {
		return t.PwCapList
	}
	return nil
}

// GetCookieLength retrieves the value of the leaf CookieLength from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CookieLength is set, it can
// safely use t.GetCookieLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CookieLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetCookieLength() NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_CookieLength_Union {
	if t == nil || t.CookieLength == nil {
		return nil
	}
	return t.CookieLength
}

// GetDigestType retrieves the value of the leaf DigestType from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigestType is set, it can
// safely use t.GetDigestType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigestType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetDigestType() E_NokiaTypesL2Tp_ChildV3DigestType {
	if t == nil || t.DigestType == 0 {
		return 0
	}
	return t.DigestType
}

// GetNonceLength retrieves the value of the leaf NonceLength from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonceLength is set, it can
// safely use t.GetNonceLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonceLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetNonceLength() int32 {
	if t == nil || t.NonceLength == nil {
		return 0
	}
	return *t.NonceLength
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetPrivateTcpMssAdjust() NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PrivateTcpMssAdjust_Union {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return nil
	}
	return t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetPublicTcpMssAdjust() NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetRemRouterId retrieves the value of the leaf RemRouterId from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemRouterId is set, it can
// safely use t.GetRemRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetRemRouterId() string {
	if t == nil || t.RemRouterId == nil {
		return "0.0.0.0"
	}
	return *t.RemRouterId
}

// GetTrackPasswordChange retrieves the value of the leaf TrackPasswordChange from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackPasswordChange is set, it can
// safely use t.GetTrackPasswordChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackPasswordChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) GetTrackPasswordChange() bool {
	if t == nil || t.TrackPasswordChange == nil {
		return false
	}
	return *t.TrackPasswordChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemRouterId == nil {
		var v string = "0.0.0.0"
		t.RemRouterId = &v
	}
	if t.TrackPasswordChange == nil {
		var v bool = false
		t.TrackPasswordChange = &v
	}
	t.PwCapList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList represents the /nokia-conf/configure/service/vprn/l2tp/group/l2tpv3/pw-cap-list YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList struct {
	Ethernet     *bool `path:"ethernet" module:"nokia-conf"`
	EthernetVlan *bool `path:"ethernet-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) GetEthernet() bool {
	if t == nil || t.Ethernet == nil {
		return false
	}
	return *t.Ethernet
}

// GetEthernetVlan retrieves the value of the leaf EthernetVlan from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetVlan is set, it can
// safely use t.GetEthernetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) GetEthernetVlan() bool {
	if t == nil || t.EthernetVlan == nil {
		return false
	}
	return *t.EthernetVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ethernet == nil {
		var v bool = false
		t.Ethernet = &v
	}
	if t.EthernetVlan == nil {
		var v bool = false
		t.EthernetVlan = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_L2Tpv3_PwCapList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac represents the /nokia-conf/configure/service/vprn/l2tp/group/lac YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac struct {
	DfBit E_NokiaTypesSros_BoolWithInherit `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac) IsYANGGoStruct() {}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac) GetDfBit() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.DfBit == 0 {
		return 0
	}
	return t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns represents the /nokia-conf/configure/service/vprn/l2tp/group/lns YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns struct {
	LnsGroup          *uint32                                                `path:"lns-group" module:"nokia-conf"`
	LoadBalanceMethod E_NokiaTypesL2Tp_BaseLoadBalanceMethod                 `path:"load-balance-method" module:"nokia-conf"`
	Mlppp             *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp `path:"mlppp" module:"nokia-conf"`
	Ppp               *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp   `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) IsYANGGoStruct() {}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) GetOrCreateMlppp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp{}
	return t.Mlppp
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) GetOrCreatePpp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp{}
	return t.Ppp
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) GetMlppp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) GetPpp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetLnsGroup retrieves the value of the leaf LnsGroup from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LnsGroup is set, it can
// safely use t.GetLnsGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LnsGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) GetLnsGroup() uint32 {
	if t == nil || t.LnsGroup == nil {
		return 0
	}
	return *t.LnsGroup
}

// GetLoadBalanceMethod retrieves the value of the leaf LoadBalanceMethod from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalanceMethod is set, it can
// safely use t.GetLoadBalanceMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalanceMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) GetLoadBalanceMethod() E_NokiaTypesL2Tp_BaseLoadBalanceMethod {
	if t == nil || t.LoadBalanceMethod == 0 {
		return NokiaTypesL2Tp_BaseLoadBalanceMethod_per_session
	}
	return t.LoadBalanceMethod
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LoadBalanceMethod == 0 {
		t.LoadBalanceMethod = NokiaTypesL2Tp_BaseLoadBalanceMethod_per_session
	}
	t.Mlppp.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp represents the /nokia-conf/configure/service/vprn/l2tp/group/lns/mlppp YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp struct {
	AdminState           E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Endpoint             *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint              `path:"endpoint" module:"nokia-conf"`
	Interleave           *bool                                                                        `path:"interleave" module:"nokia-conf"`
	MaxFragmentDelay     NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_MaxFragmentDelay_Union `path:"max-fragment-delay" module:"nokia-conf"`
	MaxLinks             *uint32                                                                      `path:"max-links" module:"nokia-conf"`
	ReassemblyTimeout    *uint32                                                                      `path:"reassembly-timeout" module:"nokia-conf"`
	ShortSequenceNumbers *bool                                                                        `path:"short-sequence-numbers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetOrCreateEndpoint() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint{}
	return t.Endpoint
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetEndpoint() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterleave retrieves the value of the leaf Interleave from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interleave is set, it can
// safely use t.GetInterleave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interleave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetInterleave() bool {
	if t == nil || t.Interleave == nil {
		return false
	}
	return *t.Interleave
}

// GetMaxFragmentDelay retrieves the value of the leaf MaxFragmentDelay from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFragmentDelay is set, it can
// safely use t.GetMaxFragmentDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFragmentDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetMaxFragmentDelay() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_MaxFragmentDelay_Union {
	if t == nil || t.MaxFragmentDelay == nil {
		return NokiaTypesL2Tp_BaseMlpppMaxFragDelay_Enum_no_fragmentation
	}
	return t.MaxFragmentDelay
}

// GetMaxLinks retrieves the value of the leaf MaxLinks from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLinks is set, it can
// safely use t.GetMaxLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetMaxLinks() uint32 {
	if t == nil || t.MaxLinks == nil {
		return 1
	}
	return *t.MaxLinks
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 1000
	}
	return *t.ReassemblyTimeout
}

// GetShortSequenceNumbers retrieves the value of the leaf ShortSequenceNumbers from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequenceNumbers is set, it can
// safely use t.GetShortSequenceNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequenceNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) GetShortSequenceNumbers() bool {
	if t == nil || t.ShortSequenceNumbers == nil {
		return false
	}
	return *t.ShortSequenceNumbers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interleave == nil {
		var v bool = false
		t.Interleave = &v
	}
	if t.MaxFragmentDelay == nil {
		t.MaxFragmentDelay = NokiaTypesL2Tp_BaseMlpppMaxFragDelay_Enum_no_fragmentation
	}
	if t.MaxLinks == nil {
		var v uint32 = 1
		t.MaxLinks = &v
	}
	if t.ReassemblyTimeout == nil {
		var v uint32 = 1000
		t.ReassemblyTimeout = &v
	}
	if t.ShortSequenceNumbers == nil {
		var v bool = false
		t.ShortSequenceNumbers = &v
	}
	t.Endpoint.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint represents the /nokia-conf/configure/service/vprn/l2tp/group/lns/mlppp/endpoint YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint struct {
	Ip  NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Ip_Union  `path:"ip" module:"nokia-conf"`
	Mac NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Mac_Union `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) GetIp() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Ip_Union {
	if t == nil || t.Ip == nil {
		return nil
	}
	return t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) GetMac() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint_Mac_Union {
	if t == nil || t.Mac == nil {
		return nil
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Mlppp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp represents the /nokia-conf/configure/service/vprn/l2tp/group/lns/ppp YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp struct {
	Authentication        E_NokiaTypesL2Tp_BasePppAuthProtocol                                       `path:"authentication" module:"nokia-conf"`
	AuthenticationPolicy  *string                                                                    `path:"authentication-policy" module:"nokia-conf"`
	ChapChallengeLength   *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength   `path:"chap-challenge-length" module:"nokia-conf"`
	DefaultGroupInterface *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface `path:"default-group-interface" module:"nokia-conf"`
	IpcpSubnetNegotiation *bool                                                                      `path:"ipcp-subnet-negotiation" module:"nokia-conf"`
	Keepalive             *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive             `path:"keepalive" module:"nokia-conf"`
	LcpForceAckAccm       *bool                                                                      `path:"lcp-force-ack-accm" module:"nokia-conf"`
	LcpIgnoreMagicNumbers *bool                                                                      `path:"lcp-ignore-magic-numbers" module:"nokia-conf"`
	Mtu                   *uint32                                                                    `path:"mtu" module:"nokia-conf"`
	ProxyAuthentication   *bool                                                                      `path:"proxy-authentication" module:"nokia-conf"`
	ProxyLcp              *bool                                                                      `path:"proxy-lcp" module:"nokia-conf"`
	RejectDisabledNcp     *bool                                                                      `path:"reject-disabled-ncp" module:"nokia-conf"`
	UserDb                *string                                                                    `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) IsYANGGoStruct() {}

// GetOrCreateChapChallengeLength retrieves the value of the ChapChallengeLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetOrCreateChapChallengeLength() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength {
	if t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	t.ChapChallengeLength = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength{}
	return t.ChapChallengeLength
}

// GetOrCreateDefaultGroupInterface retrieves the value of the DefaultGroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetOrCreateDefaultGroupInterface() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface {
	if t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	t.DefaultGroupInterface = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface{}
	return t.DefaultGroupInterface
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive{}
	return t.Keepalive
}

// GetChapChallengeLength returns the value of the ChapChallengeLength struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp. If the receiver or the field ChapChallengeLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetChapChallengeLength() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength {
	if t != nil && t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	return nil
}

// GetDefaultGroupInterface returns the value of the DefaultGroupInterface struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp. If the receiver or the field DefaultGroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetDefaultGroupInterface() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface {
	if t != nil && t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetKeepalive() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetAuthentication retrieves the value of the leaf Authentication from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authentication is set, it can
// safely use t.GetAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetAuthentication() E_NokiaTypesL2Tp_BasePppAuthProtocol {
	if t == nil || t.Authentication == 0 {
		return NokiaTypesL2Tp_BasePppAuthProtocol_pref_chap
	}
	return t.Authentication
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetIpcpSubnetNegotiation retrieves the value of the leaf IpcpSubnetNegotiation from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpcpSubnetNegotiation is set, it can
// safely use t.GetIpcpSubnetNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpcpSubnetNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetIpcpSubnetNegotiation() bool {
	if t == nil || t.IpcpSubnetNegotiation == nil {
		return false
	}
	return *t.IpcpSubnetNegotiation
}

// GetLcpForceAckAccm retrieves the value of the leaf LcpForceAckAccm from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpForceAckAccm is set, it can
// safely use t.GetLcpForceAckAccm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpForceAckAccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetLcpForceAckAccm() bool {
	if t == nil || t.LcpForceAckAccm == nil {
		return false
	}
	return *t.LcpForceAckAccm
}

// GetLcpIgnoreMagicNumbers retrieves the value of the leaf LcpIgnoreMagicNumbers from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreMagicNumbers is set, it can
// safely use t.GetLcpIgnoreMagicNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreMagicNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetLcpIgnoreMagicNumbers() bool {
	if t == nil || t.LcpIgnoreMagicNumbers == nil {
		return false
	}
	return *t.LcpIgnoreMagicNumbers
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetProxyAuthentication retrieves the value of the leaf ProxyAuthentication from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyAuthentication is set, it can
// safely use t.GetProxyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetProxyAuthentication() bool {
	if t == nil || t.ProxyAuthentication == nil {
		return false
	}
	return *t.ProxyAuthentication
}

// GetProxyLcp retrieves the value of the leaf ProxyLcp from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyLcp is set, it can
// safely use t.GetProxyLcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyLcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetProxyLcp() bool {
	if t == nil || t.ProxyLcp == nil {
		return false
	}
	return *t.ProxyLcp
}

// GetRejectDisabledNcp retrieves the value of the leaf RejectDisabledNcp from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RejectDisabledNcp is set, it can
// safely use t.GetRejectDisabledNcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RejectDisabledNcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetRejectDisabledNcp() bool {
	if t == nil || t.RejectDisabledNcp == nil {
		return false
	}
	return *t.RejectDisabledNcp
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authentication == 0 {
		t.Authentication = NokiaTypesL2Tp_BasePppAuthProtocol_pref_chap
	}
	if t.IpcpSubnetNegotiation == nil {
		var v bool = false
		t.IpcpSubnetNegotiation = &v
	}
	if t.LcpForceAckAccm == nil {
		var v bool = false
		t.LcpForceAckAccm = &v
	}
	if t.LcpIgnoreMagicNumbers == nil {
		var v bool = false
		t.LcpIgnoreMagicNumbers = &v
	}
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.ProxyAuthentication == nil {
		var v bool = false
		t.ProxyAuthentication = &v
	}
	if t.ProxyLcp == nil {
		var v bool = false
		t.ProxyLcp = &v
	}
	if t.RejectDisabledNcp == nil {
		var v bool = false
		t.RejectDisabledNcp = &v
	}
	t.ChapChallengeLength.PopulateDefaults()
	t.DefaultGroupInterface.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength represents the /nokia-conf/configure/service/vprn/l2tp/group/lns/ppp/chap-challenge-length YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 64
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 32
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v uint32 = 64
		t.End = &v
	}
	if t.Start == nil {
		var v uint32 = 32
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_ChapChallengeLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface represents the /nokia-conf/configure/service/vprn/l2tp/group/lns/ppp/default-group-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive represents the /nokia-conf/configure/service/vprn/l2tp/group/lns/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive struct {
	Interval   *uint32 `path:"interval" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Lns_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel struct {
	AdminState             E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoEstablish          *bool                                                                  `path:"auto-establish" module:"nokia-conf"`
	AvpHiding              E_NokiaTypesL2Tp_ChildAvpHiding                                        `path:"avp-hiding" module:"nokia-conf"`
	Challenge              E_NokiaTypesSros_BoolWithInherit                                       `path:"challenge" module:"nokia-conf"`
	Description            *string                                                                `path:"description" module:"nokia-conf"`
	DestructTimeout        *uint32                                                                `path:"destruct-timeout" module:"nokia-conf"`
	Failover               *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover           `path:"failover" module:"nokia-conf"`
	HelloInterval          NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_HelloInterval_Union `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout            NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_IdleTimeout_Union   `path:"idle-timeout" module:"nokia-conf"`
	L2Tpv3                 *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3             `path:"l2tpv3" module:"nokia-conf"`
	Lac                    *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac                `path:"lac" module:"nokia-conf"`
	Lns                    *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns                `path:"lns" module:"nokia-conf"`
	LocalAddress           *string                                                                `path:"local-address" module:"nokia-conf"`
	LocalName              *string                                                                `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab        *int32                                                                 `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab     *int32                                                                 `path:"max-retries-not-estab" module:"nokia-conf"`
	Password               *string                                                                `path:"password" module:"nokia-conf"`
	Peer                   *string                                                                `path:"peer" module:"nokia-conf"`
	Preference             *uint32                                                                `path:"preference" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                                `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize      *uint32                                                                `path:"receive-window-size" module:"nokia-conf"`
	RemoteName             *string                                                                `path:"remote-name" module:"nokia-conf"`
	SessionLimit           NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_SessionLimit_Union  `path:"session-limit" module:"nokia-conf"`
	TunnelName             *string                                                                `path:"tunnel-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) IsYANGGoStruct() {}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateFailover() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover{}
	return t.Failover
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateL2Tpv3() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateLac() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac{}
	return t.Lac
}

// GetOrCreateLns retrieves the value of the Lns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetOrCreateLns() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns {
	if t.Lns != nil {
		return t.Lns
	}
	t.Lns = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns{}
	return t.Lns
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetFailover() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetL2Tpv3() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetLac() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetLns returns the value of the Lns struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel. If the receiver or the field Lns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetLns() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns {
	if t != nil && t.Lns != nil {
		return t.Lns
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoEstablish retrieves the value of the leaf AutoEstablish from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEstablish is set, it can
// safely use t.GetAutoEstablish() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEstablish == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetAutoEstablish() bool {
	if t == nil || t.AutoEstablish == nil {
		return false
	}
	return *t.AutoEstablish
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetAvpHiding() E_NokiaTypesL2Tp_ChildAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetChallenge() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Challenge == 0 {
		return 0
	}
	return t.Challenge
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 0
	}
	return *t.DestructTimeout
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetHelloInterval() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return nil
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetIdleTimeout() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return nil
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 0
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 0
	}
	return *t.MaxRetriesNotEstab
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 0
	}
	return *t.ReceiveWindowSize
}

// GetRemoteName retrieves the value of the leaf RemoteName from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteName is set, it can
// safely use t.GetRemoteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetRemoteName() string {
	if t == nil || t.RemoteName == nil {
		return ""
	}
	return *t.RemoteName
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetSessionLimit() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_SessionLimit_Union {
	if t == nil || t.SessionLimit == nil {
		return nil
	}
	return t.SessionLimit
}

// GetTunnelName retrieves the value of the leaf TunnelName from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelName is set, it can
// safely use t.GetTunnelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) GetTunnelName() string {
	if t == nil || t.TunnelName == nil {
		return ""
	}
	return *t.TunnelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoEstablish == nil {
		var v bool = false
		t.AutoEstablish = &v
	}
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
	t.Failover.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.Lns.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}

	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/failover YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover struct {
	RecoveryMethod E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime   *int32                                       `path:"recovery-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) IsYANGGoStruct() {}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return 0
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/l2tpv3 YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 struct {
	PrivateTcpMssAdjust NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PrivateTcpMssAdjust_Union `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PublicTcpMssAdjust_Union  `path:"public-tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) IsYANGGoStruct() {}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) GetPrivateTcpMssAdjust() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PrivateTcpMssAdjust_Union {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return nil
	}
	return t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) GetPublicTcpMssAdjust() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lac YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac struct {
	DfBit E_NokiaTypesSros_BoolWithInherit `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac) IsYANGGoStruct() {}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac) GetDfBit() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.DfBit == 0 {
		return 0
	}
	return t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lns YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns struct {
	LnsGroup          *uint32                                                       `path:"lns-group" module:"nokia-conf"`
	LoadBalanceMethod E_NokiaTypesL2Tp_ChildLoadBalanceMethod                       `path:"load-balance-method" module:"nokia-conf"`
	Mlppp             *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp `path:"mlppp" module:"nokia-conf"`
	Ppp               *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp   `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) IsYANGGoStruct() {}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetOrCreateMlppp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp{}
	return t.Mlppp
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetOrCreatePpp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp{}
	return t.Ppp
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetMlppp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetPpp() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetLnsGroup retrieves the value of the leaf LnsGroup from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LnsGroup is set, it can
// safely use t.GetLnsGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LnsGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetLnsGroup() uint32 {
	if t == nil || t.LnsGroup == nil {
		return 0
	}
	return *t.LnsGroup
}

// GetLoadBalanceMethod retrieves the value of the leaf LoadBalanceMethod from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalanceMethod is set, it can
// safely use t.GetLoadBalanceMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalanceMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) GetLoadBalanceMethod() E_NokiaTypesL2Tp_ChildLoadBalanceMethod {
	if t == nil || t.LoadBalanceMethod == 0 {
		return 0
	}
	return t.LoadBalanceMethod
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mlppp.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lns/mlppp YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp struct {
	AdminState           E_NokiaTypesSros_AdminStateWithInherit                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Endpoint             *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint `path:"endpoint" module:"nokia-conf"`
	Interleave           E_NokiaTypesSros_BoolWithInherit                                       `path:"interleave" module:"nokia-conf"`
	MaxFragmentDelay     *uint32                                                                `path:"max-fragment-delay" module:"nokia-conf"`
	MaxLinks             *uint32                                                                `path:"max-links" module:"nokia-conf"`
	ReassemblyTimeout    *uint32                                                                `path:"reassembly-timeout" module:"nokia-conf"`
	ShortSequenceNumbers E_NokiaTypesSros_BoolWithInherit                                       `path:"short-sequence-numbers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetOrCreateEndpoint() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint{}
	return t.Endpoint
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetEndpoint() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetAdminState() E_NokiaTypesSros_AdminStateWithInherit {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterleave retrieves the value of the leaf Interleave from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interleave is set, it can
// safely use t.GetInterleave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interleave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetInterleave() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Interleave == 0 {
		return 0
	}
	return t.Interleave
}

// GetMaxFragmentDelay retrieves the value of the leaf MaxFragmentDelay from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFragmentDelay is set, it can
// safely use t.GetMaxFragmentDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFragmentDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetMaxFragmentDelay() uint32 {
	if t == nil || t.MaxFragmentDelay == nil {
		return 0
	}
	return *t.MaxFragmentDelay
}

// GetMaxLinks retrieves the value of the leaf MaxLinks from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLinks is set, it can
// safely use t.GetMaxLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetMaxLinks() uint32 {
	if t == nil || t.MaxLinks == nil {
		return 0
	}
	return *t.MaxLinks
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 0
	}
	return *t.ReassemblyTimeout
}

// GetShortSequenceNumbers retrieves the value of the leaf ShortSequenceNumbers from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequenceNumbers is set, it can
// safely use t.GetShortSequenceNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequenceNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) GetShortSequenceNumbers() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ShortSequenceNumbers == 0 {
		return 0
	}
	return t.ShortSequenceNumbers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Endpoint.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lns/mlppp/endpoint YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint struct {
	Ip  NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Ip_Union  `path:"ip" module:"nokia-conf"`
	Mac NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Mac_Union `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) GetIp() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Ip_Union {
	if t == nil || t.Ip == nil {
		return nil
	}
	return t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) GetMac() NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Mac_Union {
	if t == nil || t.Mac == nil {
		return nil
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lns/ppp YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp struct {
	Authentication        E_NokiaTypesL2Tp_ChildPppAuthProtocol                                             `path:"authentication" module:"nokia-conf"`
	AuthenticationPolicy  *string                                                                           `path:"authentication-policy" module:"nokia-conf"`
	ChapChallengeLength   *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength   `path:"chap-challenge-length" module:"nokia-conf"`
	DefaultGroupInterface *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface `path:"default-group-interface" module:"nokia-conf"`
	IpcpSubnetNegotiation E_NokiaTypesSros_BoolWithInherit                                                  `path:"ipcp-subnet-negotiation" module:"nokia-conf"`
	Keepalive             *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive             `path:"keepalive" module:"nokia-conf"`
	LcpForceAckAccm       E_NokiaTypesSros_BoolWithInherit                                                  `path:"lcp-force-ack-accm" module:"nokia-conf"`
	LcpIgnoreMagicNumbers E_NokiaTypesSros_BoolWithInherit                                                  `path:"lcp-ignore-magic-numbers" module:"nokia-conf"`
	Mtu                   *uint32                                                                           `path:"mtu" module:"nokia-conf"`
	ProxyAuthentication   E_NokiaTypesSros_BoolWithInherit                                                  `path:"proxy-authentication" module:"nokia-conf"`
	ProxyLcp              E_NokiaTypesSros_BoolWithInherit                                                  `path:"proxy-lcp" module:"nokia-conf"`
	RejectDisabledNcp     E_NokiaTypesSros_BoolWithInherit                                                  `path:"reject-disabled-ncp" module:"nokia-conf"`
	UserDb                *string                                                                           `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) IsYANGGoStruct() {}

// GetOrCreateChapChallengeLength retrieves the value of the ChapChallengeLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateChapChallengeLength() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength {
	if t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	t.ChapChallengeLength = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength{}
	return t.ChapChallengeLength
}

// GetOrCreateDefaultGroupInterface retrieves the value of the DefaultGroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateDefaultGroupInterface() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface {
	if t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	t.DefaultGroupInterface = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface{}
	return t.DefaultGroupInterface
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive{}
	return t.Keepalive
}

// GetChapChallengeLength returns the value of the ChapChallengeLength struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field ChapChallengeLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetChapChallengeLength() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength {
	if t != nil && t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	return nil
}

// GetDefaultGroupInterface returns the value of the DefaultGroupInterface struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field DefaultGroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetDefaultGroupInterface() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface {
	if t != nil && t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetKeepalive() *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetAuthentication retrieves the value of the leaf Authentication from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authentication is set, it can
// safely use t.GetAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetAuthentication() E_NokiaTypesL2Tp_ChildPppAuthProtocol {
	if t == nil || t.Authentication == 0 {
		return 0
	}
	return t.Authentication
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetIpcpSubnetNegotiation retrieves the value of the leaf IpcpSubnetNegotiation from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpcpSubnetNegotiation is set, it can
// safely use t.GetIpcpSubnetNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpcpSubnetNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetIpcpSubnetNegotiation() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.IpcpSubnetNegotiation == 0 {
		return 0
	}
	return t.IpcpSubnetNegotiation
}

// GetLcpForceAckAccm retrieves the value of the leaf LcpForceAckAccm from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpForceAckAccm is set, it can
// safely use t.GetLcpForceAckAccm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpForceAckAccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetLcpForceAckAccm() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LcpForceAckAccm == 0 {
		return 0
	}
	return t.LcpForceAckAccm
}

// GetLcpIgnoreMagicNumbers retrieves the value of the leaf LcpIgnoreMagicNumbers from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreMagicNumbers is set, it can
// safely use t.GetLcpIgnoreMagicNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreMagicNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetLcpIgnoreMagicNumbers() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LcpIgnoreMagicNumbers == 0 {
		return 0
	}
	return t.LcpIgnoreMagicNumbers
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetProxyAuthentication retrieves the value of the leaf ProxyAuthentication from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyAuthentication is set, it can
// safely use t.GetProxyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetProxyAuthentication() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ProxyAuthentication == 0 {
		return 0
	}
	return t.ProxyAuthentication
}

// GetProxyLcp retrieves the value of the leaf ProxyLcp from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyLcp is set, it can
// safely use t.GetProxyLcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyLcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetProxyLcp() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ProxyLcp == 0 {
		return 0
	}
	return t.ProxyLcp
}

// GetRejectDisabledNcp retrieves the value of the leaf RejectDisabledNcp from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RejectDisabledNcp is set, it can
// safely use t.GetRejectDisabledNcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RejectDisabledNcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetRejectDisabledNcp() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.RejectDisabledNcp == 0 {
		return 0
	}
	return t.RejectDisabledNcp
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ChapChallengeLength.PopulateDefaults()
	t.DefaultGroupInterface.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lns/ppp/chap-challenge-length YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lns/ppp/default-group-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive represents the /nokia-conf/configure/service/vprn/l2tp/group/tunnel/lns/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive struct {
	Interval   *uint32 `path:"interval" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 0
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps represents the /nokia-conf/configure/service/vprn/l2tp/ignore-avps YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps struct {
	SequencingRequired *bool `path:"sequencing-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps) IsYANGGoStruct() {}

// GetSequencingRequired retrieves the value of the leaf SequencingRequired from the NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequencingRequired is set, it can
// safely use t.GetSequencingRequired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequencingRequired == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps) GetSequencingRequired() bool {
	if t == nil || t.SequencingRequired == nil {
		return false
	}
	return *t.SequencingRequired
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SequencingRequired == nil {
		var v bool = false
		t.SequencingRequired = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_IgnoreAvps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3 represents the /nokia-conf/configure/service/vprn/l2tp/l2tpv3 YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3 struct {
	CookieLength        *int32                                                      `path:"cookie-length" module:"nokia-conf"`
	DigestType          E_NokiaTypesL2Tp_BaseV3DigestType                           `path:"digest-type" module:"nokia-conf"`
	NonceLength         *int32                                                      `path:"nonce-length" module:"nokia-conf"`
	Password            *string                                                     `path:"password" module:"nokia-conf"`
	PrivateTcpMssAdjust *int32                                                      `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  *int32                                                      `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	TransportType       *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType `path:"transport-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreateTransportType retrieves the value of the TransportType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetOrCreateTransportType() *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType {
	if t.TransportType != nil {
		return t.TransportType
	}
	t.TransportType = &NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType{}
	return t.TransportType
}

// GetTransportType returns the value of the TransportType struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3. If the receiver or the field TransportType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetTransportType() *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType {
	if t != nil && t.TransportType != nil {
		return t.TransportType
	}
	return nil
}

// GetCookieLength retrieves the value of the leaf CookieLength from the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CookieLength is set, it can
// safely use t.GetCookieLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CookieLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetCookieLength() int32 {
	if t == nil || t.CookieLength == nil {
		return 0
	}
	return *t.CookieLength
}

// GetDigestType retrieves the value of the leaf DigestType from the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigestType is set, it can
// safely use t.GetDigestType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigestType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetDigestType() E_NokiaTypesL2Tp_BaseV3DigestType {
	if t == nil || t.DigestType == 0 {
		return 0
	}
	return t.DigestType
}

// GetNonceLength retrieves the value of the leaf NonceLength from the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonceLength is set, it can
// safely use t.GetNonceLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonceLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetNonceLength() int32 {
	if t == nil || t.NonceLength == nil {
		return 0
	}
	return *t.NonceLength
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) GetPublicTcpMssAdjust() int32 {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return 0
	}
	return *t.PublicTcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NonceLength == nil {
		var v int32 = 0
		t.NonceLength = &v
	}
	t.TransportType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType represents the /nokia-conf/configure/service/vprn/l2tp/l2tpv3/transport-type YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType struct {
	Ip *bool `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType) GetIp() bool {
	if t == nil || t.Ip == nil {
		return false
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ip == nil {
		var v bool = false
		t.Ip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_L2Tpv3_TransportType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Lac represents the /nokia-conf/configure/service/vprn/l2tp/lac YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Lac struct {
	CallingNumberFormat *string                                                 `path:"calling-number-format" module:"nokia-conf"`
	CiscoNasPort        *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort `path:"cisco-nas-port" module:"nokia-conf"`
	DfBit               *bool                                                   `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Lac) IsYANGGoStruct() {}

// GetOrCreateCiscoNasPort retrieves the value of the CiscoNasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) GetOrCreateCiscoNasPort() *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort {
	if t.CiscoNasPort != nil {
		return t.CiscoNasPort
	}
	t.CiscoNasPort = &NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort{}
	return t.CiscoNasPort
}

// GetCiscoNasPort returns the value of the CiscoNasPort struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_Lac. If the receiver or the field CiscoNasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) GetCiscoNasPort() *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort {
	if t != nil && t.CiscoNasPort != nil {
		return t.CiscoNasPort
	}
	return nil
}

// GetCallingNumberFormat retrieves the value of the leaf CallingNumberFormat from the NokiaConf_Configure_Service_Vprn_L2Tp_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingNumberFormat is set, it can
// safely use t.GetCallingNumberFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingNumberFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) GetCallingNumberFormat() string {
	if t == nil || t.CallingNumberFormat == nil {
		return "%S %s"
	}
	return *t.CallingNumberFormat
}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Service_Vprn_L2Tp_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) GetDfBit() bool {
	if t == nil || t.DfBit == nil {
		return true
	}
	return *t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingNumberFormat == nil {
		var v string = "%S %s"
		t.CallingNumberFormat = &v
	}
	if t.DfBit == nil {
		var v bool = true
		t.DfBit = &v
	}
	t.CiscoNasPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Lac.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Lac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort represents the /nokia-conf/configure/service/vprn/l2tp/lac/cisco-nas-port YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort struct {
	Ethernet *string `path:"ethernet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort) GetEthernet() string {
	if t == nil || t.Ethernet == nil {
		return ""
	}
	return *t.Ethernet
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_Lac_CiscoNasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode represents the /nokia-conf/configure/service/vprn/l2tp/replace-result-code YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode struct {
	CdnInvalidDst            *bool `path:"cdn-invalid-dst" module:"nokia-conf"`
	CdnPermanentNoFacilities *bool `path:"cdn-permanent-no-facilities" module:"nokia-conf"`
	CdnTemporaryNoFacilities *bool `path:"cdn-temporary-no-facilities" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) IsYANGGoStruct() {}

// GetCdnInvalidDst retrieves the value of the leaf CdnInvalidDst from the NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnInvalidDst is set, it can
// safely use t.GetCdnInvalidDst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnInvalidDst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) GetCdnInvalidDst() bool {
	if t == nil || t.CdnInvalidDst == nil {
		return false
	}
	return *t.CdnInvalidDst
}

// GetCdnPermanentNoFacilities retrieves the value of the leaf CdnPermanentNoFacilities from the NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnPermanentNoFacilities is set, it can
// safely use t.GetCdnPermanentNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnPermanentNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) GetCdnPermanentNoFacilities() bool {
	if t == nil || t.CdnPermanentNoFacilities == nil {
		return false
	}
	return *t.CdnPermanentNoFacilities
}

// GetCdnTemporaryNoFacilities retrieves the value of the leaf CdnTemporaryNoFacilities from the NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnTemporaryNoFacilities is set, it can
// safely use t.GetCdnTemporaryNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnTemporaryNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) GetCdnTemporaryNoFacilities() bool {
	if t == nil || t.CdnTemporaryNoFacilities == nil {
		return false
	}
	return *t.CdnTemporaryNoFacilities
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CdnInvalidDst == nil {
		var v bool = false
		t.CdnInvalidDst = &v
	}
	if t.CdnPermanentNoFacilities == nil {
		var v bool = false
		t.CdnPermanentNoFacilities = &v
	}
	if t.CdnTemporaryNoFacilities == nil {
		var v bool = false
		t.CdnTemporaryNoFacilities = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_ReplaceResultCode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist represents the /nokia-conf/configure/service/vprn/l2tp/tunnel-selection-blacklist YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist struct {
	AddTunnelOn   *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn        `path:"add-tunnel-on" module:"nokia-conf"`
	MaxListLength NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Union `path:"max-list-length" module:"nokia-conf"`
	MaxTime       *int32                                                                             `path:"max-time" module:"nokia-conf"`
	TimeoutAction E_NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction     `path:"timeout-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) IsYANGGoStruct() {}

// GetOrCreateAddTunnelOn retrieves the value of the AddTunnelOn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetOrCreateAddTunnelOn() *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn {
	if t.AddTunnelOn != nil {
		return t.AddTunnelOn
	}
	t.AddTunnelOn = &NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn{}
	return t.AddTunnelOn
}

// GetAddTunnelOn returns the value of the AddTunnelOn struct pointer
// from NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist. If the receiver or the field AddTunnelOn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetAddTunnelOn() *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn {
	if t != nil && t.AddTunnelOn != nil {
		return t.AddTunnelOn
	}
	return nil
}

// GetMaxListLength retrieves the value of the leaf MaxListLength from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxListLength is set, it can
// safely use t.GetMaxListLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxListLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetMaxListLength() NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Union {
	if t == nil || t.MaxListLength == nil {
		return NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Enum_infinite
	}
	return t.MaxListLength
}

// GetMaxTime retrieves the value of the leaf MaxTime from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetMaxTime() int32 {
	if t == nil || t.MaxTime == nil {
		return 5
	}
	return *t.MaxTime
}

// GetTimeoutAction retrieves the value of the leaf TimeoutAction from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAction is set, it can
// safely use t.GetTimeoutAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) GetTimeoutAction() E_NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction {
	if t == nil || t.TimeoutAction == 0 {
		return NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction_remove_from_blacklist
	}
	return t.TimeoutAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxListLength == nil {
		t.MaxListLength = NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_MaxListLength_Enum_infinite
	}
	if t.MaxTime == nil {
		var v int32 = 5
		t.MaxTime = &v
	}
	if t.TimeoutAction == 0 {
		t.TimeoutAction = NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_TimeoutAction_remove_from_blacklist
	}
	t.AddTunnelOn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn represents the /nokia-conf/configure/service/vprn/l2tp/tunnel-selection-blacklist/add-tunnel-on YANG schema element.
type NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn struct {
	AddressChangeTimeout      *bool `path:"address-change-timeout" module:"nokia-conf"`
	CdnErrCode                *bool `path:"cdn-err-code" module:"nokia-conf"`
	CdnInvalidDst             *bool `path:"cdn-invalid-dst" module:"nokia-conf"`
	CdnPermanentNoFacilities  *bool `path:"cdn-permanent-no-facilities" module:"nokia-conf"`
	CdnTemporaryNoFacilities  *bool `path:"cdn-temporary-no-facilities" module:"nokia-conf"`
	StopCcnErrCode            *bool `path:"stop-ccn-err-code" module:"nokia-conf"`
	StopCcnOther              *bool `path:"stop-ccn-other" module:"nokia-conf"`
	TxCdnNotEstablishedInTime *bool `path:"tx-cdn-not-established-in-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) IsYANGGoStruct() {}

// GetAddressChangeTimeout retrieves the value of the leaf AddressChangeTimeout from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressChangeTimeout is set, it can
// safely use t.GetAddressChangeTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressChangeTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetAddressChangeTimeout() bool {
	if t == nil || t.AddressChangeTimeout == nil {
		return false
	}
	return *t.AddressChangeTimeout
}

// GetCdnErrCode retrieves the value of the leaf CdnErrCode from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnErrCode is set, it can
// safely use t.GetCdnErrCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnErrCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnErrCode() bool {
	if t == nil || t.CdnErrCode == nil {
		return false
	}
	return *t.CdnErrCode
}

// GetCdnInvalidDst retrieves the value of the leaf CdnInvalidDst from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnInvalidDst is set, it can
// safely use t.GetCdnInvalidDst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnInvalidDst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnInvalidDst() bool {
	if t == nil || t.CdnInvalidDst == nil {
		return false
	}
	return *t.CdnInvalidDst
}

// GetCdnPermanentNoFacilities retrieves the value of the leaf CdnPermanentNoFacilities from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnPermanentNoFacilities is set, it can
// safely use t.GetCdnPermanentNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnPermanentNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnPermanentNoFacilities() bool {
	if t == nil || t.CdnPermanentNoFacilities == nil {
		return false
	}
	return *t.CdnPermanentNoFacilities
}

// GetCdnTemporaryNoFacilities retrieves the value of the leaf CdnTemporaryNoFacilities from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnTemporaryNoFacilities is set, it can
// safely use t.GetCdnTemporaryNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnTemporaryNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnTemporaryNoFacilities() bool {
	if t == nil || t.CdnTemporaryNoFacilities == nil {
		return false
	}
	return *t.CdnTemporaryNoFacilities
}

// GetStopCcnErrCode retrieves the value of the leaf StopCcnErrCode from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StopCcnErrCode is set, it can
// safely use t.GetStopCcnErrCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StopCcnErrCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetStopCcnErrCode() bool {
	if t == nil || t.StopCcnErrCode == nil {
		return false
	}
	return *t.StopCcnErrCode
}

// GetStopCcnOther retrieves the value of the leaf StopCcnOther from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StopCcnOther is set, it can
// safely use t.GetStopCcnOther() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StopCcnOther == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetStopCcnOther() bool {
	if t == nil || t.StopCcnOther == nil {
		return false
	}
	return *t.StopCcnOther
}

// GetTxCdnNotEstablishedInTime retrieves the value of the leaf TxCdnNotEstablishedInTime from the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxCdnNotEstablishedInTime is set, it can
// safely use t.GetTxCdnNotEstablishedInTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxCdnNotEstablishedInTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetTxCdnNotEstablishedInTime() bool {
	if t == nil || t.TxCdnNotEstablishedInTime == nil {
		return false
	}
	return *t.TxCdnNotEstablishedInTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AddressChangeTimeout == nil {
		var v bool = false
		t.AddressChangeTimeout = &v
	}
	if t.CdnErrCode == nil {
		var v bool = false
		t.CdnErrCode = &v
	}
	if t.CdnInvalidDst == nil {
		var v bool = false
		t.CdnInvalidDst = &v
	}
	if t.CdnPermanentNoFacilities == nil {
		var v bool = false
		t.CdnPermanentNoFacilities = &v
	}
	if t.CdnTemporaryNoFacilities == nil {
		var v bool = false
		t.CdnTemporaryNoFacilities = &v
	}
	if t.StopCcnErrCode == nil {
		var v bool = false
		t.StopCcnErrCode = &v
	}
	if t.StopCcnOther == nil {
		var v bool = false
		t.StopCcnOther = &v
	}
	if t.TxCdnNotEstablishedInTime == nil {
		var v bool = false
		t.TxCdnNotEstablishedInTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn.
func (*NokiaConf_Configure_Service_Vprn_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log represents the /nokia-conf/configure/service/vprn/log YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Filter             map[string]*NokiaConf_Configure_Service_Vprn_Log_Filter        `path:"filter" module:"nokia-conf"`
	LogId              map[string]*NokiaConf_Configure_Service_Vprn_Log_LogId         `path:"log-id" module:"nokia-conf"`
	SnmpTrapGroup      map[string]*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup `path:"snmp-trap-group" module:"nokia-conf"`
	Syslog             map[string]*NokiaConf_Configure_Service_Vprn_Log_Syslog        `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log) IsYANGGoStruct() {}

// NewFilter creates a new entry in the Filter list of the
// NokiaConf_Configure_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Log) NewFilter(FilterName string) (*NokiaConf_Configure_Service_Vprn_Log_Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_Filter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Filter", key)
	}

	t.Filter[key] = &NokiaConf_Configure_Service_Vprn_Log_Filter{
		FilterName: &FilterName,
	}

	return t.Filter[key], nil
}

// RenameFilter renames an entry in the list Filter within
// the NokiaConf_Configure_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Log) RenameFilter(oldK, newK string) error {
	if _, ok := t.Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Filter", newK)
	}

	e, ok := t.Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Filter", oldK)
	}
	e.FilterName = &newK

	t.Filter[newK] = e
	delete(t.Filter, oldK)
	return nil
}

// GetOrCreateFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetOrCreateFilter(FilterName string) *NokiaConf_Configure_Service_Vprn_Log_Filter {

	key := FilterName

	if v, ok := t.Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFilter got unexpected error: %v", err))
	}
	return v
}

// GetFilter retrieves the value with the specified key from
// the Filter map field of NokiaConf_Configure_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetFilter(FilterName string) *NokiaConf_Configure_Service_Vprn_Log_Filter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Log) DeleteFilter(FilterName string) {
	key := FilterName

	delete(t.Filter, key)
}

// AppendFilter appends the supplied NokiaConf_Configure_Service_Vprn_Log_Filter struct to the
// list Filter of NokiaConf_Configure_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Log_Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Log) AppendFilter(v *NokiaConf_Configure_Service_Vprn_Log_Filter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_Filter)
	}

	if _, ok := t.Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Filter %v", key)
	}

	t.Filter[key] = v
	return nil
}

// NewLogId creates a new entry in the LogId list of the
// NokiaConf_Configure_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Log) NewLogId(Name string) (*NokiaConf_Configure_Service_Vprn_Log_LogId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LogId == nil {
		t.LogId = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_LogId)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LogId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LogId", key)
	}

	t.LogId[key] = &NokiaConf_Configure_Service_Vprn_Log_LogId{
		Name: &Name,
	}

	return t.LogId[key], nil
}

// RenameLogId renames an entry in the list LogId within
// the NokiaConf_Configure_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Log) RenameLogId(oldK, newK string) error {
	if _, ok := t.LogId[newK]; ok {
		return fmt.Errorf("key %v already exists in LogId", newK)
	}

	e, ok := t.LogId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LogId", oldK)
	}
	e.Name = &newK

	t.LogId[newK] = e
	delete(t.LogId, oldK)
	return nil
}

// GetOrCreateLogId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetOrCreateLogId(Name string) *NokiaConf_Configure_Service_Vprn_Log_LogId {

	key := Name

	if v, ok := t.LogId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLogId(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLogId got unexpected error: %v", err))
	}
	return v
}

// GetLogId retrieves the value with the specified key from
// the LogId map field of NokiaConf_Configure_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetLogId(Name string) *NokiaConf_Configure_Service_Vprn_Log_LogId {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LogId[key]; ok {
		return lm
	}
	return nil
}

// DeleteLogId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Log) DeleteLogId(Name string) {
	key := Name

	delete(t.LogId, key)
}

// AppendLogId appends the supplied NokiaConf_Configure_Service_Vprn_Log_LogId struct to the
// list LogId of NokiaConf_Configure_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Log_LogId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Log) AppendLogId(v *NokiaConf_Configure_Service_Vprn_Log_LogId) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LogId == nil {
		t.LogId = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_LogId)
	}

	if _, ok := t.LogId[key]; ok {
		return fmt.Errorf("duplicate key for list LogId %v", key)
	}

	t.LogId[key] = v
	return nil
}

// NewSnmpTrapGroup creates a new entry in the SnmpTrapGroup list of the
// NokiaConf_Configure_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Log) NewSnmpTrapGroup(LogName string) (*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SnmpTrapGroup == nil {
		t.SnmpTrapGroup = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup)
	}

	key := LogName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SnmpTrapGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SnmpTrapGroup", key)
	}

	t.SnmpTrapGroup[key] = &NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup{
		LogName: &LogName,
	}

	return t.SnmpTrapGroup[key], nil
}

// RenameSnmpTrapGroup renames an entry in the list SnmpTrapGroup within
// the NokiaConf_Configure_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Log) RenameSnmpTrapGroup(oldK, newK string) error {
	if _, ok := t.SnmpTrapGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SnmpTrapGroup", newK)
	}

	e, ok := t.SnmpTrapGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SnmpTrapGroup", oldK)
	}
	e.LogName = &newK

	t.SnmpTrapGroup[newK] = e
	delete(t.SnmpTrapGroup, oldK)
	return nil
}

// GetOrCreateSnmpTrapGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetOrCreateSnmpTrapGroup(LogName string) *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup {

	key := LogName

	if v, ok := t.SnmpTrapGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSnmpTrapGroup(LogName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSnmpTrapGroup got unexpected error: %v", err))
	}
	return v
}

// GetSnmpTrapGroup retrieves the value with the specified key from
// the SnmpTrapGroup map field of NokiaConf_Configure_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetSnmpTrapGroup(LogName string) *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup {

	if t == nil {
		return nil
	}

	key := LogName

	if lm, ok := t.SnmpTrapGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSnmpTrapGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Log) DeleteSnmpTrapGroup(LogName string) {
	key := LogName

	delete(t.SnmpTrapGroup, key)
}

// AppendSnmpTrapGroup appends the supplied NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup struct to the
// list SnmpTrapGroup of NokiaConf_Configure_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Log) AppendSnmpTrapGroup(v *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) error {
	if v.LogName == nil {
		return fmt.Errorf("invalid nil key received for LogName")
	}

	key := *v.LogName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SnmpTrapGroup == nil {
		t.SnmpTrapGroup = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup)
	}

	if _, ok := t.SnmpTrapGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SnmpTrapGroup %v", key)
	}

	t.SnmpTrapGroup[key] = v
	return nil
}

// NewSyslog creates a new entry in the Syslog list of the
// NokiaConf_Configure_Service_Vprn_Log struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Log) NewSyslog(SyslogName string) (*NokiaConf_Configure_Service_Vprn_Log_Syslog, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Syslog == nil {
		t.Syslog = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_Syslog)
	}

	key := SyslogName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Syslog[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Syslog", key)
	}

	t.Syslog[key] = &NokiaConf_Configure_Service_Vprn_Log_Syslog{
		SyslogName: &SyslogName,
	}

	return t.Syslog[key], nil
}

// RenameSyslog renames an entry in the list Syslog within
// the NokiaConf_Configure_Service_Vprn_Log struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Log) RenameSyslog(oldK, newK string) error {
	if _, ok := t.Syslog[newK]; ok {
		return fmt.Errorf("key %v already exists in Syslog", newK)
	}

	e, ok := t.Syslog[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Syslog", oldK)
	}
	e.SyslogName = &newK

	t.Syslog[newK] = e
	delete(t.Syslog, oldK)
	return nil
}

// GetOrCreateSyslog retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetOrCreateSyslog(SyslogName string) *NokiaConf_Configure_Service_Vprn_Log_Syslog {

	key := SyslogName

	if v, ok := t.Syslog[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSyslog(SyslogName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSyslog got unexpected error: %v", err))
	}
	return v
}

// GetSyslog retrieves the value with the specified key from
// the Syslog map field of NokiaConf_Configure_Service_Vprn_Log. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetSyslog(SyslogName string) *NokiaConf_Configure_Service_Vprn_Log_Syslog {

	if t == nil {
		return nil
	}

	key := SyslogName

	if lm, ok := t.Syslog[key]; ok {
		return lm
	}
	return nil
}

// DeleteSyslog deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Log) DeleteSyslog(SyslogName string) {
	key := SyslogName

	delete(t.Syslog, key)
}

// AppendSyslog appends the supplied NokiaConf_Configure_Service_Vprn_Log_Syslog struct to the
// list Syslog of NokiaConf_Configure_Service_Vprn_Log. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Log_Syslog already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Log) AppendSyslog(v *NokiaConf_Configure_Service_Vprn_Log_Syslog) error {
	if v.SyslogName == nil {
		return fmt.Errorf("invalid nil key received for SyslogName")
	}

	key := *v.SyslogName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Syslog == nil {
		t.Syslog = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_Syslog)
	}

	if _, ok := t.Syslog[key]; ok {
		return fmt.Errorf("duplicate key for list Syslog %v", key)
	}

	t.Syslog[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.LogId {
		e.PopulateDefaults()
	}
	for _, e := range t.SnmpTrapGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Syslog {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log.
func (*NokiaConf_Configure_Service_Vprn_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter represents the /nokia-conf/configure/service/vprn/log/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      E_NokiaTypesLog_FilterAction                                       `path:"default-action" module:"nokia-conf"`
	Description        *string                                                            `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry      `path:"entry" module:"nokia-conf"`
	FilterName         *string                                                            `path:"filter-name" module:"nokia-conf"`
	NamedEntry         map[string]*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry `path:"named-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Service_Vprn_Log_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Service_Vprn_Log_Filter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Service_Vprn_Log_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Service_Vprn_Log_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetEntry(EntryId uint32) *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Service_Vprn_Log_Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Service_Vprn_Log_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Log_Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) AppendEntry(v *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// NewNamedEntry creates a new entry in the NamedEntry list of the
// NokiaConf_Configure_Service_Vprn_Log_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) NewNamedEntry(EntryName string) (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry)
	}

	key := EntryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NamedEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NamedEntry", key)
	}

	t.NamedEntry[key] = &NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry{
		EntryName: &EntryName,
	}

	return t.NamedEntry[key], nil
}

// RenameNamedEntry renames an entry in the list NamedEntry within
// the NokiaConf_Configure_Service_Vprn_Log_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) RenameNamedEntry(oldK, newK string) error {
	if _, ok := t.NamedEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in NamedEntry", newK)
	}

	e, ok := t.NamedEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NamedEntry", oldK)
	}
	e.EntryName = &newK

	t.NamedEntry[newK] = e
	delete(t.NamedEntry, oldK)
	return nil
}

// GetOrCreateNamedEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetOrCreateNamedEntry(EntryName string) *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry {

	key := EntryName

	if v, ok := t.NamedEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNamedEntry(EntryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNamedEntry got unexpected error: %v", err))
	}
	return v
}

// GetNamedEntry retrieves the value with the specified key from
// the NamedEntry map field of NokiaConf_Configure_Service_Vprn_Log_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetNamedEntry(EntryName string) *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry {

	if t == nil {
		return nil
	}

	key := EntryName

	if lm, ok := t.NamedEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteNamedEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) DeleteNamedEntry(EntryName string) {
	key := EntryName

	delete(t.NamedEntry, key)
}

// AppendNamedEntry appends the supplied NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry struct to the
// list NamedEntry of NokiaConf_Configure_Service_Vprn_Log_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) AppendNamedEntry(v *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) error {
	if v.EntryName == nil {
		return fmt.Errorf("invalid nil key received for EntryName")
	}

	key := *v.EntryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry)
	}

	if _, ok := t.NamedEntry[key]; ok {
		return fmt.Errorf("duplicate key for list NamedEntry %v", key)
	}

	t.NamedEntry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetDefaultAction() E_NokiaTypesLog_FilterAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesLog_FilterAction_forward
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Service_Vprn_Log_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesLog_FilterAction_forward
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
	for _, e := range t.NamedEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Log_Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_Entry represents the /nokia-conf/configure/service/vprn/log/filter/entry YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_Entry struct {
	Action             E_NokiaTypesLog_FilterAction                             `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                  `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) GetMatch() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) GetAction() E_NokiaTypesLog_FilterAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_Entry.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match represents the /nokia-conf/configure/service/vprn/log/filter/entry/match YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match struct {
	Application *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application `path:"application" module:"nokia-conf"`
	Event       *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event       `path:"event" module:"nokia-conf"`
	Message     *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message     `path:"message" module:"nokia-conf"`
	Severity    *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity    `path:"severity" module:"nokia-conf"`
	Subject     *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject     `path:"subject" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateApplication retrieves the value of the Application field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateApplication() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application {
	if t.Application != nil {
		return t.Application
	}
	t.Application = &NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application{}
	return t.Application
}

// GetOrCreateEvent retrieves the value of the Event field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateEvent() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event {
	if t.Event != nil {
		return t.Event
	}
	t.Event = &NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event{}
	return t.Event
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateMessage() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message{}
	return t.Message
}

// GetOrCreateSeverity retrieves the value of the Severity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateSeverity() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity {
	if t.Severity != nil {
		return t.Severity
	}
	t.Severity = &NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity{}
	return t.Severity
}

// GetOrCreateSubject retrieves the value of the Subject field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetOrCreateSubject() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject {
	if t.Subject != nil {
		return t.Subject
	}
	t.Subject = &NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject{}
	return t.Subject
}

// GetApplication returns the value of the Application struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Application is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetApplication() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application {
	if t != nil && t.Application != nil {
		return t.Application
	}
	return nil
}

// GetEvent returns the value of the Event struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Event is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetEvent() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event {
	if t != nil && t.Event != nil {
		return t.Event
	}
	return nil
}

// GetMessage returns the value of the Message struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetMessage() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity returns the value of the Severity struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Severity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetSeverity() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity {
	if t != nil && t.Severity != nil {
		return t.Severity
	}
	return nil
}

// GetSubject returns the value of the Subject struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match. If the receiver or the field Subject is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) GetSubject() *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject {
	if t != nil && t.Subject != nil {
		return t.Subject
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Application.PopulateDefaults()
	t.Event.PopulateDefaults()
	t.Message.PopulateDefaults()
	t.Severity.PopulateDefaults()
	t.Subject.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application represents the /nokia-conf/configure/service/vprn/log/filter/entry/match/application YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application struct {
	Eq  E_NokiaTypesLog_ApplicationObsolete `path:"eq" module:"nokia-conf"`
	Neq E_NokiaTypesLog_ApplicationObsolete `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) GetEq() E_NokiaTypesLog_ApplicationObsolete {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) GetNeq() E_NokiaTypesLog_ApplicationObsolete {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event represents the /nokia-conf/configure/service/vprn/log/filter/entry/match/event YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event struct {
	Eq  *uint32 `path:"eq" module:"nokia-conf"`
	Gt  *uint32 `path:"gt" module:"nokia-conf"`
	Gte *uint32 `path:"gte" module:"nokia-conf"`
	Lt  *uint32 `path:"lt" module:"nokia-conf"`
	Lte *uint32 `path:"lte" module:"nokia-conf"`
	Neq *uint32 `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) GetGte() uint32 {
	if t == nil || t.Gte == nil {
		return 0
	}
	return *t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) GetLte() uint32 {
	if t == nil || t.Lte == nil {
		return 0
	}
	return *t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) GetNeq() uint32 {
	if t == nil || t.Neq == nil {
		return 0
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message represents the /nokia-conf/configure/service/vprn/log/filter/entry/match/message YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Message) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity represents the /nokia-conf/configure/service/vprn/log/filter/entry/match/severity YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity struct {
	Eq  E_NokiaTypesLog_SeverityLevel `path:"eq" module:"nokia-conf"`
	Gt  E_NokiaTypesLog_SeverityLevel `path:"gt" module:"nokia-conf"`
	Gte E_NokiaTypesLog_SeverityLevel `path:"gte" module:"nokia-conf"`
	Lt  E_NokiaTypesLog_SeverityLevel `path:"lt" module:"nokia-conf"`
	Lte E_NokiaTypesLog_SeverityLevel `path:"lte" module:"nokia-conf"`
	Neq E_NokiaTypesLog_SeverityLevel `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) GetEq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) GetGt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gt == 0 {
		return 0
	}
	return t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) GetGte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gte == 0 {
		return 0
	}
	return t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) GetLt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lt == 0 {
		return 0
	}
	return t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) GetLte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lte == 0 {
		return 0
	}
	return t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) GetNeq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Severity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject represents the /nokia-conf/configure/service/vprn/log/filter/entry/match/subject YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_Entry_Match_Subject) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry represents the /nokia-conf/configure/service/vprn/log/filter/named-entry YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry struct {
	Action             E_NokiaTypesLog_FilterAction                                  `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	EntryName          *string                                                       `path:"entry-name" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) GetOrCreateMatch() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) GetMatch() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) GetAction() E_NokiaTypesLog_FilterAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryName retrieves the value of the leaf EntryName from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryName is set, it can
// safely use t.GetEntryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) GetEntryName() string {
	if t == nil || t.EntryName == nil {
		return ""
	}
	return *t.EntryName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryName == nil {
		return nil, fmt.Errorf("nil value for key EntryName")
	}

	return map[string]interface{}{
		"entry-name": *t.EntryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match represents the /nokia-conf/configure/service/vprn/log/filter/named-entry/match YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match struct {
	Application *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application `path:"application" module:"nokia-conf"`
	Event       *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event       `path:"event" module:"nokia-conf"`
	Message     *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message     `path:"message" module:"nokia-conf"`
	Severity    *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity    `path:"severity" module:"nokia-conf"`
	Subject     *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject     `path:"subject" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) IsYANGGoStruct() {}

// GetOrCreateApplication retrieves the value of the Application field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateApplication() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application {
	if t.Application != nil {
		return t.Application
	}
	t.Application = &NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application{}
	return t.Application
}

// GetOrCreateEvent retrieves the value of the Event field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateEvent() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event {
	if t.Event != nil {
		return t.Event
	}
	t.Event = &NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event{}
	return t.Event
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateMessage() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message{}
	return t.Message
}

// GetOrCreateSeverity retrieves the value of the Severity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateSeverity() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity {
	if t.Severity != nil {
		return t.Severity
	}
	t.Severity = &NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity{}
	return t.Severity
}

// GetOrCreateSubject retrieves the value of the Subject field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetOrCreateSubject() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject {
	if t.Subject != nil {
		return t.Subject
	}
	t.Subject = &NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject{}
	return t.Subject
}

// GetApplication returns the value of the Application struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Application is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetApplication() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application {
	if t != nil && t.Application != nil {
		return t.Application
	}
	return nil
}

// GetEvent returns the value of the Event struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Event is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetEvent() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event {
	if t != nil && t.Event != nil {
		return t.Event
	}
	return nil
}

// GetMessage returns the value of the Message struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetMessage() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity returns the value of the Severity struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Severity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetSeverity() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity {
	if t != nil && t.Severity != nil {
		return t.Severity
	}
	return nil
}

// GetSubject returns the value of the Subject struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match. If the receiver or the field Subject is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) GetSubject() *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject {
	if t != nil && t.Subject != nil {
		return t.Subject
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Application.PopulateDefaults()
	t.Event.PopulateDefaults()
	t.Message.PopulateDefaults()
	t.Severity.PopulateDefaults()
	t.Subject.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application represents the /nokia-conf/configure/service/vprn/log/filter/named-entry/match/application YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application struct {
	Eq  E_NokiaTypesLog_Application `path:"eq" module:"nokia-conf"`
	Neq E_NokiaTypesLog_Application `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) GetEq() E_NokiaTypesLog_Application {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) GetNeq() E_NokiaTypesLog_Application {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event represents the /nokia-conf/configure/service/vprn/log/filter/named-entry/match/event YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event struct {
	Eq  *uint32 `path:"eq" module:"nokia-conf"`
	Gt  *uint32 `path:"gt" module:"nokia-conf"`
	Gte *uint32 `path:"gte" module:"nokia-conf"`
	Lt  *uint32 `path:"lt" module:"nokia-conf"`
	Lte *uint32 `path:"lte" module:"nokia-conf"`
	Neq *uint32 `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetGte() uint32 {
	if t == nil || t.Gte == nil {
		return 0
	}
	return *t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetLte() uint32 {
	if t == nil || t.Lte == nil {
		return 0
	}
	return *t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) GetNeq() uint32 {
	if t == nil || t.Neq == nil {
		return 0
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message represents the /nokia-conf/configure/service/vprn/log/filter/named-entry/match/message YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Message) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity represents the /nokia-conf/configure/service/vprn/log/filter/named-entry/match/severity YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity struct {
	Eq  E_NokiaTypesLog_SeverityLevel `path:"eq" module:"nokia-conf"`
	Gt  E_NokiaTypesLog_SeverityLevel `path:"gt" module:"nokia-conf"`
	Gte E_NokiaTypesLog_SeverityLevel `path:"gte" module:"nokia-conf"`
	Lt  E_NokiaTypesLog_SeverityLevel `path:"lt" module:"nokia-conf"`
	Lte E_NokiaTypesLog_SeverityLevel `path:"lte" module:"nokia-conf"`
	Neq E_NokiaTypesLog_SeverityLevel `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetEq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetGt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gt == 0 {
		return 0
	}
	return t.Gt
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetGte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Gte == 0 {
		return 0
	}
	return t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetLt() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lt == 0 {
		return 0
	}
	return t.Lt
}

// GetLte retrieves the value of the leaf Lte from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lte is set, it can
// safely use t.GetLte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetLte() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Lte == 0 {
		return 0
	}
	return t.Lte
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) GetNeq() E_NokiaTypesLog_SeverityLevel {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Severity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject represents the /nokia-conf/configure/service/vprn/log/filter/named-entry/match/subject YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject struct {
	Eq     *string `path:"eq" module:"nokia-conf"`
	Neq    *string `path:"neq" module:"nokia-conf"`
	Regexp *bool   `path:"regexp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) IsYANGGoStruct() {}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetRegexp retrieves the value of the leaf Regexp from the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Regexp is set, it can
// safely use t.GetRegexp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Regexp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) GetRegexp() bool {
	if t == nil || t.Regexp == nil {
		return false
	}
	return *t.Regexp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Regexp == nil {
		var v bool = false
		t.Regexp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject.
func (*NokiaConf_Configure_Service_Vprn_Log_Filter_NamedEntry_Match_Subject) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_LogId represents the /nokia-conf/configure/service/vprn/log/log-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_LogId struct {
	AdminState         E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                 `path:"description" module:"nokia-conf"`
	Destination        *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination `path:"destination" module:"nokia-conf"`
	Filter             *string                                                 `path:"filter" module:"nokia-conf"`
	Name               *string                                                 `path:"name" module:"nokia-conf"`
	NetconfStream      *string                                                 `path:"netconf-stream" module:"nokia-conf"`
	PythonPolicy       *string                                                 `path:"python-policy" module:"nokia-conf"`
	Source             *NokiaConf_Configure_Service_Vprn_Log_LogId_Source      `path:"source" module:"nokia-conf"`
	TimeFormat         E_NokiaConf_Configure_Service_Vprn_Log_LogId_TimeFormat `path:"time-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_LogId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId) IsYANGGoStruct() {}

// GetOrCreateDestination retrieves the value of the Destination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetOrCreateDestination() *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination {
	if t.Destination != nil {
		return t.Destination
	}
	t.Destination = &NokiaConf_Configure_Service_Vprn_Log_LogId_Destination{}
	return t.Destination
}

// GetOrCreateSource retrieves the value of the Source field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetOrCreateSource() *NokiaConf_Configure_Service_Vprn_Log_LogId_Source {
	if t.Source != nil {
		return t.Source
	}
	t.Source = &NokiaConf_Configure_Service_Vprn_Log_LogId_Source{}
	return t.Source
}

// GetDestination returns the value of the Destination struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_LogId. If the receiver or the field Destination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetDestination() *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination {
	if t != nil && t.Destination != nil {
		return t.Destination
	}
	return nil
}

// GetSource returns the value of the Source struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_LogId. If the receiver or the field Source is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetSource() *NokiaConf_Configure_Service_Vprn_Log_LogId_Source {
	if t != nil && t.Source != nil {
		return t.Source
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilter retrieves the value of the leaf Filter from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filter is set, it can
// safely use t.GetFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetFilter() string {
	if t == nil || t.Filter == nil {
		return ""
	}
	return *t.Filter
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNetconfStream retrieves the value of the leaf NetconfStream from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetconfStream is set, it can
// safely use t.GetNetconfStream() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetconfStream == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetNetconfStream() string {
	if t == nil || t.NetconfStream == nil {
		return ""
	}
	return *t.NetconfStream
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetTimeFormat retrieves the value of the leaf TimeFormat from the NokiaConf_Configure_Service_Vprn_Log_LogId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeFormat is set, it can
// safely use t.GetTimeFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) GetTimeFormat() E_NokiaConf_Configure_Service_Vprn_Log_LogId_TimeFormat {
	if t == nil || t.TimeFormat == 0 {
		return NokiaConf_Configure_Service_Vprn_Log_LogId_TimeFormat_utc
	}
	return t.TimeFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_LogId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.TimeFormat == 0 {
		t.TimeFormat = NokiaConf_Configure_Service_Vprn_Log_LogId_TimeFormat_utc
	}
	t.Destination.PopulateDefaults()
	t.Source.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Log_LogId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_LogId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_LogId.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_LogId_Destination represents the /nokia-conf/configure/service/vprn/log/log-id/destination YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_LogId_Destination struct {
	Netconf *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf `path:"netconf" module:"nokia-conf" yangPresence:"true"`
	Snmp    *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp    `path:"snmp" module:"nokia-conf" yangPresence:"true"`
	Syslog  *string                                                         `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_LogId_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) IsYANGGoStruct() {}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) GetOrCreateNetconf() *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf{}
	return t.Netconf
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) GetOrCreateSnmp() *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp{}
	return t.Snmp
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_LogId_Destination. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) GetNetconf() *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_Service_Vprn_Log_LogId_Destination. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) GetSnmp() *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetSyslog retrieves the value of the leaf Syslog from the NokiaConf_Configure_Service_Vprn_Log_LogId_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syslog is set, it can
// safely use t.GetSyslog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syslog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) GetSyslog() string {
	if t == nil || t.Syslog == nil {
		return ""
	}
	return *t.Syslog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_LogId_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Netconf.PopulateDefaults()
	t.Snmp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_LogId_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_LogId_Destination.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf represents the /nokia-conf/configure/service/vprn/log/log-id/destination/netconf YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf struct {
	MaxEntries *uint32 `path:"max-entries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf) IsYANGGoStruct() {}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 100
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxEntries == nil {
		var v uint32 = 100
		t.MaxEntries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp represents the /nokia-conf/configure/service/vprn/log/log-id/destination/snmp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp struct {
	MaxEntries *uint32 `path:"max-entries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp) IsYANGGoStruct() {}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 100
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxEntries == nil {
		var v uint32 = 100
		t.MaxEntries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Destination_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_LogId_Source represents the /nokia-conf/configure/service/vprn/log/log-id/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_LogId_Source struct {
	Change   *bool `path:"change" module:"nokia-conf"`
	Debug    *bool `path:"debug" module:"nokia-conf"`
	Main     *bool `path:"main" module:"nokia-conf"`
	Security *bool `path:"security" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_LogId_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Source) IsYANGGoStruct() {}

// GetChange retrieves the value of the leaf Change from the NokiaConf_Configure_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Change is set, it can
// safely use t.GetChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Change == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) GetChange() bool {
	if t == nil || t.Change == nil {
		return false
	}
	return *t.Change
}

// GetDebug retrieves the value of the leaf Debug from the NokiaConf_Configure_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debug is set, it can
// safely use t.GetDebug() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debug == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) GetDebug() bool {
	if t == nil || t.Debug == nil {
		return false
	}
	return *t.Debug
}

// GetMain retrieves the value of the leaf Main from the NokiaConf_Configure_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Main is set, it can
// safely use t.GetMain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Main == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) GetMain() bool {
	if t == nil || t.Main == nil {
		return false
	}
	return *t.Main
}

// GetSecurity retrieves the value of the leaf Security from the NokiaConf_Configure_Service_Vprn_Log_LogId_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Security is set, it can
// safely use t.GetSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Security == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) GetSecurity() bool {
	if t == nil || t.Security == nil {
		return false
	}
	return *t.Security
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_LogId_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Change == nil {
		var v bool = false
		t.Change = &v
	}
	if t.Debug == nil {
		var v bool = false
		t.Debug = &v
	}
	if t.Main == nil {
		var v bool = false
		t.Main = &v
	}
	if t.Security == nil {
		var v bool = false
		t.Security = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_LogId_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_LogId_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_LogId_Source.
func (*NokiaConf_Configure_Service_Vprn_Log_LogId_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup represents the /nokia-conf/configure/service/vprn/log/snmp-trap-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                   `path:"description" module:"nokia-conf"`
	LogId              *int32                                                                    `path:"log-id" module:"nokia-conf"`
	LogName            *string                                                                   `path:"log-name" module:"nokia-conf"`
	TrapTarget         map[string]*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget `path:"trap-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) IsYANGGoStruct() {}

// NewTrapTarget creates a new entry in the TrapTarget list of the
// NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) NewTrapTarget(Name string) (*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrapTarget == nil {
		t.TrapTarget = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrapTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrapTarget", key)
	}

	t.TrapTarget[key] = &NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget{
		Name: &Name,
	}

	return t.TrapTarget[key], nil
}

// RenameTrapTarget renames an entry in the list TrapTarget within
// the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) RenameTrapTarget(oldK, newK string) error {
	if _, ok := t.TrapTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in TrapTarget", newK)
	}

	e, ok := t.TrapTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrapTarget", oldK)
	}
	e.Name = &newK

	t.TrapTarget[newK] = e
	delete(t.TrapTarget, oldK)
	return nil
}

// GetOrCreateTrapTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) GetOrCreateTrapTarget(Name string) *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget {

	key := Name

	if v, ok := t.TrapTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrapTarget(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrapTarget got unexpected error: %v", err))
	}
	return v
}

// GetTrapTarget retrieves the value with the specified key from
// the TrapTarget map field of NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) GetTrapTarget(Name string) *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TrapTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrapTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) DeleteTrapTarget(Name string) {
	key := Name

	delete(t.TrapTarget, key)
}

// AppendTrapTarget appends the supplied NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget struct to the
// list TrapTarget of NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) AppendTrapTarget(v *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrapTarget == nil {
		t.TrapTarget = make(map[string]*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget)
	}

	if _, ok := t.TrapTarget[key]; ok {
		return fmt.Errorf("duplicate key for list TrapTarget %v", key)
	}

	t.TrapTarget[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLogId retrieves the value of the leaf LogId from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogId is set, it can
// safely use t.GetLogId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) GetLogId() int32 {
	if t == nil || t.LogId == nil {
		return 0
	}
	return *t.LogId
}

// GetLogName retrieves the value of the leaf LogName from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogName is set, it can
// safely use t.GetLogName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) GetLogName() string {
	if t == nil || t.LogName == nil {
		return ""
	}
	return *t.LogName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TrapTarget {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LogName == nil {
		return nil, fmt.Errorf("nil value for key LogName")
	}

	return map[string]interface{}{
		"log-name": *t.LogName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup.
func (*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget represents the /nokia-conf/configure/service/vprn/log/snmp-trap-group/trap-target YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget struct {
	Address            *string                                                                       `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                       `path:"description" module:"nokia-conf"`
	Name               *string                                                                       `path:"name" module:"nokia-conf"`
	NotifyCommunity    *string                                                                       `path:"notify-community" module:"nokia-conf"`
	Port               *int32                                                                        `path:"port" module:"nokia-conf"`
	Replay             *bool                                                                         `path:"replay" module:"nokia-conf"`
	SecurityLevel      E_NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel `path:"security-level" module:"nokia-conf"`
	Version            E_NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version       `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNotifyCommunity retrieves the value of the leaf NotifyCommunity from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotifyCommunity is set, it can
// safely use t.GetNotifyCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotifyCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetNotifyCommunity() string {
	if t == nil || t.NotifyCommunity == nil {
		return ""
	}
	return *t.NotifyCommunity
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 162
	}
	return *t.Port
}

// GetReplay retrieves the value of the leaf Replay from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replay is set, it can
// safely use t.GetReplay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetReplay() bool {
	if t == nil || t.Replay == nil {
		return false
	}
	return *t.Replay
}

// GetSecurityLevel retrieves the value of the leaf SecurityLevel from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityLevel is set, it can
// safely use t.GetSecurityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetSecurityLevel() E_NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel {
	if t == nil || t.SecurityLevel == 0 {
		return NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel_no_auth_no_privacy
	}
	return t.SecurityLevel
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) GetVersion() E_NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version_snmpv3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 162
		t.Port = &v
	}
	if t.Replay == nil {
		var v bool = false
		t.Replay = &v
	}
	if t.SecurityLevel == 0 {
		t.SecurityLevel = NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_SecurityLevel_no_auth_no_privacy
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget_Version_snmpv3
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget.
func (*NokiaConf_Configure_Service_Vprn_Log_SnmpTrapGroup_TrapTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Log_Syslog represents the /nokia-conf/configure/service/vprn/log/syslog YANG schema element.
type NokiaConf_Configure_Service_Vprn_Log_Syslog struct {
	Address            *string                                                     `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                     `path:"description" module:"nokia-conf"`
	Facility           E_NokiaConf_Configure_Service_Vprn_Log_Syslog_Facility      `path:"facility" module:"nokia-conf"`
	LogPrefix          NokiaConf_Configure_Service_Vprn_Log_Syslog_LogPrefix_Union `path:"log-prefix" module:"nokia-conf"`
	Port               *int32                                                      `path:"port" module:"nokia-conf"`
	Severity           E_NokiaConf_Configure_Service_Vprn_Log_Syslog_Severity      `path:"severity" module:"nokia-conf"`
	SyslogName         *string                                                     `path:"syslog-name" module:"nokia-conf"`
	TlsClientProfile   *string                                                     `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Log_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Log_Syslog) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacility retrieves the value of the leaf Facility from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetFacility() E_NokiaConf_Configure_Service_Vprn_Log_Syslog_Facility {
	if t == nil || t.Facility == 0 {
		return NokiaConf_Configure_Service_Vprn_Log_Syslog_Facility_local7
	}
	return t.Facility
}

// GetLogPrefix retrieves the value of the leaf LogPrefix from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPrefix is set, it can
// safely use t.GetLogPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetLogPrefix() NokiaConf_Configure_Service_Vprn_Log_Syslog_LogPrefix_Union {
	if t == nil || t.LogPrefix == nil {
		return UnionString("TMNX")
	}
	return t.LogPrefix
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 514
	}
	return *t.Port
}

// GetSeverity retrieves the value of the leaf Severity from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetSeverity() E_NokiaConf_Configure_Service_Vprn_Log_Syslog_Severity {
	if t == nil || t.Severity == 0 {
		return NokiaConf_Configure_Service_Vprn_Log_Syslog_Severity_info
	}
	return t.Severity
}

// GetSyslogName retrieves the value of the leaf SyslogName from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyslogName is set, it can
// safely use t.GetSyslogName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyslogName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetSyslogName() string {
	if t == nil || t.SyslogName == nil {
		return ""
	}
	return *t.SyslogName
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Service_Vprn_Log_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Log_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Facility == 0 {
		t.Facility = NokiaConf_Configure_Service_Vprn_Log_Syslog_Facility_local7
	}
	if t.LogPrefix == nil {
		t.LogPrefix = UnionString("TMNX")
	}
	if t.Port == nil {
		var v int32 = 514
		t.Port = &v
	}
	if t.Severity == 0 {
		t.Severity = NokiaConf_Configure_Service_Vprn_Log_Syslog_Severity_info
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Log_Syslog struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SyslogName == nil {
		return nil, fmt.Errorf("nil value for key SyslogName")
	}

	return map[string]interface{}{
		"syslog-name": *t.SyslogName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Log_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Log_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Log_Syslog.
func (*NokiaConf_Configure_Service_Vprn_Log_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Management represents the /nokia-conf/configure/service/vprn/management YANG schema element.
type NokiaConf_Configure_Service_Vprn_Management struct {
	AllowFtp           *bool    `path:"allow-ftp" module:"nokia-conf"`
	AllowGrpc          *bool    `path:"allow-grpc" module:"nokia-conf"`
	AllowNetconf       *bool    `path:"allow-netconf" module:"nokia-conf"`
	AllowSsh           *bool    `path:"allow-ssh" module:"nokia-conf"`
	AllowTelnet        *bool    `path:"allow-telnet" module:"nokia-conf"`
	AllowTelnet6       *bool    `path:"allow-telnet6" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Management implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Management) IsYANGGoStruct() {}

// GetAllowFtp retrieves the value of the leaf AllowFtp from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFtp is set, it can
// safely use t.GetAllowFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetAllowFtp() bool {
	if t == nil || t.AllowFtp == nil {
		return false
	}
	return *t.AllowFtp
}

// GetAllowGrpc retrieves the value of the leaf AllowGrpc from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowGrpc is set, it can
// safely use t.GetAllowGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowGrpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetAllowGrpc() bool {
	if t == nil || t.AllowGrpc == nil {
		return false
	}
	return *t.AllowGrpc
}

// GetAllowNetconf retrieves the value of the leaf AllowNetconf from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowNetconf is set, it can
// safely use t.GetAllowNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowNetconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetAllowNetconf() bool {
	if t == nil || t.AllowNetconf == nil {
		return false
	}
	return *t.AllowNetconf
}

// GetAllowSsh retrieves the value of the leaf AllowSsh from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowSsh is set, it can
// safely use t.GetAllowSsh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowSsh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetAllowSsh() bool {
	if t == nil || t.AllowSsh == nil {
		return false
	}
	return *t.AllowSsh
}

// GetAllowTelnet retrieves the value of the leaf AllowTelnet from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet is set, it can
// safely use t.GetAllowTelnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetAllowTelnet() bool {
	if t == nil || t.AllowTelnet == nil {
		return false
	}
	return *t.AllowTelnet
}

// GetAllowTelnet6 retrieves the value of the leaf AllowTelnet6 from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet6 is set, it can
// safely use t.GetAllowTelnet6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetAllowTelnet6() bool {
	if t == nil || t.AllowTelnet6 == nil {
		return false
	}
	return *t.AllowTelnet6
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Management) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Management
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Management) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFtp == nil {
		var v bool = false
		t.AllowFtp = &v
	}
	if t.AllowGrpc == nil {
		var v bool = false
		t.AllowGrpc = &v
	}
	if t.AllowNetconf == nil {
		var v bool = false
		t.AllowNetconf = &v
	}
	if t.AllowSsh == nil {
		var v bool = false
		t.AllowSsh = &v
	}
	if t.AllowTelnet == nil {
		var v bool = false
		t.AllowTelnet = &v
	}
	if t.AllowTelnet6 == nil {
		var v bool = false
		t.AllowTelnet6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Management) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Management"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Management) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Management) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Management.
func (*NokiaConf_Configure_Service_Vprn_Management) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes represents the /nokia-conf/configure/service/vprn/maximum-ipv4-routes YANG schema element.
type NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes struct {
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Value     *int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes.
func (*NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes represents the /nokia-conf/configure/service/vprn/maximum-ipv6-routes YANG schema element.
type NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes struct {
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Value     *int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes.
func (*NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_McMaximumRoutes represents the /nokia-conf/configure/service/vprn/mc-maximum-routes YANG schema element.
type NokiaConf_Configure_Service_Vprn_McMaximumRoutes struct {
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Value     *int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_McMaximumRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_McMaximumRoutes) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_McMaximumRoutes) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_McMaximumRoutes) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_McMaximumRoutes) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_McMaximumRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_McMaximumRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_McMaximumRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_McMaximumRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_McMaximumRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_McMaximumRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_McMaximumRoutes.
func (*NokiaConf_Configure_Service_Vprn_McMaximumRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld represents the /nokia-conf/configure/service/vprn/mld YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	ForwardingGroupInterface  map[NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface `path:"forwarding-group-interface" module:"nokia-conf"`
	GroupIfQuerySourceAddress *string                                                                                                                              `path:"group-if-query-source-address" module:"nokia-conf"`
	GroupInterface            map[string]*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface                                                                      `path:"group-interface" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface                                                                           `path:"interface" module:"nokia-conf"`
	QueryInterval             *uint32                                                                                                                              `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                                                                              `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                                                                              `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                                                                              `path:"robust-count" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate                                                                                   `path:"ssm-translate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key represents the key for list ForwardingGroupInterface of element /nokia-conf/configure/service/vprn/mld.
type NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key struct {
	ForwardingService  string `path:"forwarding-service"`
	GroupInterfaceName string `path:"group-interface-name"`
}

// NewForwardingGroupInterface creates a new entry in the ForwardingGroupInterface list of the
// NokiaConf_Configure_Service_Vprn_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld) NewForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) (*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface)
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroupInterface", key)
	}

	t.ForwardingGroupInterface[key] = &NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface{
		ForwardingService:  &ForwardingService,
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.ForwardingGroupInterface[key], nil
}

// RenameForwardingGroupInterface renames an entry in the list ForwardingGroupInterface within
// the NokiaConf_Configure_Service_Vprn_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) RenameForwardingGroupInterface(oldK, newK NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key) error {
	if _, ok := t.ForwardingGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroupInterface", newK)
	}

	e, ok := t.ForwardingGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroupInterface", oldK)
	}
	e.ForwardingService = &newK.ForwardingService
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.ForwardingGroupInterface[newK] = e
	delete(t.ForwardingGroupInterface, oldK)
	return nil
}

// GetOrCreateForwardingGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetOrCreateForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface {

	key := NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if v, ok := t.ForwardingGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroupInterface(ForwardingService, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroupInterface retrieves the value with the specified key from
// the ForwardingGroupInterface map field of NokiaConf_Configure_Service_Vprn_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if lm, ok := t.ForwardingGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld) DeleteForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	delete(t.ForwardingGroupInterface, key)
}

// AppendForwardingGroupInterface appends the supplied NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface struct to the
// list ForwardingGroupInterface of NokiaConf_Configure_Service_Vprn_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld) AppendForwardingGroupInterface(v *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) error {
	if v.ForwardingService == nil {
		return fmt.Errorf("invalid nil key for ForwardingService")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  *v.ForwardingService,
		GroupInterfaceName: *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface)
	}

	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroupInterface %v", key)
	}

	t.ForwardingGroupInterface[key] = v
	return nil
}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Service_Vprn_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Service_Vprn_Mld_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Service_Vprn_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Service_Vprn_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Service_Vprn_Mld_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Service_Vprn_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld) AppendGroupInterface(v *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld) NewInterface(IpInterfaceName string) (*NokiaConf_Configure_Service_Vprn_Mld_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface)
	}

	key := IpInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface{
		IpInterfaceName: &IpInterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpInterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetOrCreateInterface(IpInterfaceName string) *NokiaConf_Configure_Service_Vprn_Mld_Interface {

	key := IpInterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetInterface(IpInterfaceName string) *NokiaConf_Configure_Service_Vprn_Mld_Interface {

	if t == nil {
		return nil
	}

	key := IpInterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld) DeleteInterface(IpInterfaceName string) {
	key := IpInterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Mld_Interface) error {
	if v.IpInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for IpInterfaceName")
	}

	key := *v.IpInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetOrCreateSsmTranslate() *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate{}
	return t.SsmTranslate
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetSsmTranslate() *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupIfQuerySourceAddress retrieves the value of the leaf GroupIfQuerySourceAddress from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIfQuerySourceAddress is set, it can
// safely use t.GetGroupIfQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIfQuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetGroupIfQuerySourceAddress() string {
	if t == nil || t.GroupIfQuerySourceAddress == nil {
		return ""
	}
	return *t.GroupIfQuerySourceAddress
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vprn_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.SsmTranslate.PopulateDefaults()
	for _, e := range t.ForwardingGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld.
func (*NokiaConf_Configure_Service_Vprn_Mld) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface represents the /nokia-conf/configure/service/vprn/mld/forwarding-group-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ForwardingService         *string                                                             `path:"forwarding-service" module:"nokia-conf"`
	GroupInterfaceName        *string                                                             `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                             `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                             `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                             `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                             `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                             `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                             `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                             `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                             `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                               `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                               `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                               `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                         `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetMcac() *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetForwardingService retrieves the value of the leaf ForwardingService from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingService is set, it can
// safely use t.GetForwardingService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetForwardingService() string {
	if t == nil || t.ForwardingService == nil {
		return ""
	}
	return *t.ForwardingService
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ForwardingService == nil {
		return nil, fmt.Errorf("nil value for key ForwardingService")
	}

	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"forwarding-service":   *t.ForwardingService,
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface.
func (*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac represents the /nokia-conf/configure/service/vprn/mld/forwarding-group-interface/mcac YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                       `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                       `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac.
func (*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/service/vprn/mld/forwarding-group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vprn_Mld_ForwardingGroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_GroupInterface represents the /nokia-conf/configure/service/vprn/mld/group-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_GroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupInterfaceName        *string                                                   `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                   `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                   `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                   `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                   `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                   `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                   `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                   `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                   `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                     `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                     `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                     `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                               `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_GroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetMcac() *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_GroupInterface.
func (*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac represents the /nokia-conf/configure/service/vprn/mld/group-interface/mcac YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                             `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                             `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac.
func (*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/service/vprn/mld/group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vprn_Mld_GroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface represents the /nokia-conf/configure/service/vprn/mld/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ImportPolicy              *string                                                      `path:"import-policy" module:"nokia-conf"`
	IpInterfaceName           *string                                                      `path:"ip-interface-name" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                      `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                      `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                      `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac         `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                      `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                      `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                      `path:"query-response-interval" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                        `path:"router-alert-check" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate `path:"ssm-translate" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static       `path:"static" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetOrCreateMcac() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetOrCreateSsmTranslate() *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetOrCreateStatic() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetMcac() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_Interface. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetSsmTranslate() *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_Interface. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetStatic() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetIpInterfaceName retrieves the value of the leaf IpInterfaceName from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpInterfaceName is set, it can
// safely use t.GetIpInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetIpInterfaceName() string {
	if t == nil || t.IpInterfaceName == nil {
		return ""
	}
	return *t.IpInterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
	t.SsmTranslate.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key IpInterfaceName")
	}

	return map[string]interface{}{
		"ip-interface-name": *t.IpInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac represents the /nokia-conf/configure/service/vprn/mld/interface/mcac YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                            `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                            `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/service/vprn/mld/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints represents the /nokia-conf/configure/service/vprn/mld/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints struct {
	Level            map[uint32]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level      `path:"level" module:"nokia-conf"`
	NumberDown       map[uint32]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                    `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) NewLevel(LevelId uint32) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level{
		LevelId: &LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId uint32) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetLevel(LevelId uint32) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) DeleteLevel(LevelId uint32) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) error {
	if v.LevelId == nil {
		return fmt.Errorf("invalid nil key received for LevelId")
	}

	key := *v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown uint32) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: &NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK uint32) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = &newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown uint32) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) error {
	if v.NumberLagPortDown == nil {
		return fmt.Errorf("invalid nil key received for NumberLagPortDown")
	}

	key := *v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/service/vprn/mld/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	LevelId            *uint32  `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) GetLevelId() uint32 {
	if t == nil || t.LevelId == nil {
		return 0
	}
	return *t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelId == nil {
		return nil, fmt.Errorf("nil value for key LevelId")
	}

	return map[string]interface{}{
		"level-id": *t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/service/vprn/mld/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	NumberLagPortDown  *uint32  `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() uint32 {
	if t == nil || t.NumberLagPortDown == nil {
		return 0
	}
	return *t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumberLagPortDown == nil {
		return nil, fmt.Errorf("nil value for key NumberLagPortDown")
	}

	return map[string]interface{}{
		"number-lag-port-down": *t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate represents the /nokia-conf/configure/service/vprn/mld/interface/ssm-translate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/service/vprn/mld/interface/ssm-translate.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange represents the /nokia-conf/configure/service/vprn/mld/interface/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                                   `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start              *string                                                                                   `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/service/vprn/mld/interface/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static represents the /nokia-conf/configure/service/vprn/mld/interface/static YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Static struct {
	Group      map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group                                                                    `path:"group" module:"nokia-conf"`
	GroupRange map[NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/service/vprn/mld/interface/static.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
	Step  string `path:"step"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) NewGroupRange(Start string, End string, Step string) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange)
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange{
		Start: &Start,
		End:   &End,
		Step:  &Step,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) RenameGroupRange(oldK, newK NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End
	e.Step = &newK.Step

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) GetOrCreateGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange {

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End, Step)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) GetGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) DeleteGroupRange(Start string, End string, Step string) {
	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	if v.Step == nil {
		return fmt.Errorf("invalid nil key for Step")
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
		Step:  *v.Step,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group represents the /nokia-conf/configure/service/vprn/mld/interface/static/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                        `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                      `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange represents the /nokia-conf/configure/service/vprn/mld/interface/static/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange struct {
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                             `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                           `path:"starg" module:"nokia-conf"`
	Start              *string                                                                             `path:"start" module:"nokia-conf"`
	Step               *string                                                                             `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) AppendSource(v *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) GetStep() string {
	if t == nil || t.Step == nil {
		return ""
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	if t.Step == nil {
		return nil, fmt.Errorf("nil value for key Step")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
		"step":  *t.Step,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source represents the /nokia-conf/configure/service/vprn/mld/interface/static/group-range/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source represents the /nokia-conf/configure/service/vprn/mld/interface/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vprn_Mld_Interface_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate represents the /nokia-conf/configure/service/vprn/mld/ssm-translate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/service/vprn/mld/ssm-translate.
type NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate.
func (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange represents the /nokia-conf/configure/service/vprn/mld/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                         `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start              *string                                                                         `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/service/vprn/mld/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Service_Vprn_Mld_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp represents the /nokia-conf/configure/service/vprn/msdp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp struct {
	ActiveSourceLimit         *int32                                                    `path:"active-source-limit" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	DataEncapsulation         *bool                                                     `path:"data-encapsulation" module:"nokia-conf"`
	ExportPolicy              []string                                                  `path:"export-policy" module:"nokia-conf"`
	Group                     map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Group   `path:"group" module:"nokia-conf"`
	ImportPolicy              []string                                                  `path:"import-policy" module:"nokia-conf"`
	LocalAddress              *string                                                   `path:"local-address" module:"nokia-conf"`
	Peer                      map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Peer    `path:"peer" module:"nokia-conf"`
	ReceiveMessageRate        *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
	RpfTable                  E_NokiaConf_Configure_Service_Vprn_Msdp_RpfTable          `path:"rpf-table" module:"nokia-conf"`
	Source                    map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Source  `path:"source" module:"nokia-conf"`
	SourceActiveCacheLifetime *uint32                                                   `path:"source-active-cache-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Msdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) NewGroup(Name string) (*NokiaConf_Configure_Service_Vprn_Msdp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Msdp_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Msdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetOrCreateGroup(Name string) *NokiaConf_Configure_Service_Vprn_Msdp_Group {

	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Msdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetGroup(Name string) *NokiaConf_Configure_Service_Vprn_Msdp_Group {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Msdp_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Msdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Msdp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Msdp_Group) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Service_Vprn_Msdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) NewPeer(IpAddress string) (*NokiaConf_Configure_Service_Vprn_Msdp_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Service_Vprn_Msdp_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Service_Vprn_Msdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Service_Vprn_Msdp_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Service_Vprn_Msdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetPeer(IpAddress string) *NokiaConf_Configure_Service_Vprn_Msdp_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Service_Vprn_Msdp_Peer struct to the
// list Peer of NokiaConf_Configure_Service_Vprn_Msdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Msdp_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) AppendPeer(v *NokiaConf_Configure_Service_Vprn_Msdp_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Msdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) NewSource(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Msdp_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Source)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Msdp_Source{
		IpPrefix: &IpPrefix,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Msdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.IpPrefix = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetOrCreateSource(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Msdp_Source {

	key := IpPrefix

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Msdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetSource(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Msdp_Source {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) DeleteSource(IpPrefix string) {
	key := IpPrefix

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Msdp_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Msdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Msdp_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) AppendSource(v *NokiaConf_Configure_Service_Vprn_Msdp_Source) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Msdp. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDataEncapsulation retrieves the value of the leaf DataEncapsulation from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataEncapsulation is set, it can
// safely use t.GetDataEncapsulation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataEncapsulation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetDataEncapsulation() bool {
	if t == nil || t.DataEncapsulation == nil {
		return true
	}
	return *t.DataEncapsulation
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetRpfTable() E_NokiaConf_Configure_Service_Vprn_Msdp_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Service_Vprn_Msdp_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSourceActiveCacheLifetime retrieves the value of the leaf SourceActiveCacheLifetime from the NokiaConf_Configure_Service_Vprn_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceActiveCacheLifetime is set, it can
// safely use t.GetSourceActiveCacheLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceActiveCacheLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) GetSourceActiveCacheLifetime() uint32 {
	if t == nil || t.SourceActiveCacheLifetime == nil {
		return 90
	}
	return *t.SourceActiveCacheLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DataEncapsulation == nil {
		var v bool = true
		t.DataEncapsulation = &v
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Service_Vprn_Msdp_RpfTable_rtable_u
	}
	if t.SourceActiveCacheLifetime == nil {
		var v uint32 = 90
		t.SourceActiveCacheLifetime = &v
	}
	t.ReceiveMessageRate.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp.
func (*NokiaConf_Configure_Service_Vprn_Msdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_Group represents the /nokia-conf/configure/service/vprn/msdp/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_Group struct {
	ActiveSourceLimit  *int32                                                          `path:"active-source-limit" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	ExportPolicy       []string                                                        `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                        `path:"import-policy" module:"nokia-conf"`
	LocalAddress       *string                                                         `path:"local-address" module:"nokia-conf"`
	Mode               E_NokiaConf_Configure_Service_Vprn_Msdp_Group_Mode              `path:"mode" module:"nokia-conf"`
	Name               *string                                                         `path:"name" module:"nokia-conf"`
	Peer               map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer    `path:"peer" module:"nokia-conf"`
	ReceiveMessageRate *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Service_Vprn_Msdp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) NewPeer(IpAddress string) (*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Service_Vprn_Msdp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Service_Vprn_Msdp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetPeer(IpAddress string) *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Msdp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer struct to the
// list Peer of NokiaConf_Configure_Service_Vprn_Msdp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) AppendPeer(v *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Msdp_Group. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetMode() E_NokiaConf_Configure_Service_Vprn_Msdp_Group_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Service_Vprn_Msdp_Group_Mode_standard
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Service_Vprn_Msdp_Group_Mode_standard
	}
	t.ReceiveMessageRate.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Msdp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_Group.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer represents the /nokia-conf/configure/service/vprn/msdp/group/peer YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer struct {
	ActiveSourceLimit  *int32                                                               `path:"active-source-limit" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                              `path:"authentication-key" module:"nokia-conf"`
	DefaultPeer        *bool                                                                `path:"default-peer" module:"nokia-conf"`
	ExportPolicy       []string                                                             `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                             `path:"import-policy" module:"nokia-conf"`
	IpAddress          *string                                                              `path:"ip-address" module:"nokia-conf"`
	LocalAddress       *string                                                              `path:"local-address" module:"nokia-conf"`
	ReceiveMessageRate *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) IsYANGGoStruct() {}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDefaultPeer retrieves the value of the leaf DefaultPeer from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPeer is set, it can
// safely use t.GetDefaultPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetDefaultPeer() bool {
	if t == nil || t.DefaultPeer == nil {
		return false
	}
	return *t.DefaultPeer
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultPeer == nil {
		var v bool = false
		t.DefaultPeer = &v
	}
	t.ReceiveMessageRate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate represents the /nokia-conf/configure/service/vprn/msdp/group/peer/receive-message-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group_Peer_ReceiveMessageRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate represents the /nokia-conf/configure/service/vprn/msdp/group/receive-message-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Group_ReceiveMessageRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_Peer represents the /nokia-conf/configure/service/vprn/msdp/peer YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_Peer struct {
	ActiveSourceLimit  *int32                                                         `path:"active-source-limit" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                        `path:"authentication-key" module:"nokia-conf"`
	DefaultPeer        *bool                                                          `path:"default-peer" module:"nokia-conf"`
	ExportPolicy       []string                                                       `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                       `path:"import-policy" module:"nokia-conf"`
	IpAddress          *string                                                        `path:"ip-address" module:"nokia-conf"`
	LocalAddress       *string                                                        `path:"local-address" module:"nokia-conf"`
	ReceiveMessageRate *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Peer) IsYANGGoStruct() {}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Msdp_Peer. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetReceiveMessageRate() *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDefaultPeer retrieves the value of the leaf DefaultPeer from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPeer is set, it can
// safely use t.GetDefaultPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetDefaultPeer() bool {
	if t == nil || t.DefaultPeer == nil {
		return false
	}
	return *t.DefaultPeer
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultPeer == nil {
		var v bool = false
		t.DefaultPeer = &v
	}
	t.ReceiveMessageRate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Msdp_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_Peer.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate represents the /nokia-conf/configure/service/vprn/msdp/peer/receive-message-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Peer_ReceiveMessageRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate represents the /nokia-conf/configure/service/vprn/msdp/receive-message-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate.
func (*NokiaConf_Configure_Service_Vprn_Msdp_ReceiveMessageRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Msdp_Source represents the /nokia-conf/configure/service/vprn/msdp/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Msdp_Source struct {
	ActiveSourceLimit  *int32   `path:"active-source-limit" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Msdp_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Source) IsYANGGoStruct() {}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Service_Vprn_Msdp_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Msdp_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Msdp_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Msdp_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Msdp_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Msdp_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Msdp_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Msdp_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Msdp_Source.
func (*NokiaConf_Configure_Service_Vprn_Msdp_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_MssAdjust represents the /nokia-conf/configure/service/vprn/mss-adjust YANG schema element.
type NokiaConf_Configure_Service_Vprn_MssAdjust struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	NatGroup           *uint32  `path:"nat-group" module:"nokia-conf"`
	SegmentSize        *uint32  `path:"segment-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_MssAdjust implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_MssAdjust) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_MssAdjust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_MssAdjust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Service_Vprn_MssAdjust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetSegmentSize retrieves the value of the leaf SegmentSize from the NokiaConf_Configure_Service_Vprn_MssAdjust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentSize is set, it can
// safely use t.GetSegmentSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) GetSegmentSize() uint32 {
	if t == nil || t.SegmentSize == nil {
		return 0
	}
	return *t.SegmentSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_MssAdjust
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_MssAdjust"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_MssAdjust) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_MssAdjust.
func (*NokiaConf_Configure_Service_Vprn_MssAdjust) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mtrace2 represents the /nokia-conf/configure/service/vprn/mtrace2 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mtrace2 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	UdpPort    *uint32                     `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mtrace2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mtrace2) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mtrace2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mtrace2) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Service_Vprn_Mtrace2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mtrace2) GetUdpPort() uint32 {
	if t == nil || t.UdpPort == nil {
		return 5000
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mtrace2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mtrace2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.UdpPort == nil {
		var v uint32 = 5000
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mtrace2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mtrace2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mtrace2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mtrace2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mtrace2.
func (*NokiaConf_Configure_Service_Vprn_Mtrace2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn represents the /nokia-conf/configure/service/vprn/mvpn YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn struct {
	ApplyGroups         []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoDiscovery       *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery       `path:"auto-discovery" module:"nokia-conf"`
	CMcastSignaling     E_NokiaConf_Configure_Service_Vprn_Mvpn_CMcastSignaling    `path:"c-mcast-signaling" module:"nokia-conf"`
	IntersiteShared     *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared     `path:"intersite-shared" module:"nokia-conf"`
	MdtType             E_NokiaConf_Configure_Service_Vprn_Mvpn_MdtType            `path:"mdt-type" module:"nokia-conf"`
	ProviderTunnel      *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel      `path:"provider-tunnel" module:"nokia-conf"`
	RedundantSourceList *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList `path:"redundant-source-list" module:"nokia-conf"`
	RpfSelect           *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect           `path:"rpf-select" module:"nokia-conf"`
	UmhPeBackup         *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup         `path:"umh-pe-backup" module:"nokia-conf"`
	UmhSelection        E_NokiaConf_Configure_Service_Vprn_Mvpn_UmhSelection       `path:"umh-selection" module:"nokia-conf"`
	VrfExport           *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport           `path:"vrf-export" module:"nokia-conf"`
	VrfImport           *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport           `path:"vrf-import" module:"nokia-conf"`
	VrfTarget           *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget           `path:"vrf-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn) IsYANGGoStruct() {}

// GetOrCreateAutoDiscovery retrieves the value of the AutoDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateAutoDiscovery() *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery {
	if t.AutoDiscovery != nil {
		return t.AutoDiscovery
	}
	t.AutoDiscovery = &NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery{}
	return t.AutoDiscovery
}

// GetOrCreateIntersiteShared retrieves the value of the IntersiteShared field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateIntersiteShared() *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared {
	if t.IntersiteShared != nil {
		return t.IntersiteShared
	}
	t.IntersiteShared = &NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared{}
	return t.IntersiteShared
}

// GetOrCreateProviderTunnel retrieves the value of the ProviderTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateProviderTunnel() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel {
	if t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	t.ProviderTunnel = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel{}
	return t.ProviderTunnel
}

// GetOrCreateRedundantSourceList retrieves the value of the RedundantSourceList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateRedundantSourceList() *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList {
	if t.RedundantSourceList != nil {
		return t.RedundantSourceList
	}
	t.RedundantSourceList = &NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList{}
	return t.RedundantSourceList
}

// GetOrCreateRpfSelect retrieves the value of the RpfSelect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateRpfSelect() *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect {
	if t.RpfSelect != nil {
		return t.RpfSelect
	}
	t.RpfSelect = &NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect{}
	return t.RpfSelect
}

// GetOrCreateUmhPeBackup retrieves the value of the UmhPeBackup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateUmhPeBackup() *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup {
	if t.UmhPeBackup != nil {
		return t.UmhPeBackup
	}
	t.UmhPeBackup = &NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup{}
	return t.UmhPeBackup
}

// GetOrCreateVrfExport retrieves the value of the VrfExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateVrfExport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport {
	if t.VrfExport != nil {
		return t.VrfExport
	}
	t.VrfExport = &NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport{}
	return t.VrfExport
}

// GetOrCreateVrfImport retrieves the value of the VrfImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateVrfImport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport {
	if t.VrfImport != nil {
		return t.VrfImport
	}
	t.VrfImport = &NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport{}
	return t.VrfImport
}

// GetOrCreateVrfTarget retrieves the value of the VrfTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetOrCreateVrfTarget() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget {
	if t.VrfTarget != nil {
		return t.VrfTarget
	}
	t.VrfTarget = &NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget{}
	return t.VrfTarget
}

// GetAutoDiscovery returns the value of the AutoDiscovery struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field AutoDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetAutoDiscovery() *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery {
	if t != nil && t.AutoDiscovery != nil {
		return t.AutoDiscovery
	}
	return nil
}

// GetIntersiteShared returns the value of the IntersiteShared struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field IntersiteShared is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetIntersiteShared() *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared {
	if t != nil && t.IntersiteShared != nil {
		return t.IntersiteShared
	}
	return nil
}

// GetProviderTunnel returns the value of the ProviderTunnel struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field ProviderTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetProviderTunnel() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel {
	if t != nil && t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	return nil
}

// GetRedundantSourceList returns the value of the RedundantSourceList struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field RedundantSourceList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetRedundantSourceList() *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList {
	if t != nil && t.RedundantSourceList != nil {
		return t.RedundantSourceList
	}
	return nil
}

// GetRpfSelect returns the value of the RpfSelect struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field RpfSelect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetRpfSelect() *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect {
	if t != nil && t.RpfSelect != nil {
		return t.RpfSelect
	}
	return nil
}

// GetUmhPeBackup returns the value of the UmhPeBackup struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field UmhPeBackup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetUmhPeBackup() *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup {
	if t != nil && t.UmhPeBackup != nil {
		return t.UmhPeBackup
	}
	return nil
}

// GetVrfExport returns the value of the VrfExport struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field VrfExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetVrfExport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport {
	if t != nil && t.VrfExport != nil {
		return t.VrfExport
	}
	return nil
}

// GetVrfImport returns the value of the VrfImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field VrfImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetVrfImport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport {
	if t != nil && t.VrfImport != nil {
		return t.VrfImport
	}
	return nil
}

// GetVrfTarget returns the value of the VrfTarget struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn. If the receiver or the field VrfTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetVrfTarget() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget {
	if t != nil && t.VrfTarget != nil {
		return t.VrfTarget
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCMcastSignaling retrieves the value of the leaf CMcastSignaling from the NokiaConf_Configure_Service_Vprn_Mvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CMcastSignaling is set, it can
// safely use t.GetCMcastSignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CMcastSignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetCMcastSignaling() E_NokiaConf_Configure_Service_Vprn_Mvpn_CMcastSignaling {
	if t == nil || t.CMcastSignaling == 0 {
		return NokiaConf_Configure_Service_Vprn_Mvpn_CMcastSignaling_pim
	}
	return t.CMcastSignaling
}

// GetMdtType retrieves the value of the leaf MdtType from the NokiaConf_Configure_Service_Vprn_Mvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtType is set, it can
// safely use t.GetMdtType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetMdtType() E_NokiaConf_Configure_Service_Vprn_Mvpn_MdtType {
	if t == nil || t.MdtType == 0 {
		return NokiaConf_Configure_Service_Vprn_Mvpn_MdtType_sender_receiver
	}
	return t.MdtType
}

// GetUmhSelection retrieves the value of the leaf UmhSelection from the NokiaConf_Configure_Service_Vprn_Mvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UmhSelection is set, it can
// safely use t.GetUmhSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UmhSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) GetUmhSelection() E_NokiaConf_Configure_Service_Vprn_Mvpn_UmhSelection {
	if t == nil || t.UmhSelection == 0 {
		return NokiaConf_Configure_Service_Vprn_Mvpn_UmhSelection_highest_ip
	}
	return t.UmhSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CMcastSignaling == 0 {
		t.CMcastSignaling = NokiaConf_Configure_Service_Vprn_Mvpn_CMcastSignaling_pim
	}
	if t.MdtType == 0 {
		t.MdtType = NokiaConf_Configure_Service_Vprn_Mvpn_MdtType_sender_receiver
	}
	if t.UmhSelection == 0 {
		t.UmhSelection = NokiaConf_Configure_Service_Vprn_Mvpn_UmhSelection_highest_ip
	}
	t.AutoDiscovery.PopulateDefaults()
	t.IntersiteShared.PopulateDefaults()
	t.ProviderTunnel.PopulateDefaults()
	t.RedundantSourceList.PopulateDefaults()
	t.RpfSelect.PopulateDefaults()
	t.UmhPeBackup.PopulateDefaults()
	t.VrfExport.PopulateDefaults()
	t.VrfImport.PopulateDefaults()
	t.VrfTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn.
func (*NokiaConf_Configure_Service_Vprn_Mvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery represents the /nokia-conf/configure/service/vprn/mvpn/auto-discovery YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery struct {
	SourceAddress *string                                                    `path:"source-address" module:"nokia-conf"`
	Type          E_NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return "0.0.0.0"
	}
	return *t.SourceAddress
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) GetType() E_NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SourceAddress == nil {
		var v string = "0.0.0.0"
		t.SourceAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_AutoDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared represents the /nokia-conf/configure/service/vprn/mvpn/intersite-shared YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared struct {
	AdminState                    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	KatType5AdvertisementWithdraw *bool                       `path:"kat-type5-advertisement-withdraw" module:"nokia-conf"`
	PersistentType5Advertisement  *bool                       `path:"persistent-type5-advertisement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetKatType5AdvertisementWithdraw retrieves the value of the leaf KatType5AdvertisementWithdraw from the NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KatType5AdvertisementWithdraw is set, it can
// safely use t.GetKatType5AdvertisementWithdraw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KatType5AdvertisementWithdraw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) GetKatType5AdvertisementWithdraw() bool {
	if t == nil || t.KatType5AdvertisementWithdraw == nil {
		return false
	}
	return *t.KatType5AdvertisementWithdraw
}

// GetPersistentType5Advertisement retrieves the value of the leaf PersistentType5Advertisement from the NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PersistentType5Advertisement is set, it can
// safely use t.GetPersistentType5Advertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PersistentType5Advertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) GetPersistentType5Advertisement() bool {
	if t == nil || t.PersistentType5Advertisement == nil {
		return false
	}
	return *t.PersistentType5Advertisement
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.KatType5AdvertisementWithdraw == nil {
		var v bool = false
		t.KatType5AdvertisementWithdraw = &v
	}
	if t.PersistentType5Advertisement == nil {
		var v bool = false
		t.PersistentType5Advertisement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_IntersiteShared) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel struct {
	Inclusive *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive `path:"inclusive" module:"nokia-conf"`
	Selective *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective `path:"selective" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) IsYANGGoStruct() {}

// GetOrCreateInclusive retrieves the value of the Inclusive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) GetOrCreateInclusive() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive {
	if t.Inclusive != nil {
		return t.Inclusive
	}
	t.Inclusive = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive{}
	return t.Inclusive
}

// GetOrCreateSelective retrieves the value of the Selective field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) GetOrCreateSelective() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective {
	if t.Selective != nil {
		return t.Selective
	}
	t.Selective = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective{}
	return t.Selective
}

// GetInclusive returns the value of the Inclusive struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel. If the receiver or the field Inclusive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) GetInclusive() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive {
	if t != nil && t.Inclusive != nil {
		return t.Inclusive
	}
	return nil
}

// GetSelective returns the value of the Selective struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel. If the receiver or the field Selective is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) GetSelective() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective {
	if t != nil && t.Selective != nil {
		return t.Selective
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inclusive.PopulateDefaults()
	t.Selective.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive struct {
	Bier              *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier              `path:"bier" module:"nokia-conf" yangPresence:"true"`
	Bsr               E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bsr              `path:"bsr" module:"nokia-conf"`
	Mldp              *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp              `path:"mldp" module:"nokia-conf" yangPresence:"true"`
	P2MpSr            *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr            `path:"p2mp-sr" module:"nokia-conf" yangPresence:"true"`
	Pim               *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim               `path:"pim" module:"nokia-conf" yangPresence:"true"`
	Rsvp              *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp              `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
	UmhRateMonitoring *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring `path:"umh-rate-monitoring" module:"nokia-conf"`
	WildcardSpmsi     *bool                                                                             `path:"wildcard-spmsi" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) IsYANGGoStruct() {}

// GetOrCreateBier retrieves the value of the Bier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetOrCreateBier() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier {
	if t.Bier != nil {
		return t.Bier
	}
	t.Bier = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier{}
	return t.Bier
}

// GetOrCreateMldp retrieves the value of the Mldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetOrCreateMldp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp {
	if t.Mldp != nil {
		return t.Mldp
	}
	t.Mldp = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp{}
	return t.Mldp
}

// GetOrCreateP2MpSr retrieves the value of the P2MpSr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetOrCreateP2MpSr() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr {
	if t.P2MpSr != nil {
		return t.P2MpSr
	}
	t.P2MpSr = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr{}
	return t.P2MpSr
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetOrCreatePim() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim{}
	return t.Pim
}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetOrCreateRsvp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp{}
	return t.Rsvp
}

// GetOrCreateUmhRateMonitoring retrieves the value of the UmhRateMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetOrCreateUmhRateMonitoring() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring {
	if t.UmhRateMonitoring != nil {
		return t.UmhRateMonitoring
	}
	t.UmhRateMonitoring = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring{}
	return t.UmhRateMonitoring
}

// GetBier returns the value of the Bier struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive. If the receiver or the field Bier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetBier() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier {
	if t != nil && t.Bier != nil {
		return t.Bier
	}
	return nil
}

// GetMldp returns the value of the Mldp struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive. If the receiver or the field Mldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetMldp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp {
	if t != nil && t.Mldp != nil {
		return t.Mldp
	}
	return nil
}

// GetP2MpSr returns the value of the P2MpSr struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive. If the receiver or the field P2MpSr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetP2MpSr() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr {
	if t != nil && t.P2MpSr != nil {
		return t.P2MpSr
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetPim() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetRsvp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetUmhRateMonitoring returns the value of the UmhRateMonitoring struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive. If the receiver or the field UmhRateMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetUmhRateMonitoring() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring {
	if t != nil && t.UmhRateMonitoring != nil {
		return t.UmhRateMonitoring
	}
	return nil
}

// GetBsr retrieves the value of the leaf Bsr from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bsr is set, it can
// safely use t.GetBsr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bsr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetBsr() E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bsr {
	if t == nil || t.Bsr == 0 {
		return 0
	}
	return t.Bsr
}

// GetWildcardSpmsi retrieves the value of the leaf WildcardSpmsi from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WildcardSpmsi is set, it can
// safely use t.GetWildcardSpmsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WildcardSpmsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) GetWildcardSpmsi() bool {
	if t == nil || t.WildcardSpmsi == nil {
		return false
	}
	return *t.WildcardSpmsi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WildcardSpmsi == nil {
		var v bool = false
		t.WildcardSpmsi = &v
	}
	t.Bier.PopulateDefaults()
	t.Mldp.PopulateDefaults()
	t.P2MpSr.PopulateDefaults()
	t.Pim.PopulateDefaults()
	t.Rsvp.PopulateDefaults()
	t.UmhRateMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/bier YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	SubDomain  *int32                      `path:"sub-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetSubDomain retrieves the value of the leaf SubDomain from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubDomain is set, it can
// safely use t.GetSubDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) GetSubDomain() int32 {
	if t == nil || t.SubDomain == nil {
		return 0
	}
	return *t.SubDomain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Bier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/mldp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Mldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/p2mp-sr YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr struct {
	AdminState   E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	BfdLeaf      *bool                                                                          `path:"bfd-leaf" module:"nokia-conf"`
	BfdRoot      *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot `path:"bfd-root" module:"nokia-conf" yangPresence:"true"`
	P2MpPolicy   *bool                                                                          `path:"p2mp-policy" module:"nokia-conf"`
	StaticPolicy *string                                                                        `path:"static-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) IsYANGGoStruct() {}

// GetOrCreateBfdRoot retrieves the value of the BfdRoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) GetOrCreateBfdRoot() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot {
	if t.BfdRoot != nil {
		return t.BfdRoot
	}
	t.BfdRoot = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot{}
	return t.BfdRoot
}

// GetBfdRoot returns the value of the BfdRoot struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr. If the receiver or the field BfdRoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) GetBfdRoot() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot {
	if t != nil && t.BfdRoot != nil {
		return t.BfdRoot
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBfdLeaf retrieves the value of the leaf BfdLeaf from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLeaf is set, it can
// safely use t.GetBfdLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) GetBfdLeaf() bool {
	if t == nil || t.BfdLeaf == nil {
		return false
	}
	return *t.BfdLeaf
}

// GetP2MpPolicy retrieves the value of the leaf P2MpPolicy from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpPolicy is set, it can
// safely use t.GetP2MpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) GetP2MpPolicy() bool {
	if t == nil || t.P2MpPolicy == nil {
		return false
	}
	return *t.P2MpPolicy
}

// GetStaticPolicy retrieves the value of the leaf StaticPolicy from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticPolicy is set, it can
// safely use t.GetStaticPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) GetStaticPolicy() string {
	if t == nil || t.StaticPolicy == nil {
		return ""
	}
	return *t.StaticPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BfdLeaf == nil {
		var v bool = false
		t.BfdLeaf = &v
	}
	if t.P2MpPolicy == nil {
		var v bool = false
		t.P2MpPolicy = &v
	}
	t.BfdRoot.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/p2mp-sr/bfd-root YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot struct {
	Multiplier       *uint32 `path:"multiplier" module:"nokia-conf"`
	TransmitInterval *uint32 `path:"transmit-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 0
	}
	return *t.TransmitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_P2MpSr_BfdRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/pim YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim struct {
	AdminState      E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	GroupAddress    *string                                                                   `path:"group-address" module:"nokia-conf"`
	HelloInterval   *uint32                                                                   `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier *uint32                                                                   `path:"hello-multiplier" module:"nokia-conf"`
	ImprovedAssert  *bool                                                                     `path:"improved-assert" module:"nokia-conf"`
	Mode            E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim_Mode `path:"mode" module:"nokia-conf"`
	ThreeWayHello   *bool                                                                     `path:"three-way-hello" module:"nokia-conf"`
	TrackingSupport *bool                                                                     `path:"tracking-support" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 30
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetHelloMultiplier() uint32 {
	if t == nil || t.HelloMultiplier == nil {
		return 35
	}
	return *t.HelloMultiplier
}

// GetImprovedAssert retrieves the value of the leaf ImprovedAssert from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImprovedAssert is set, it can
// safely use t.GetImprovedAssert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImprovedAssert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetImprovedAssert() bool {
	if t == nil || t.ImprovedAssert == nil {
		return true
	}
	return *t.ImprovedAssert
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetMode() E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetThreeWayHello retrieves the value of the leaf ThreeWayHello from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeWayHello is set, it can
// safely use t.GetThreeWayHello() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeWayHello == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetThreeWayHello() bool {
	if t == nil || t.ThreeWayHello == nil {
		return false
	}
	return *t.ThreeWayHello
}

// GetTrackingSupport retrieves the value of the leaf TrackingSupport from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackingSupport is set, it can
// safely use t.GetTrackingSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackingSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) GetTrackingSupport() bool {
	if t == nil || t.TrackingSupport == nil {
		return false
	}
	return *t.TrackingSupport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.HelloInterval == nil {
		var v uint32 = 30
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint32 = 35
		t.HelloMultiplier = &v
	}
	if t.ImprovedAssert == nil {
		var v bool = true
		t.ImprovedAssert = &v
	}
	if t.ThreeWayHello == nil {
		var v bool = false
		t.ThreeWayHello = &v
	}
	if t.TrackingSupport == nil {
		var v bool = false
		t.TrackingSupport = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Pim) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/rsvp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp struct {
	AdminState  E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	BfdLeaf     *bool                                                                        `path:"bfd-leaf" module:"nokia-conf"`
	BfdRoot     *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot `path:"bfd-root" module:"nokia-conf" yangPresence:"true"`
	LspTemplate *string                                                                      `path:"lsp-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) IsYANGGoStruct() {}

// GetOrCreateBfdRoot retrieves the value of the BfdRoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) GetOrCreateBfdRoot() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot {
	if t.BfdRoot != nil {
		return t.BfdRoot
	}
	t.BfdRoot = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot{}
	return t.BfdRoot
}

// GetBfdRoot returns the value of the BfdRoot struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp. If the receiver or the field BfdRoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) GetBfdRoot() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot {
	if t != nil && t.BfdRoot != nil {
		return t.BfdRoot
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBfdLeaf retrieves the value of the leaf BfdLeaf from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLeaf is set, it can
// safely use t.GetBfdLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) GetBfdLeaf() bool {
	if t == nil || t.BfdLeaf == nil {
		return false
	}
	return *t.BfdLeaf
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BfdLeaf == nil {
		var v bool = false
		t.BfdLeaf = &v
	}
	t.BfdRoot.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/rsvp/bfd-root YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot struct {
	Multiplier       *uint32 `path:"multiplier" module:"nokia-conf"`
	TransmitInterval *uint32 `path:"transmit-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 0
	}
	return *t.TransmitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_Rsvp_BfdRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/inclusive/umh-rate-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring struct {
	RevertiveTimer   *uint32 `path:"revertive-timer" module:"nokia-conf"`
	TrafficRateDelta *uint32 `path:"traffic-rate-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) IsYANGGoStruct() {
}

// GetRevertiveTimer retrieves the value of the leaf RevertiveTimer from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertiveTimer is set, it can
// safely use t.GetRevertiveTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertiveTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) GetRevertiveTimer() uint32 {
	if t == nil || t.RevertiveTimer == nil {
		return 0
	}
	return *t.RevertiveTimer
}

// GetTrafficRateDelta retrieves the value of the leaf TrafficRateDelta from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficRateDelta is set, it can
// safely use t.GetTrafficRateDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficRateDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) GetTrafficRateDelta() uint32 {
	if t == nil || t.TrafficRateDelta == nil {
		return 0
	}
	return *t.TrafficRateDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Inclusive_UmhRateMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective struct {
	AsmMdt            *bool                                                                                       `path:"asm-mdt" module:"nokia-conf"`
	AutoDiscovery     *bool                                                                                       `path:"auto-discovery" module:"nokia-conf"`
	Bier              *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier                        `path:"bier" module:"nokia-conf" yangPresence:"true"`
	DataDelayInterval *uint32                                                                                     `path:"data-delay-interval" module:"nokia-conf"`
	DataThreshold     *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold               `path:"data-threshold" module:"nokia-conf"`
	JoinTlvPacking    *bool                                                                                       `path:"join-tlv-packing" module:"nokia-conf"`
	Mldp              *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp                        `path:"mldp" module:"nokia-conf" yangPresence:"true"`
	MultistreamSpmsi  map[uint32]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi `path:"multistream-spmsi" module:"nokia-conf"`
	P2MpSr            *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr                      `path:"p2mp-sr" module:"nokia-conf" yangPresence:"true"`
	Pim               *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim                         `path:"pim" module:"nokia-conf" yangPresence:"true"`
	Rsvp              *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp                        `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
	UmhRateMonitoring *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring           `path:"umh-rate-monitoring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) IsYANGGoStruct() {}

// NewMultistreamSpmsi creates a new entry in the MultistreamSpmsi list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) NewMultistreamSpmsi(MultistreamId uint32) (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultistreamSpmsi == nil {
		t.MultistreamSpmsi = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi)
	}

	key := MultistreamId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultistreamSpmsi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultistreamSpmsi", key)
	}

	t.MultistreamSpmsi[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi{
		MultistreamId: &MultistreamId,
	}

	return t.MultistreamSpmsi[key], nil
}

// RenameMultistreamSpmsi renames an entry in the list MultistreamSpmsi within
// the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) RenameMultistreamSpmsi(oldK, newK uint32) error {
	if _, ok := t.MultistreamSpmsi[newK]; ok {
		return fmt.Errorf("key %v already exists in MultistreamSpmsi", newK)
	}

	e, ok := t.MultistreamSpmsi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultistreamSpmsi", oldK)
	}
	e.MultistreamId = &newK

	t.MultistreamSpmsi[newK] = e
	delete(t.MultistreamSpmsi, oldK)
	return nil
}

// GetOrCreateMultistreamSpmsi retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreateMultistreamSpmsi(MultistreamId uint32) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi {

	key := MultistreamId

	if v, ok := t.MultistreamSpmsi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultistreamSpmsi(MultistreamId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultistreamSpmsi got unexpected error: %v", err))
	}
	return v
}

// GetMultistreamSpmsi retrieves the value with the specified key from
// the MultistreamSpmsi map field of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetMultistreamSpmsi(MultistreamId uint32) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi {

	if t == nil {
		return nil
	}

	key := MultistreamId

	if lm, ok := t.MultistreamSpmsi[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultistreamSpmsi deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) DeleteMultistreamSpmsi(MultistreamId uint32) {
	key := MultistreamId

	delete(t.MultistreamSpmsi, key)
}

// AppendMultistreamSpmsi appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi struct to the
// list MultistreamSpmsi of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) AppendMultistreamSpmsi(v *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) error {
	if v.MultistreamId == nil {
		return fmt.Errorf("invalid nil key received for MultistreamId")
	}

	key := *v.MultistreamId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultistreamSpmsi == nil {
		t.MultistreamSpmsi = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi)
	}

	if _, ok := t.MultistreamSpmsi[key]; ok {
		return fmt.Errorf("duplicate key for list MultistreamSpmsi %v", key)
	}

	t.MultistreamSpmsi[key] = v
	return nil
}

// GetOrCreateBier retrieves the value of the Bier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreateBier() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier {
	if t.Bier != nil {
		return t.Bier
	}
	t.Bier = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier{}
	return t.Bier
}

// GetOrCreateDataThreshold retrieves the value of the DataThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreateDataThreshold() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold {
	if t.DataThreshold != nil {
		return t.DataThreshold
	}
	t.DataThreshold = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold{}
	return t.DataThreshold
}

// GetOrCreateMldp retrieves the value of the Mldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreateMldp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp {
	if t.Mldp != nil {
		return t.Mldp
	}
	t.Mldp = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp{}
	return t.Mldp
}

// GetOrCreateP2MpSr retrieves the value of the P2MpSr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreateP2MpSr() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr {
	if t.P2MpSr != nil {
		return t.P2MpSr
	}
	t.P2MpSr = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr{}
	return t.P2MpSr
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreatePim() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim{}
	return t.Pim
}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreateRsvp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp{}
	return t.Rsvp
}

// GetOrCreateUmhRateMonitoring retrieves the value of the UmhRateMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetOrCreateUmhRateMonitoring() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring {
	if t.UmhRateMonitoring != nil {
		return t.UmhRateMonitoring
	}
	t.UmhRateMonitoring = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring{}
	return t.UmhRateMonitoring
}

// GetBier returns the value of the Bier struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver or the field Bier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetBier() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier {
	if t != nil && t.Bier != nil {
		return t.Bier
	}
	return nil
}

// GetDataThreshold returns the value of the DataThreshold struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver or the field DataThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetDataThreshold() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold {
	if t != nil && t.DataThreshold != nil {
		return t.DataThreshold
	}
	return nil
}

// GetMldp returns the value of the Mldp struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver or the field Mldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetMldp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp {
	if t != nil && t.Mldp != nil {
		return t.Mldp
	}
	return nil
}

// GetP2MpSr returns the value of the P2MpSr struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver or the field P2MpSr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetP2MpSr() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr {
	if t != nil && t.P2MpSr != nil {
		return t.P2MpSr
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetPim() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetRsvp() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetUmhRateMonitoring returns the value of the UmhRateMonitoring struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective. If the receiver or the field UmhRateMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetUmhRateMonitoring() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring {
	if t != nil && t.UmhRateMonitoring != nil {
		return t.UmhRateMonitoring
	}
	return nil
}

// GetAsmMdt retrieves the value of the leaf AsmMdt from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsmMdt is set, it can
// safely use t.GetAsmMdt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsmMdt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetAsmMdt() bool {
	if t == nil || t.AsmMdt == nil {
		return false
	}
	return *t.AsmMdt
}

// GetAutoDiscovery retrieves the value of the leaf AutoDiscovery from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoDiscovery is set, it can
// safely use t.GetAutoDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetAutoDiscovery() bool {
	if t == nil || t.AutoDiscovery == nil {
		return false
	}
	return *t.AutoDiscovery
}

// GetDataDelayInterval retrieves the value of the leaf DataDelayInterval from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataDelayInterval is set, it can
// safely use t.GetDataDelayInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataDelayInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetDataDelayInterval() uint32 {
	if t == nil || t.DataDelayInterval == nil {
		return 3
	}
	return *t.DataDelayInterval
}

// GetJoinTlvPacking retrieves the value of the leaf JoinTlvPacking from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinTlvPacking is set, it can
// safely use t.GetJoinTlvPacking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinTlvPacking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) GetJoinTlvPacking() bool {
	if t == nil || t.JoinTlvPacking == nil {
		return true
	}
	return *t.JoinTlvPacking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsmMdt == nil {
		var v bool = false
		t.AsmMdt = &v
	}
	if t.AutoDiscovery == nil {
		var v bool = false
		t.AutoDiscovery = &v
	}
	if t.DataDelayInterval == nil {
		var v uint32 = 3
		t.DataDelayInterval = &v
	}
	if t.JoinTlvPacking == nil {
		var v bool = true
		t.JoinTlvPacking = &v
	}
	t.Bier.PopulateDefaults()
	t.DataThreshold.PopulateDefaults()
	t.Mldp.PopulateDefaults()
	t.P2MpSr.PopulateDefaults()
	t.Pim.PopulateDefaults()
	t.Rsvp.PopulateDefaults()
	t.UmhRateMonitoring.PopulateDefaults()
	for _, e := range t.MultistreamSpmsi {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/bier YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	SubDomain  *int32                      `path:"sub-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetSubDomain retrieves the value of the leaf SubDomain from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubDomain is set, it can
// safely use t.GetSubDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) GetSubDomain() int32 {
	if t == nil || t.SubDomain == nil {
		return 0
	}
	return *t.SubDomain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Bier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/data-threshold YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold struct {
	GroupPrefix map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) IsYANGGoStruct() {
}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) NewGroupPrefix(IpGroupPrefix string) (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix)
	}

	key := IpGroupPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix{
		IpGroupPrefix: &IpGroupPrefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.IpGroupPrefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) GetOrCreateGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix {

	key := IpGroupPrefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(IpGroupPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) GetGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix {

	if t == nil {
		return nil
	}

	key := IpGroupPrefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) DeleteGroupPrefix(IpGroupPrefix string) {
	key := IpGroupPrefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) AppendGroupPrefix(v *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) error {
	if v.IpGroupPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpGroupPrefix")
	}

	key := *v.IpGroupPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/data-threshold/group-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpGroupPrefix      *string  `path:"ip-group-prefix" module:"nokia-conf"`
	PeThresholdAdd     *uint32  `path:"pe-threshold-add" module:"nokia-conf"`
	PeThresholdDelete  *uint32  `path:"pe-threshold-delete" module:"nokia-conf"`
	Threshold          *int64   `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpGroupPrefix retrieves the value of the leaf IpGroupPrefix from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpGroupPrefix is set, it can
// safely use t.GetIpGroupPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpGroupPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetIpGroupPrefix() string {
	if t == nil || t.IpGroupPrefix == nil {
		return ""
	}
	return *t.IpGroupPrefix
}

// GetPeThresholdAdd retrieves the value of the leaf PeThresholdAdd from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeThresholdAdd is set, it can
// safely use t.GetPeThresholdAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeThresholdAdd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetPeThresholdAdd() uint32 {
	if t == nil || t.PeThresholdAdd == nil {
		return 65535
	}
	return *t.PeThresholdAdd
}

// GetPeThresholdDelete retrieves the value of the leaf PeThresholdDelete from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeThresholdDelete is set, it can
// safely use t.GetPeThresholdDelete() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeThresholdDelete == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetPeThresholdDelete() uint32 {
	if t == nil || t.PeThresholdDelete == nil {
		return 65535
	}
	return *t.PeThresholdDelete
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetThreshold() int64 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PeThresholdAdd == nil {
		var v uint32 = 65535
		t.PeThresholdAdd = &v
	}
	if t.PeThresholdDelete == nil {
		var v uint32 = 65535
		t.PeThresholdDelete = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpGroupPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpGroupPrefix")
	}

	return map[string]interface{}{
		"ip-group-prefix": *t.IpGroupPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/mldp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp struct {
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaximumP2MpSpmsi *uint32                     `path:"maximum-p2mp-spmsi" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaximumP2MpSpmsi retrieves the value of the leaf MaximumP2MpSpmsi from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumP2MpSpmsi is set, it can
// safely use t.GetMaximumP2MpSpmsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumP2MpSpmsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) GetMaximumP2MpSpmsi() uint32 {
	if t == nil || t.MaximumP2MpSpmsi == nil {
		return 10
	}
	return *t.MaximumP2MpSpmsi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaximumP2MpSpmsi == nil {
		var v uint32 = 10
		t.MaximumP2MpSpmsi = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Mldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/multistream-spmsi YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupPrefix        map[NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
	LspTemplate        *string                                                                                                                                                                                          `path:"lsp-template" module:"nokia-conf"`
	MultistreamId      *uint32                                                                                                                                                                                          `path:"multistream-id" module:"nokia-conf"`
	P2MpSr             *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr                                                                                                          `path:"p2mp-sr" module:"nokia-conf"`
	Pim                *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim                                                                                                             `path:"pim" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key represents the key for list GroupPrefix of element /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/multistream-spmsi.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key struct {
	IpGroupPrefix string `path:"ip-group-prefix"`
	SourcePrefix  string `path:"source-prefix"`
}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) NewGroupPrefix(IpGroupPrefix string, SourcePrefix string) (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix)
	}

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key{
		IpGroupPrefix: IpGroupPrefix,
		SourcePrefix:  SourcePrefix,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix{
		IpGroupPrefix: &IpGroupPrefix,
		SourcePrefix:  &SourcePrefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) RenameGroupPrefix(oldK, newK NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.IpGroupPrefix = &newK.IpGroupPrefix
	e.SourcePrefix = &newK.SourcePrefix

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetOrCreateGroupPrefix(IpGroupPrefix string, SourcePrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix {

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key{
		IpGroupPrefix: IpGroupPrefix,
		SourcePrefix:  SourcePrefix,
	}

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(IpGroupPrefix, SourcePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetGroupPrefix(IpGroupPrefix string, SourcePrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key{
		IpGroupPrefix: IpGroupPrefix,
		SourcePrefix:  SourcePrefix,
	}

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) DeleteGroupPrefix(IpGroupPrefix string, SourcePrefix string) {
	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key{
		IpGroupPrefix: IpGroupPrefix,
		SourcePrefix:  SourcePrefix,
	}

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) AppendGroupPrefix(v *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) error {
	if v.IpGroupPrefix == nil {
		return fmt.Errorf("invalid nil key for IpGroupPrefix")
	}

	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key for SourcePrefix")
	}

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key{
		IpGroupPrefix: *v.IpGroupPrefix,
		SourcePrefix:  *v.SourcePrefix,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix_Key]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetOrCreateP2MpSr retrieves the value of the P2MpSr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetOrCreateP2MpSr() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr {
	if t.P2MpSr != nil {
		return t.P2MpSr
	}
	t.P2MpSr = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr{}
	return t.P2MpSr
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetOrCreatePim() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim{}
	return t.Pim
}

// GetP2MpSr returns the value of the P2MpSr struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi. If the receiver or the field P2MpSr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetP2MpSr() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr {
	if t != nil && t.P2MpSr != nil {
		return t.P2MpSr
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetPim() *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// GetMultistreamId retrieves the value of the leaf MultistreamId from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultistreamId is set, it can
// safely use t.GetMultistreamId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultistreamId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) GetMultistreamId() uint32 {
	if t == nil || t.MultistreamId == nil {
		return 0
	}
	return *t.MultistreamId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.P2MpSr.PopulateDefaults()
	t.Pim.PopulateDefaults()
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MultistreamId == nil {
		return nil, fmt.Errorf("nil value for key MultistreamId")
	}

	return map[string]interface{}{
		"multistream-id": *t.MultistreamId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/multistream-spmsi/group-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix struct {
	IpGroupPrefix *string `path:"ip-group-prefix" module:"nokia-conf"`
	SourcePrefix  *string `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) IsYANGGoStruct() {
}

// GetIpGroupPrefix retrieves the value of the leaf IpGroupPrefix from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpGroupPrefix is set, it can
// safely use t.GetIpGroupPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpGroupPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) GetIpGroupPrefix() string {
	if t == nil || t.IpGroupPrefix == nil {
		return ""
	}
	return *t.IpGroupPrefix
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpGroupPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpGroupPrefix")
	}

	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"ip-group-prefix": *t.IpGroupPrefix,
		"source-prefix":   *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/multistream-spmsi/p2mp-sr YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr struct {
	P2MpPolicy   *bool   `path:"p2mp-policy" module:"nokia-conf"`
	StaticPolicy *string `path:"static-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) IsYANGGoStruct() {
}

// GetP2MpPolicy retrieves the value of the leaf P2MpPolicy from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpPolicy is set, it can
// safely use t.GetP2MpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) GetP2MpPolicy() bool {
	if t == nil || t.P2MpPolicy == nil {
		return false
	}
	return *t.P2MpPolicy
}

// GetStaticPolicy retrieves the value of the leaf StaticPolicy from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticPolicy is set, it can
// safely use t.GetStaticPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) GetStaticPolicy() string {
	if t == nil || t.StaticPolicy == nil {
		return ""
	}
	return *t.StaticPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.P2MpPolicy == nil {
		var v bool = false
		t.P2MpPolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_P2MpSr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/multistream-spmsi/pim YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim struct {
	GroupAddress *string                                                                                    `path:"group-address" module:"nokia-conf"`
	Mode         E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim_Mode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) IsYANGGoStruct() {
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) GetMode() E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_MultistreamSpmsi_Pim) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/p2mp-sr YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	P2MpPolicy   *bool                       `path:"p2mp-policy" module:"nokia-conf"`
	StaticPolicy *string                     `path:"static-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetP2MpPolicy retrieves the value of the leaf P2MpPolicy from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpPolicy is set, it can
// safely use t.GetP2MpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) GetP2MpPolicy() bool {
	if t == nil || t.P2MpPolicy == nil {
		return false
	}
	return *t.P2MpPolicy
}

// GetStaticPolicy retrieves the value of the leaf StaticPolicy from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticPolicy is set, it can
// safely use t.GetStaticPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) GetStaticPolicy() string {
	if t == nil || t.StaticPolicy == nil {
		return ""
	}
	return *t.StaticPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.P2MpPolicy == nil {
		var v bool = false
		t.P2MpPolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_P2MpSr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/pim YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim struct {
	GroupPrefix *string                                                                   `path:"group-prefix" module:"nokia-conf"`
	Mode        E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim_Mode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) IsYANGGoStruct() {}

// GetGroupPrefix retrieves the value of the leaf GroupPrefix from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPrefix is set, it can
// safely use t.GetGroupPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) GetGroupPrefix() string {
	if t == nil || t.GroupPrefix == nil {
		return ""
	}
	return *t.GroupPrefix
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) GetMode() E_NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Pim) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/rsvp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp struct {
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LspTemplate      *string                     `path:"lsp-template" module:"nokia-conf"`
	MaximumP2MpSpmsi *uint32                     `path:"maximum-p2mp-spmsi" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// GetMaximumP2MpSpmsi retrieves the value of the leaf MaximumP2MpSpmsi from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumP2MpSpmsi is set, it can
// safely use t.GetMaximumP2MpSpmsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumP2MpSpmsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) GetMaximumP2MpSpmsi() uint32 {
	if t == nil || t.MaximumP2MpSpmsi == nil {
		return 10
	}
	return *t.MaximumP2MpSpmsi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaximumP2MpSpmsi == nil {
		var v uint32 = 10
		t.MaximumP2MpSpmsi = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/umh-rate-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring struct {
	Group map[NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key represents the key for list Group of element /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/umh-rate-monitoring.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key struct {
	GroupIpAddress string `path:"group-ip-address"`
	Source         string `path:"source"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) NewGroup(GroupIpAddress string, Source string) (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group)
	}

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key{
		GroupIpAddress: GroupIpAddress,
		Source:         Source,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group{
		GroupIpAddress: &GroupIpAddress,
		Source:         &Source,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) RenameGroup(oldK, newK NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupIpAddress = &newK.GroupIpAddress
	e.Source = &newK.Source

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) GetOrCreateGroup(GroupIpAddress string, Source string) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group {

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key{
		GroupIpAddress: GroupIpAddress,
		Source:         Source,
	}

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupIpAddress, Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) GetGroup(GroupIpAddress string, Source string) *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key{
		GroupIpAddress: GroupIpAddress,
		Source:         Source,
	}

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) DeleteGroup(GroupIpAddress string, Source string) {
	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key{
		GroupIpAddress: GroupIpAddress,
		Source:         Source,
	}

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) error {
	if v.GroupIpAddress == nil {
		return fmt.Errorf("invalid nil key for GroupIpAddress")
	}

	if v.Source == nil {
		return fmt.Errorf("invalid nil key for Source")
	}

	key := NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key{
		GroupIpAddress: *v.GroupIpAddress,
		Source:         *v.Source,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group_Key]*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group represents the /nokia-conf/configure/service/vprn/mvpn/provider-tunnel/selective/umh-rate-monitoring/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupIpAddress     *string  `path:"group-ip-address" module:"nokia-conf"`
	RevertiveTimer     *uint32  `path:"revertive-timer" module:"nokia-conf"`
	Source             *string  `path:"source" module:"nokia-conf"`
	TrafficRateDelta   *uint32  `path:"traffic-rate-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupIpAddress retrieves the value of the leaf GroupIpAddress from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIpAddress is set, it can
// safely use t.GetGroupIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) GetGroupIpAddress() string {
	if t == nil || t.GroupIpAddress == nil {
		return ""
	}
	return *t.GroupIpAddress
}

// GetRevertiveTimer retrieves the value of the leaf RevertiveTimer from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertiveTimer is set, it can
// safely use t.GetRevertiveTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertiveTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) GetRevertiveTimer() uint32 {
	if t == nil || t.RevertiveTimer == nil {
		return 0
	}
	return *t.RevertiveTimer
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// GetTrafficRateDelta retrieves the value of the leaf TrafficRateDelta from the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficRateDelta is set, it can
// safely use t.GetTrafficRateDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficRateDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) GetTrafficRateDelta() uint32 {
	if t == nil || t.TrafficRateDelta == nil {
		return 0
	}
	return *t.TrafficRateDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupIpAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupIpAddress")
	}

	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"group-ip-address": *t.GroupIpAddress,
		"source":           *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_ProviderTunnel_Selective_UmhRateMonitoring_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList represents the /nokia-conf/configure/service/vprn/mvpn/redundant-source-list YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList struct {
	SourcePrefix map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) IsYANGGoStruct() {}

// NewSourcePrefix creates a new entry in the SourcePrefix list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) NewSourcePrefix(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourcePrefix == nil {
		t.SourcePrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourcePrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourcePrefix", key)
	}

	t.SourcePrefix[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix{
		IpPrefix: &IpPrefix,
	}

	return t.SourcePrefix[key], nil
}

// RenameSourcePrefix renames an entry in the list SourcePrefix within
// the NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) RenameSourcePrefix(oldK, newK string) error {
	if _, ok := t.SourcePrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in SourcePrefix", newK)
	}

	e, ok := t.SourcePrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourcePrefix", oldK)
	}
	e.IpPrefix = &newK

	t.SourcePrefix[newK] = e
	delete(t.SourcePrefix, oldK)
	return nil
}

// GetOrCreateSourcePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) GetOrCreateSourcePrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix {

	key := IpPrefix

	if v, ok := t.SourcePrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourcePrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourcePrefix got unexpected error: %v", err))
	}
	return v
}

// GetSourcePrefix retrieves the value with the specified key from
// the SourcePrefix map field of NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) GetSourcePrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SourcePrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourcePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) DeleteSourcePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.SourcePrefix, key)
}

// AppendSourcePrefix appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix struct to the
// list SourcePrefix of NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) AppendSourcePrefix(v *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourcePrefix == nil {
		t.SourcePrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix)
	}

	if _, ok := t.SourcePrefix[key]; ok {
		return fmt.Errorf("duplicate key for list SourcePrefix %v", key)
	}

	t.SourcePrefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SourcePrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix represents the /nokia-conf/configure/service/vprn/mvpn/redundant-source-list/source-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RedundantSourceList_SourcePrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect represents the /nokia-conf/configure/service/vprn/mvpn/rpf-select YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect struct {
	CoreMvpn map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn `path:"core-mvpn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) IsYANGGoStruct() {}

// NewCoreMvpn creates a new entry in the CoreMvpn list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) NewCoreMvpn(CoreMvpnServiceName string) (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CoreMvpn == nil {
		t.CoreMvpn = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn)
	}

	key := CoreMvpnServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CoreMvpn[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CoreMvpn", key)
	}

	t.CoreMvpn[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn{
		CoreMvpnServiceName: &CoreMvpnServiceName,
	}

	return t.CoreMvpn[key], nil
}

// RenameCoreMvpn renames an entry in the list CoreMvpn within
// the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) RenameCoreMvpn(oldK, newK string) error {
	if _, ok := t.CoreMvpn[newK]; ok {
		return fmt.Errorf("key %v already exists in CoreMvpn", newK)
	}

	e, ok := t.CoreMvpn[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CoreMvpn", oldK)
	}
	e.CoreMvpnServiceName = &newK

	t.CoreMvpn[newK] = e
	delete(t.CoreMvpn, oldK)
	return nil
}

// GetOrCreateCoreMvpn retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) GetOrCreateCoreMvpn(CoreMvpnServiceName string) *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn {

	key := CoreMvpnServiceName

	if v, ok := t.CoreMvpn[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCoreMvpn(CoreMvpnServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCoreMvpn got unexpected error: %v", err))
	}
	return v
}

// GetCoreMvpn retrieves the value with the specified key from
// the CoreMvpn map field of NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) GetCoreMvpn(CoreMvpnServiceName string) *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn {

	if t == nil {
		return nil
	}

	key := CoreMvpnServiceName

	if lm, ok := t.CoreMvpn[key]; ok {
		return lm
	}
	return nil
}

// DeleteCoreMvpn deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) DeleteCoreMvpn(CoreMvpnServiceName string) {
	key := CoreMvpnServiceName

	delete(t.CoreMvpn, key)
}

// AppendCoreMvpn appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn struct to the
// list CoreMvpn of NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) AppendCoreMvpn(v *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) error {
	if v.CoreMvpnServiceName == nil {
		return fmt.Errorf("invalid nil key received for CoreMvpnServiceName")
	}

	key := *v.CoreMvpnServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CoreMvpn == nil {
		t.CoreMvpn = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn)
	}

	if _, ok := t.CoreMvpn[key]; ok {
		return fmt.Errorf("duplicate key for list CoreMvpn %v", key)
	}

	t.CoreMvpn[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CoreMvpn {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn represents the /nokia-conf/configure/service/vprn/mvpn/rpf-select/core-mvpn YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn struct {
	ApplyGroups         []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	CoreMvpnServiceName *string                                                                          `path:"core-mvpn-service-name" module:"nokia-conf"`
	GroupPrefix         map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) NewGroupPrefix(IpGroupPrefix string) (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix)
	}

	key := IpGroupPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix{
		IpGroupPrefix: &IpGroupPrefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.IpGroupPrefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) GetOrCreateGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix {

	key := IpGroupPrefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(IpGroupPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) GetGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix {

	if t == nil {
		return nil
	}

	key := IpGroupPrefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) DeleteGroupPrefix(IpGroupPrefix string) {
	key := IpGroupPrefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) AppendGroupPrefix(v *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) error {
	if v.IpGroupPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpGroupPrefix")
	}

	key := *v.IpGroupPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCoreMvpnServiceName retrieves the value of the leaf CoreMvpnServiceName from the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CoreMvpnServiceName is set, it can
// safely use t.GetCoreMvpnServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CoreMvpnServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) GetCoreMvpnServiceName() string {
	if t == nil || t.CoreMvpnServiceName == nil {
		return ""
	}
	return *t.CoreMvpnServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CoreMvpnServiceName == nil {
		return nil, fmt.Errorf("nil value for key CoreMvpnServiceName")
	}

	return map[string]interface{}{
		"core-mvpn-service-name": *t.CoreMvpnServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix represents the /nokia-conf/configure/service/vprn/mvpn/rpf-select/core-mvpn/group-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpGroupPrefix      *string  `path:"ip-group-prefix" module:"nokia-conf"`
	Starg              *bool    `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpGroupPrefix retrieves the value of the leaf IpGroupPrefix from the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpGroupPrefix is set, it can
// safely use t.GetIpGroupPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpGroupPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) GetIpGroupPrefix() string {
	if t == nil || t.IpGroupPrefix == nil {
		return ""
	}
	return *t.IpGroupPrefix
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) GetStarg() bool {
	if t == nil || t.Starg == nil {
		return false
	}
	return *t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Starg == nil {
		var v bool = false
		t.Starg = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpGroupPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpGroupPrefix")
	}

	return map[string]interface{}{
		"ip-group-prefix": *t.IpGroupPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_RpfSelect_CoreMvpn_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup represents the /nokia-conf/configure/service/vprn/mvpn/umh-pe-backup YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup struct {
	UmhPe map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe `path:"umh-pe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) IsYANGGoStruct() {}

// NewUmhPe creates a new entry in the UmhPe list of the
// NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) NewUmhPe(IpAddress string) (*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UmhPe == nil {
		t.UmhPe = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UmhPe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UmhPe", key)
	}

	t.UmhPe[key] = &NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe{
		IpAddress: &IpAddress,
	}

	return t.UmhPe[key], nil
}

// RenameUmhPe renames an entry in the list UmhPe within
// the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) RenameUmhPe(oldK, newK string) error {
	if _, ok := t.UmhPe[newK]; ok {
		return fmt.Errorf("key %v already exists in UmhPe", newK)
	}

	e, ok := t.UmhPe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UmhPe", oldK)
	}
	e.IpAddress = &newK

	t.UmhPe[newK] = e
	delete(t.UmhPe, oldK)
	return nil
}

// GetOrCreateUmhPe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) GetOrCreateUmhPe(IpAddress string) *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe {

	key := IpAddress

	if v, ok := t.UmhPe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUmhPe(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUmhPe got unexpected error: %v", err))
	}
	return v
}

// GetUmhPe retrieves the value with the specified key from
// the UmhPe map field of NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) GetUmhPe(IpAddress string) *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.UmhPe[key]; ok {
		return lm
	}
	return nil
}

// DeleteUmhPe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) DeleteUmhPe(IpAddress string) {
	key := IpAddress

	delete(t.UmhPe, key)
}

// AppendUmhPe appends the supplied NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe struct to the
// list UmhPe of NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) AppendUmhPe(v *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UmhPe == nil {
		t.UmhPe = make(map[string]*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe)
	}

	if _, ok := t.UmhPe[key]; ok {
		return fmt.Errorf("duplicate key for list UmhPe %v", key)
	}

	t.UmhPe[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UmhPe {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe represents the /nokia-conf/configure/service/vprn/mvpn/umh-pe-backup/umh-pe YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
	Standby            *string  `path:"standby" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetStandby retrieves the value of the leaf Standby from the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standby is set, it can
// safely use t.GetStandby() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standby == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) GetStandby() string {
	if t == nil || t.Standby == nil {
		return ""
	}
	return *t.Standby
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_UmhPeBackup_UmhPe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport represents the /nokia-conf/configure/service/vprn/mvpn/vrf-export YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport struct {
	Policy  []string `path:"policy" module:"nokia-conf"`
	Unicast *bool    `path:"unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// GetUnicast retrieves the value of the leaf Unicast from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unicast is set, it can
// safely use t.GetUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) GetUnicast() bool {
	if t == nil || t.Unicast == nil {
		return false
	}
	return *t.Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unicast == nil {
		var v bool = false
		t.Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport represents the /nokia-conf/configure/service/vprn/mvpn/vrf-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport struct {
	Policy  []string `path:"policy" module:"nokia-conf"`
	Unicast *bool    `path:"unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// GetUnicast retrieves the value of the leaf Unicast from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unicast is set, it can
// safely use t.GetUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) GetUnicast() bool {
	if t == nil || t.Unicast == nil {
		return false
	}
	return *t.Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unicast == nil {
		var v bool = false
		t.Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget represents the /nokia-conf/configure/service/vprn/mvpn/vrf-target YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget struct {
	Community *string                                                 `path:"community" module:"nokia-conf"`
	Export    *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export `path:"export" module:"nokia-conf"`
	Import    *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import `path:"import" module:"nokia-conf"`
	Unicast   *bool                                                   `path:"unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) IsYANGGoStruct() {}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) GetOrCreateExport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export{}
	return t.Export
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) GetOrCreateImport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import{}
	return t.Import
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) GetExport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) GetImport() *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetUnicast retrieves the value of the leaf Unicast from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unicast is set, it can
// safely use t.GetUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) GetUnicast() bool {
	if t == nil || t.Unicast == nil {
		return false
	}
	return *t.Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unicast == nil {
		var v bool = false
		t.Unicast = &v
	}
	t.Export.PopulateDefaults()
	t.Import.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export represents the /nokia-conf/configure/service/vprn/mvpn/vrf-target/export YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export struct {
	Community *string `path:"community" module:"nokia-conf"`
	Unicast   *bool   `path:"unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetUnicast retrieves the value of the leaf Unicast from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unicast is set, it can
// safely use t.GetUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) GetUnicast() bool {
	if t == nil || t.Unicast == nil {
		return false
	}
	return *t.Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unicast == nil {
		var v bool = false
		t.Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import represents the /nokia-conf/configure/service/vprn/mvpn/vrf-target/import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import struct {
	Community *string `path:"community" module:"nokia-conf"`
	Unicast   *bool   `path:"unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetUnicast retrieves the value of the leaf Unicast from the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unicast is set, it can
// safely use t.GetUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) GetUnicast() bool {
	if t == nil || t.Unicast == nil {
		return false
	}
	return *t.Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unicast == nil {
		var v bool = false
		t.Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import.
func (*NokiaConf_Configure_Service_Vprn_Mvpn_VrfTarget_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat represents the /nokia-conf/configure/service/vprn/nat YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Inside             *NokiaConf_Configure_Service_Vprn_Nat_Inside  `path:"inside" module:"nokia-conf"`
	Map                *NokiaConf_Configure_Service_Vprn_Nat_Map     `path:"map" module:"nokia-conf"`
	Outside            *NokiaConf_Configure_Service_Vprn_Nat_Outside `path:"outside" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat) IsYANGGoStruct() {}

// GetOrCreateInside retrieves the value of the Inside field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetOrCreateInside() *NokiaConf_Configure_Service_Vprn_Nat_Inside {
	if t.Inside != nil {
		return t.Inside
	}
	t.Inside = &NokiaConf_Configure_Service_Vprn_Nat_Inside{}
	return t.Inside
}

// GetOrCreateMap retrieves the value of the Map field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetOrCreateMap() *NokiaConf_Configure_Service_Vprn_Nat_Map {
	if t.Map != nil {
		return t.Map
	}
	t.Map = &NokiaConf_Configure_Service_Vprn_Nat_Map{}
	return t.Map
}

// GetOrCreateOutside retrieves the value of the Outside field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetOrCreateOutside() *NokiaConf_Configure_Service_Vprn_Nat_Outside {
	if t.Outside != nil {
		return t.Outside
	}
	t.Outside = &NokiaConf_Configure_Service_Vprn_Nat_Outside{}
	return t.Outside
}

// GetInside returns the value of the Inside struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat. If the receiver or the field Inside is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetInside() *NokiaConf_Configure_Service_Vprn_Nat_Inside {
	if t != nil && t.Inside != nil {
		return t.Inside
	}
	return nil
}

// GetMap returns the value of the Map struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat. If the receiver or the field Map is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetMap() *NokiaConf_Configure_Service_Vprn_Nat_Map {
	if t != nil && t.Map != nil {
		return t.Map
	}
	return nil
}

// GetOutside returns the value of the Outside struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat. If the receiver or the field Outside is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetOutside() *NokiaConf_Configure_Service_Vprn_Nat_Outside {
	if t != nil && t.Outside != nil {
		return t.Outside
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inside.PopulateDefaults()
	t.Map.PopulateDefaults()
	t.Outside.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat.
func (*NokiaConf_Configure_Service_Vprn_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside represents the /nokia-conf/configure/service/vprn/nat/inside YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside struct {
	L2Aware    *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware    `path:"l2-aware" module:"nokia-conf"`
	LargeScale *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale `path:"large-scale" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside) IsYANGGoStruct() {}

// GetOrCreateL2Aware retrieves the value of the L2Aware field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) GetOrCreateL2Aware() *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware {
	if t.L2Aware != nil {
		return t.L2Aware
	}
	t.L2Aware = &NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware{}
	return t.L2Aware
}

// GetOrCreateLargeScale retrieves the value of the LargeScale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) GetOrCreateLargeScale() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale {
	if t.LargeScale != nil {
		return t.LargeScale
	}
	t.LargeScale = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale{}
	return t.LargeScale
}

// GetL2Aware returns the value of the L2Aware struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside. If the receiver or the field L2Aware is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) GetL2Aware() *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware {
	if t != nil && t.L2Aware != nil {
		return t.L2Aware
	}
	return nil
}

// GetLargeScale returns the value of the LargeScale struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside. If the receiver or the field LargeScale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) GetLargeScale() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale {
	if t != nil && t.LargeScale != nil {
		return t.LargeScale
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2Aware.PopulateDefaults()
	t.LargeScale.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware represents the /nokia-conf/configure/service/vprn/nat/inside/l2-aware YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware struct {
	Subscribers map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers `path:"subscribers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) IsYANGGoStruct() {}

// NewSubscribers creates a new entry in the Subscribers list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) NewSubscribers(Prefix string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscribers == nil {
		t.Subscribers = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subscribers[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subscribers", key)
	}

	t.Subscribers[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers{
		Prefix: &Prefix,
	}

	return t.Subscribers[key], nil
}

// RenameSubscribers renames an entry in the list Subscribers within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) RenameSubscribers(oldK, newK string) error {
	if _, ok := t.Subscribers[newK]; ok {
		return fmt.Errorf("key %v already exists in Subscribers", newK)
	}

	e, ok := t.Subscribers[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subscribers", oldK)
	}
	e.Prefix = &newK

	t.Subscribers[newK] = e
	delete(t.Subscribers, oldK)
	return nil
}

// GetOrCreateSubscribers retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) GetOrCreateSubscribers(Prefix string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers {

	key := Prefix

	if v, ok := t.Subscribers[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscribers(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscribers got unexpected error: %v", err))
	}
	return v
}

// GetSubscribers retrieves the value with the specified key from
// the Subscribers map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) GetSubscribers(Prefix string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Subscribers[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscribers deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) DeleteSubscribers(Prefix string) {
	key := Prefix

	delete(t.Subscribers, key)
}

// AppendSubscribers appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers struct to the
// list Subscribers of NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) AppendSubscribers(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscribers == nil {
		t.Subscribers = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers)
	}

	if _, ok := t.Subscribers[key]; ok {
		return fmt.Errorf("duplicate key for list Subscribers %v", key)
	}

	t.Subscribers[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Subscribers {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers represents the /nokia-conf/configure/service/vprn/nat/inside/l2-aware/subscribers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers struct {
	Prefix *string `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_L2Aware_Subscribers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale struct {
	DnatOnly                 *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly                 `path:"dnat-only" module:"nokia-conf"`
	DualStackLite            *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite            `path:"dual-stack-lite" module:"nokia-conf"`
	Filters                  *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters                  `path:"filters" module:"nokia-conf"`
	NatPolicy                *string                                                                          `path:"nat-policy" module:"nokia-conf"`
	Nat44                    *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44                    `path:"nat44" module:"nokia-conf"`
	Nat64                    *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64                    `path:"nat64" module:"nokia-conf" yangPresence:"true"`
	Redundancy               *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy               `path:"redundancy" module:"nokia-conf"`
	SubscriberIdentification *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification `path:"subscriber-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) IsYANGGoStruct() {}

// GetOrCreateDnatOnly retrieves the value of the DnatOnly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetOrCreateDnatOnly() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly {
	if t.DnatOnly != nil {
		return t.DnatOnly
	}
	t.DnatOnly = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly{}
	return t.DnatOnly
}

// GetOrCreateDualStackLite retrieves the value of the DualStackLite field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetOrCreateDualStackLite() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite {
	if t.DualStackLite != nil {
		return t.DualStackLite
	}
	t.DualStackLite = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite{}
	return t.DualStackLite
}

// GetOrCreateFilters retrieves the value of the Filters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetOrCreateFilters() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters {
	if t.Filters != nil {
		return t.Filters
	}
	t.Filters = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters{}
	return t.Filters
}

// GetOrCreateNat44 retrieves the value of the Nat44 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetOrCreateNat44() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44 {
	if t.Nat44 != nil {
		return t.Nat44
	}
	t.Nat44 = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44{}
	return t.Nat44
}

// GetOrCreateNat64 retrieves the value of the Nat64 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetOrCreateNat64() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64 {
	if t.Nat64 != nil {
		return t.Nat64
	}
	t.Nat64 = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64{}
	return t.Nat64
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetOrCreateRedundancy() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy{}
	return t.Redundancy
}

// GetOrCreateSubscriberIdentification retrieves the value of the SubscriberIdentification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetOrCreateSubscriberIdentification() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification {
	if t.SubscriberIdentification != nil {
		return t.SubscriberIdentification
	}
	t.SubscriberIdentification = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification{}
	return t.SubscriberIdentification
}

// GetDnatOnly returns the value of the DnatOnly struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale. If the receiver or the field DnatOnly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetDnatOnly() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly {
	if t != nil && t.DnatOnly != nil {
		return t.DnatOnly
	}
	return nil
}

// GetDualStackLite returns the value of the DualStackLite struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale. If the receiver or the field DualStackLite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetDualStackLite() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite {
	if t != nil && t.DualStackLite != nil {
		return t.DualStackLite
	}
	return nil
}

// GetFilters returns the value of the Filters struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale. If the receiver or the field Filters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetFilters() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters {
	if t != nil && t.Filters != nil {
		return t.Filters
	}
	return nil
}

// GetNat44 returns the value of the Nat44 struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale. If the receiver or the field Nat44 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetNat44() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44 {
	if t != nil && t.Nat44 != nil {
		return t.Nat44
	}
	return nil
}

// GetNat64 returns the value of the Nat64 struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale. If the receiver or the field Nat64 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetNat64() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64 {
	if t != nil && t.Nat64 != nil {
		return t.Nat64
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetRedundancy() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetSubscriberIdentification returns the value of the SubscriberIdentification struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale. If the receiver or the field SubscriberIdentification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetSubscriberIdentification() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification {
	if t != nil && t.SubscriberIdentification != nil {
		return t.SubscriberIdentification
	}
	return nil
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DnatOnly.PopulateDefaults()
	t.DualStackLite.PopulateDefaults()
	t.Filters.PopulateDefaults()
	t.Nat44.PopulateDefaults()
	t.Nat64.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
	t.SubscriberIdentification.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dnat-only YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly struct {
	SourcePrefixList *string `path:"source-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly) IsYANGGoStruct() {}

// GetSourcePrefixList retrieves the value of the leaf SourcePrefixList from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefixList is set, it can
// safely use t.GetSourcePrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly) GetSourcePrefixList() string {
	if t == nil || t.SourcePrefixList == nil {
		return ""
	}
	return *t.SourcePrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DnatOnly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite struct {
	AdminState             E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	Deterministic          *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic       `path:"deterministic" module:"nokia-conf"`
	Endpoint               map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint `path:"endpoint" module:"nokia-conf"`
	MaxSubscriberLimit     *uint32                                                                                   `path:"max-subscriber-limit" module:"nokia-conf"`
	SubscriberPrefixLength *uint8                                                                                    `path:"subscriber-prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) NewEndpoint(Address string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint{
		Address: &Address,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Address = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) GetOrCreateEndpoint(Address string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint {

	key := Address

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) GetEndpoint(Address string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) DeleteEndpoint(Address string) {
	key := Address

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) AppendEndpoint(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// GetOrCreateDeterministic retrieves the value of the Deterministic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) GetOrCreateDeterministic() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic {
	if t.Deterministic != nil {
		return t.Deterministic
	}
	t.Deterministic = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic{}
	return t.Deterministic
}

// GetDeterministic returns the value of the Deterministic struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite. If the receiver or the field Deterministic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) GetDeterministic() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic {
	if t != nil && t.Deterministic != nil {
		return t.Deterministic
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxSubscriberLimit retrieves the value of the leaf MaxSubscriberLimit from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSubscriberLimit is set, it can
// safely use t.GetMaxSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) GetMaxSubscriberLimit() uint32 {
	if t == nil || t.MaxSubscriberLimit == nil {
		return 0
	}
	return *t.MaxSubscriberLimit
}

// GetSubscriberPrefixLength retrieves the value of the leaf SubscriberPrefixLength from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberPrefixLength is set, it can
// safely use t.GetSubscriberPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) GetSubscriberPrefixLength() uint8 {
	if t == nil || t.SubscriberPrefixLength == nil {
		return 128
	}
	return *t.SubscriberPrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SubscriberPrefixLength == nil {
		var v uint8 = 128
		t.SubscriberPrefixLength = &v
	}
	t.Deterministic.PopulateDefaults()
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic struct {
	PolicyMap map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap                                                                                           `path:"policy-map" module:"nokia-conf"`
	PrefixMap map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap `path:"prefix-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key represents the key for list PrefixMap of element /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key struct {
	SourcePrefix string `path:"source-prefix"`
	NatPolicy    string `path:"nat-policy"`
}

// NewPolicyMap creates a new entry in the PolicyMap list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) NewPolicyMap(SourcePrefix string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap)
	}

	key := SourcePrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyMap", key)
	}

	t.PolicyMap[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap{
		SourcePrefix: &SourcePrefix,
	}

	return t.PolicyMap[key], nil
}

// RenamePolicyMap renames an entry in the list PolicyMap within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) RenamePolicyMap(oldK, newK string) error {
	if _, ok := t.PolicyMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyMap", newK)
	}

	e, ok := t.PolicyMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyMap", oldK)
	}
	e.SourcePrefix = &newK

	t.PolicyMap[newK] = e
	delete(t.PolicyMap, oldK)
	return nil
}

// GetOrCreatePolicyMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetOrCreatePolicyMap(SourcePrefix string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap {

	key := SourcePrefix

	if v, ok := t.PolicyMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyMap(SourcePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyMap got unexpected error: %v", err))
	}
	return v
}

// GetPolicyMap retrieves the value with the specified key from
// the PolicyMap map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetPolicyMap(SourcePrefix string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap {

	if t == nil {
		return nil
	}

	key := SourcePrefix

	if lm, ok := t.PolicyMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) DeletePolicyMap(SourcePrefix string) {
	key := SourcePrefix

	delete(t.PolicyMap, key)
}

// AppendPolicyMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct to the
// list PolicyMap of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) AppendPolicyMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key received for SourcePrefix")
	}

	key := *v.SourcePrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap)
	}

	if _, ok := t.PolicyMap[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyMap %v", key)
	}

	t.PolicyMap[key] = v
	return nil
}

// NewPrefixMap creates a new entry in the PrefixMap list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) NewPrefixMap(SourcePrefix string, NatPolicy string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap)
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixMap", key)
	}

	t.PrefixMap[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap{
		SourcePrefix: &SourcePrefix,
		NatPolicy:    &NatPolicy,
	}

	return t.PrefixMap[key], nil
}

// RenamePrefixMap renames an entry in the list PrefixMap within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) RenamePrefixMap(oldK, newK NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key) error {
	if _, ok := t.PrefixMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixMap", newK)
	}

	e, ok := t.PrefixMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixMap", oldK)
	}
	e.SourcePrefix = &newK.SourcePrefix
	e.NatPolicy = &newK.NatPolicy

	t.PrefixMap[newK] = e
	delete(t.PrefixMap, oldK)
	return nil
}

// GetOrCreatePrefixMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetOrCreatePrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap {

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if v, ok := t.PrefixMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixMap(SourcePrefix, NatPolicy)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixMap got unexpected error: %v", err))
	}
	return v
}

// GetPrefixMap retrieves the value with the specified key from
// the PrefixMap map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetPrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if lm, ok := t.PrefixMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) DeletePrefixMap(SourcePrefix string, NatPolicy string) {
	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	delete(t.PrefixMap, key)
}

// AppendPrefixMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct to the
// list PrefixMap of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) AppendPrefixMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key for SourcePrefix")
	}

	if v.NatPolicy == nil {
		return fmt.Errorf("invalid nil key for NatPolicy")
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: *v.SourcePrefix,
		NatPolicy:    *v.NatPolicy,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap)
	}

	if _, ok := t.PrefixMap[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixMap %v", key)
	}

	t.PrefixMap[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PolicyMap {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic/policy-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Map                map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy          *string                                                                                                                                                                                                    `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix       *string                                                                                                                                                                                                    `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key represents the key for list Map of element /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic/policy-map.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) NewMap(From string, To string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map)
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) RenameMap(oldK, newK NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map {

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map struct to the
// list Map of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) AppendMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic/policy-map/map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FirstOutsideAddress *string  `path:"first-outside-address" module:"nokia-conf"`
	From                *string  `path:"from" module:"nokia-conf"`
	To                  *string  `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) ΛListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic/prefix-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Map                map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy          *string                                                                                                                                                                                                    `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix       *string                                                                                                                                                                                                    `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key represents the key for list Map of element /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic/prefix-map.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) NewMap(From string, To string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map)
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) RenameMap(oldK, newK NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map {

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map struct to the
// list Map of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) AppendMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NatPolicy == nil {
		return nil, fmt.Errorf("nil value for key NatPolicy")
	}

	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"nat-policy":    *t.NatPolicy,
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/deterministic/prefix-map/map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FirstOutsideAddress *string  `path:"first-outside-address" module:"nokia-conf"`
	From                *string  `path:"from" module:"nokia-conf"`
	To                  *string  `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) ΛListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/dual-stack-lite/endpoint YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint struct {
	Address                *string                         `path:"address" module:"nokia-conf"`
	ApplyGroups            []string                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                        `path:"apply-groups-exclude" module:"nokia-conf"`
	IpFragmentation        E_NokiaTypesNat_IpFragmentation `path:"ip-fragmentation" module:"nokia-conf"`
	MinFirstFragmentSizeRx *uint32                         `path:"min-first-fragment-size-rx" module:"nokia-conf"`
	Reassembly             *bool                           `path:"reassembly" module:"nokia-conf"`
	TunnelMtu              *uint32                         `path:"tunnel-mtu" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpFragmentation retrieves the value of the leaf IpFragmentation from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFragmentation is set, it can
// safely use t.GetIpFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetIpFragmentation() E_NokiaTypesNat_IpFragmentation {
	if t == nil || t.IpFragmentation == 0 {
		return 0
	}
	return t.IpFragmentation
}

// GetMinFirstFragmentSizeRx retrieves the value of the leaf MinFirstFragmentSizeRx from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinFirstFragmentSizeRx is set, it can
// safely use t.GetMinFirstFragmentSizeRx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinFirstFragmentSizeRx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetMinFirstFragmentSizeRx() uint32 {
	if t == nil || t.MinFirstFragmentSizeRx == nil {
		return 1280
	}
	return *t.MinFirstFragmentSizeRx
}

// GetReassembly retrieves the value of the leaf Reassembly from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reassembly is set, it can
// safely use t.GetReassembly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reassembly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetReassembly() bool {
	if t == nil || t.Reassembly == nil {
		return false
	}
	return *t.Reassembly
}

// GetTunnelMtu retrieves the value of the leaf TunnelMtu from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelMtu is set, it can
// safely use t.GetTunnelMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetTunnelMtu() uint32 {
	if t == nil || t.TunnelMtu == nil {
		return 1500
	}
	return *t.TunnelMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinFirstFragmentSizeRx == nil {
		var v uint32 = 1280
		t.MinFirstFragmentSizeRx = &v
	}
	if t.Reassembly == nil {
		var v bool = false
		t.Reassembly = &v
	}
	if t.TunnelMtu == nil {
		var v uint32 = 1500
		t.TunnelMtu = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_DualStackLite_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/filters YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters struct {
	Downstream *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream `path:"downstream" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) IsYANGGoStruct() {}

// GetOrCreateDownstream retrieves the value of the Downstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) GetOrCreateDownstream() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream {
	if t.Downstream != nil {
		return t.Downstream
	}
	t.Downstream = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream{}
	return t.Downstream
}

// GetDownstream returns the value of the Downstream struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters. If the receiver or the field Downstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) GetDownstream() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream {
	if t != nil && t.Downstream != nil {
		return t.Downstream
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Downstream.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/filters/downstream YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream struct {
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Filters_Downstream) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44 represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44 struct {
	DestinationPrefix  map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix `path:"destination-prefix" module:"nokia-conf"`
	Deterministic      *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic                `path:"deterministic" module:"nokia-conf"`
	MaxSubscriberLimit *uint32                                                                                    `path:"max-subscriber-limit" module:"nokia-conf"`
	NatImport          []string                                                                                   `path:"nat-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) IsYANGGoStruct() {}

// NewDestinationPrefix creates a new entry in the DestinationPrefix list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) NewDestinationPrefix(IpPrefixLength string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationPrefix == nil {
		t.DestinationPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix)
	}

	key := IpPrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationPrefix", key)
	}

	t.DestinationPrefix[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix{
		IpPrefixLength: &IpPrefixLength,
	}

	return t.DestinationPrefix[key], nil
}

// RenameDestinationPrefix renames an entry in the list DestinationPrefix within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) RenameDestinationPrefix(oldK, newK string) error {
	if _, ok := t.DestinationPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationPrefix", newK)
	}

	e, ok := t.DestinationPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationPrefix", oldK)
	}
	e.IpPrefixLength = &newK

	t.DestinationPrefix[newK] = e
	delete(t.DestinationPrefix, oldK)
	return nil
}

// GetOrCreateDestinationPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) GetOrCreateDestinationPrefix(IpPrefixLength string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix {

	key := IpPrefixLength

	if v, ok := t.DestinationPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationPrefix(IpPrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationPrefix got unexpected error: %v", err))
	}
	return v
}

// GetDestinationPrefix retrieves the value with the specified key from
// the DestinationPrefix map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) GetDestinationPrefix(IpPrefixLength string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix {

	if t == nil {
		return nil
	}

	key := IpPrefixLength

	if lm, ok := t.DestinationPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) DeleteDestinationPrefix(IpPrefixLength string) {
	key := IpPrefixLength

	delete(t.DestinationPrefix, key)
}

// AppendDestinationPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix struct to the
// list DestinationPrefix of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) AppendDestinationPrefix(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) error {
	if v.IpPrefixLength == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixLength")
	}

	key := *v.IpPrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationPrefix == nil {
		t.DestinationPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix)
	}

	if _, ok := t.DestinationPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationPrefix %v", key)
	}

	t.DestinationPrefix[key] = v
	return nil
}

// GetOrCreateDeterministic retrieves the value of the Deterministic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) GetOrCreateDeterministic() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic {
	if t.Deterministic != nil {
		return t.Deterministic
	}
	t.Deterministic = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic{}
	return t.Deterministic
}

// GetDeterministic returns the value of the Deterministic struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44. If the receiver or the field Deterministic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) GetDeterministic() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic {
	if t != nil && t.Deterministic != nil {
		return t.Deterministic
	}
	return nil
}

// GetMaxSubscriberLimit retrieves the value of the leaf MaxSubscriberLimit from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSubscriberLimit is set, it can
// safely use t.GetMaxSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) GetMaxSubscriberLimit() uint32 {
	if t == nil || t.MaxSubscriberLimit == nil {
		return 0
	}
	return *t.MaxSubscriberLimit
}

// GetNatImport retrieves the value of the leaf NatImport from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatImport is set, it can
// safely use t.GetNatImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) GetNatImport() []string {
	if t == nil || t.NatImport == nil {
		return nil
	}
	return t.NatImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Deterministic.PopulateDefaults()
	for _, e := range t.DestinationPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/destination-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixLength     *string  `path:"ip-prefix-length" module:"nokia-conf"`
	NatPolicy          *string  `path:"nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefixLength retrieves the value of the leaf IpPrefixLength from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixLength is set, it can
// safely use t.GetIpPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) GetIpPrefixLength() string {
	if t == nil || t.IpPrefixLength == nil {
		return ""
	}
	return *t.IpPrefixLength
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixLength == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixLength")
	}

	return map[string]interface{}{
		"ip-prefix-length": *t.IpPrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_DestinationPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic struct {
	PolicyMap map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap                                                                                   `path:"policy-map" module:"nokia-conf"`
	PrefixMap map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap `path:"prefix-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key represents the key for list PrefixMap of element /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key struct {
	SourcePrefix string `path:"source-prefix"`
	NatPolicy    string `path:"nat-policy"`
}

// NewPolicyMap creates a new entry in the PolicyMap list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) NewPolicyMap(SourcePrefix string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap)
	}

	key := SourcePrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyMap", key)
	}

	t.PolicyMap[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap{
		SourcePrefix: &SourcePrefix,
	}

	return t.PolicyMap[key], nil
}

// RenamePolicyMap renames an entry in the list PolicyMap within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) RenamePolicyMap(oldK, newK string) error {
	if _, ok := t.PolicyMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyMap", newK)
	}

	e, ok := t.PolicyMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyMap", oldK)
	}
	e.SourcePrefix = &newK

	t.PolicyMap[newK] = e
	delete(t.PolicyMap, oldK)
	return nil
}

// GetOrCreatePolicyMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) GetOrCreatePolicyMap(SourcePrefix string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap {

	key := SourcePrefix

	if v, ok := t.PolicyMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyMap(SourcePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyMap got unexpected error: %v", err))
	}
	return v
}

// GetPolicyMap retrieves the value with the specified key from
// the PolicyMap map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) GetPolicyMap(SourcePrefix string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap {

	if t == nil {
		return nil
	}

	key := SourcePrefix

	if lm, ok := t.PolicyMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) DeletePolicyMap(SourcePrefix string) {
	key := SourcePrefix

	delete(t.PolicyMap, key)
}

// AppendPolicyMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct to the
// list PolicyMap of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) AppendPolicyMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key received for SourcePrefix")
	}

	key := *v.SourcePrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap)
	}

	if _, ok := t.PolicyMap[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyMap %v", key)
	}

	t.PolicyMap[key] = v
	return nil
}

// NewPrefixMap creates a new entry in the PrefixMap list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) NewPrefixMap(SourcePrefix string, NatPolicy string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap)
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixMap", key)
	}

	t.PrefixMap[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap{
		SourcePrefix: &SourcePrefix,
		NatPolicy:    &NatPolicy,
	}

	return t.PrefixMap[key], nil
}

// RenamePrefixMap renames an entry in the list PrefixMap within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) RenamePrefixMap(oldK, newK NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key) error {
	if _, ok := t.PrefixMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixMap", newK)
	}

	e, ok := t.PrefixMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixMap", oldK)
	}
	e.SourcePrefix = &newK.SourcePrefix
	e.NatPolicy = &newK.NatPolicy

	t.PrefixMap[newK] = e
	delete(t.PrefixMap, oldK)
	return nil
}

// GetOrCreatePrefixMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) GetOrCreatePrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap {

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if v, ok := t.PrefixMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixMap(SourcePrefix, NatPolicy)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixMap got unexpected error: %v", err))
	}
	return v
}

// GetPrefixMap retrieves the value with the specified key from
// the PrefixMap map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) GetPrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if lm, ok := t.PrefixMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) DeletePrefixMap(SourcePrefix string, NatPolicy string) {
	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	delete(t.PrefixMap, key)
}

// AppendPrefixMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct to the
// list PrefixMap of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) AppendPrefixMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key for SourcePrefix")
	}

	if v.NatPolicy == nil {
		return fmt.Errorf("invalid nil key for NatPolicy")
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: *v.SourcePrefix,
		NatPolicy:    *v.NatPolicy,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap)
	}

	if _, ok := t.PrefixMap[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixMap %v", key)
	}

	t.PrefixMap[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PolicyMap {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic/policy-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Map                map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy          *string                                                                                                                                                                                    `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix       *string                                                                                                                                                                                    `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key represents the key for list Map of element /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic/policy-map.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) NewMap(From string, To string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map)
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) RenameMap(oldK, newK NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map {

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map struct to the
// list Map of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) AppendMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic/policy-map/map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FirstOutsideAddress *string  `path:"first-outside-address" module:"nokia-conf"`
	From                *string  `path:"from" module:"nokia-conf"`
	To                  *string  `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) ΛListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic/prefix-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Map                map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy          *string                                                                                                                                                                                    `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix       *string                                                                                                                                                                                    `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key represents the key for list Map of element /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic/prefix-map.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) NewMap(From string, To string) (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map)
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) RenameMap(oldK, newK NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map {

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetMap(From string, To string) *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map struct to the
// list Map of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) AppendMap(v *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NatPolicy == nil {
		return nil, fmt.Errorf("nil value for key NatPolicy")
	}

	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"nat-policy":    *t.NatPolicy,
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat44/deterministic/prefix-map/map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FirstOutsideAddress *string  `path:"first-outside-address" module:"nokia-conf"`
	From                *string  `path:"from" module:"nokia-conf"`
	To                  *string  `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) ΛListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64 represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat64 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64 struct {
	AdminState               E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups              []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	DropZeroIpv4Checksum     *bool                                                             `path:"drop-zero-ipv4-checksum" module:"nokia-conf"`
	InsertIpv6FragmentHeader *bool                                                             `path:"insert-ipv6-fragment-header" module:"nokia-conf"`
	IpFragmentation          E_NokiaTypesNat_IpFragmentation                                   `path:"ip-fragmentation" module:"nokia-conf"`
	Ipv6Mtu                  *uint32                                                           `path:"ipv6-mtu" module:"nokia-conf"`
	Prefix                   *string                                                           `path:"prefix" module:"nokia-conf"`
	SubscriberPrefixLength   *uint8                                                            `path:"subscriber-prefix-length" module:"nokia-conf"`
	Tos                      *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos `path:"tos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) IsYANGGoStruct() {}

// GetOrCreateTos retrieves the value of the Tos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetOrCreateTos() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos {
	if t.Tos != nil {
		return t.Tos
	}
	t.Tos = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos{}
	return t.Tos
}

// GetTos returns the value of the Tos struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64. If the receiver or the field Tos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetTos() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos {
	if t != nil && t.Tos != nil {
		return t.Tos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropZeroIpv4Checksum retrieves the value of the leaf DropZeroIpv4Checksum from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropZeroIpv4Checksum is set, it can
// safely use t.GetDropZeroIpv4Checksum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropZeroIpv4Checksum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetDropZeroIpv4Checksum() bool {
	if t == nil || t.DropZeroIpv4Checksum == nil {
		return false
	}
	return *t.DropZeroIpv4Checksum
}

// GetInsertIpv6FragmentHeader retrieves the value of the leaf InsertIpv6FragmentHeader from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InsertIpv6FragmentHeader is set, it can
// safely use t.GetInsertIpv6FragmentHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InsertIpv6FragmentHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetInsertIpv6FragmentHeader() bool {
	if t == nil || t.InsertIpv6FragmentHeader == nil {
		return false
	}
	return *t.InsertIpv6FragmentHeader
}

// GetIpFragmentation retrieves the value of the leaf IpFragmentation from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFragmentation is set, it can
// safely use t.GetIpFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetIpFragmentation() E_NokiaTypesNat_IpFragmentation {
	if t == nil || t.IpFragmentation == 0 {
		return 0
	}
	return t.IpFragmentation
}

// GetIpv6Mtu retrieves the value of the leaf Ipv6Mtu from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Mtu is set, it can
// safely use t.GetIpv6Mtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetIpv6Mtu() uint32 {
	if t == nil || t.Ipv6Mtu == nil {
		return 1520
	}
	return *t.Ipv6Mtu
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return "64:ff9b::/96"
	}
	return *t.Prefix
}

// GetSubscriberPrefixLength retrieves the value of the leaf SubscriberPrefixLength from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberPrefixLength is set, it can
// safely use t.GetSubscriberPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) GetSubscriberPrefixLength() uint8 {
	if t == nil || t.SubscriberPrefixLength == nil {
		return 128
	}
	return *t.SubscriberPrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DropZeroIpv4Checksum == nil {
		var v bool = false
		t.DropZeroIpv4Checksum = &v
	}
	if t.InsertIpv6FragmentHeader == nil {
		var v bool = false
		t.InsertIpv6FragmentHeader = &v
	}
	if t.Ipv6Mtu == nil {
		var v uint32 = 1520
		t.Ipv6Mtu = &v
	}
	if t.Prefix == nil {
		var v string = "64:ff9b::/96"
		t.Prefix = &v
	}
	if t.SubscriberPrefixLength == nil {
		var v uint8 = 128
		t.SubscriberPrefixLength = &v
	}
	t.Tos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat64/tos YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos struct {
	Downstream *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream `path:"downstream" module:"nokia-conf"`
	Upstream   *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream   `path:"upstream" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) IsYANGGoStruct() {}

// GetOrCreateDownstream retrieves the value of the Downstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) GetOrCreateDownstream() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream {
	if t.Downstream != nil {
		return t.Downstream
	}
	t.Downstream = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream{}
	return t.Downstream
}

// GetOrCreateUpstream retrieves the value of the Upstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) GetOrCreateUpstream() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream {
	if t.Upstream != nil {
		return t.Upstream
	}
	t.Upstream = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream{}
	return t.Upstream
}

// GetDownstream returns the value of the Downstream struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos. If the receiver or the field Downstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) GetDownstream() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream {
	if t != nil && t.Downstream != nil {
		return t.Downstream
	}
	return nil
}

// GetUpstream returns the value of the Upstream struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos. If the receiver or the field Upstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) GetUpstream() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream {
	if t != nil && t.Upstream != nil {
		return t.Upstream
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Downstream.PopulateDefaults()
	t.Upstream.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat64/tos/downstream YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream struct {
	UseIpv4 *bool `path:"use-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream) IsYANGGoStruct() {
}

// GetUseIpv4 retrieves the value of the leaf UseIpv4 from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseIpv4 is set, it can
// safely use t.GetUseIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream) GetUseIpv4() bool {
	if t == nil || t.UseIpv4 == nil {
		return false
	}
	return *t.UseIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseIpv4 == nil {
		var v bool = false
		t.UseIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Downstream) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/nat64/tos/upstream YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream struct {
	SetTos NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Union `path:"set-tos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream) IsYANGGoStruct() {}

// GetSetTos retrieves the value of the leaf SetTos from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetTos is set, it can
// safely use t.GetSetTos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetTos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream) GetSetTos() NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Union {
	if t == nil || t.SetTos == nil {
		return NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Enum_use_ipv6
	}
	return t.SetTos
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SetTos == nil {
		t.SetTos = NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Enum_use_ipv6
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Nat64_Tos_Upstream) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/redundancy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy struct {
	Peer          *string `path:"peer" module:"nokia-conf"`
	Peer6         *string `path:"peer6" module:"nokia-conf"`
	SteeringRoute *string `path:"steering-route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) IsYANGGoStruct() {}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetPeer6 retrieves the value of the leaf Peer6 from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer6 is set, it can
// safely use t.GetPeer6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) GetPeer6() string {
	if t == nil || t.Peer6 == nil {
		return ""
	}
	return *t.Peer6
}

// GetSteeringRoute retrieves the value of the leaf SteeringRoute from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SteeringRoute is set, it can
// safely use t.GetSteeringRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SteeringRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) GetSteeringRoute() string {
	if t == nil || t.SteeringRoute == nil {
		return ""
	}
	return *t.SteeringRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/subscriber-identification YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Attribute               *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute         `path:"attribute" module:"nokia-conf"`
	Description             *string                                                                                            `path:"description" module:"nokia-conf"`
	DropUnidentifiedTraffic *bool                                                                                              `path:"drop-unidentified-traffic" module:"nokia-conf"`
	RadiusProxyServer       *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer `path:"radius-proxy-server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) IsYANGGoStruct() {
}

// GetOrCreateAttribute retrieves the value of the Attribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetOrCreateAttribute() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute {
	if t.Attribute != nil {
		return t.Attribute
	}
	t.Attribute = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute{}
	return t.Attribute
}

// GetOrCreateRadiusProxyServer retrieves the value of the RadiusProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetOrCreateRadiusProxyServer() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer {
	if t.RadiusProxyServer != nil {
		return t.RadiusProxyServer
	}
	t.RadiusProxyServer = &NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer{}
	return t.RadiusProxyServer
}

// GetAttribute returns the value of the Attribute struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification. If the receiver or the field Attribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetAttribute() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute {
	if t != nil && t.Attribute != nil {
		return t.Attribute
	}
	return nil
}

// GetRadiusProxyServer returns the value of the RadiusProxyServer struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification. If the receiver or the field RadiusProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetRadiusProxyServer() *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer {
	if t != nil && t.RadiusProxyServer != nil {
		return t.RadiusProxyServer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDropUnidentifiedTraffic retrieves the value of the leaf DropUnidentifiedTraffic from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropUnidentifiedTraffic is set, it can
// safely use t.GetDropUnidentifiedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropUnidentifiedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) GetDropUnidentifiedTraffic() bool {
	if t == nil || t.DropUnidentifiedTraffic == nil {
		return false
	}
	return *t.DropUnidentifiedTraffic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DropUnidentifiedTraffic == nil {
		var v bool = false
		t.DropUnidentifiedTraffic = &v
	}
	t.Attribute.PopulateDefaults()
	t.RadiusProxyServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/subscriber-identification/attribute YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute struct {
	Type   E_NokiaTypesNat_NatSubscriberIdentificationAttrType     `path:"type" module:"nokia-conf"`
	Vendor E_NokiaTypesNat_NatSubscriberIdentificationAttrVendorId `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) GetType() E_NokiaTypesNat_NatSubscriberIdentificationAttrType {
	if t == nil || t.Type == 0 {
		return NokiaTypesNat_NatSubscriberIdentificationAttrType_alc_sub_string
	}
	return t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) GetVendor() E_NokiaTypesNat_NatSubscriberIdentificationAttrVendorId {
	if t == nil || t.Vendor == 0 {
		return NokiaTypesNat_NatSubscriberIdentificationAttrVendorId_nokia
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesNat_NatSubscriberIdentificationAttrType_alc_sub_string
	}
	if t.Vendor == 0 {
		t.Vendor = NokiaTypesNat_NatSubscriberIdentificationAttrVendorId_nokia
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer represents the /nokia-conf/configure/service/vprn/nat/inside/large-scale/subscriber-identification/radius-proxy-server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer struct {
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	Server         *string `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) IsYANGGoStruct() {
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer.
func (*NokiaConf_Configure_Service_Vprn_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Map represents the /nokia-conf/configure/service/vprn/nat/map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Map struct {
	MapDomain map[string]*NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain `path:"map-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Map) IsYANGGoStruct() {}

// NewMapDomain creates a new entry in the MapDomain list of the
// NokiaConf_Configure_Service_Vprn_Nat_Map struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) NewMapDomain(DomainName string) (*NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MapDomain == nil {
		t.MapDomain = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain)
	}

	key := DomainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MapDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MapDomain", key)
	}

	t.MapDomain[key] = &NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain{
		DomainName: &DomainName,
	}

	return t.MapDomain[key], nil
}

// RenameMapDomain renames an entry in the list MapDomain within
// the NokiaConf_Configure_Service_Vprn_Nat_Map struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) RenameMapDomain(oldK, newK string) error {
	if _, ok := t.MapDomain[newK]; ok {
		return fmt.Errorf("key %v already exists in MapDomain", newK)
	}

	e, ok := t.MapDomain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MapDomain", oldK)
	}
	e.DomainName = &newK

	t.MapDomain[newK] = e
	delete(t.MapDomain, oldK)
	return nil
}

// GetOrCreateMapDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Map. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) GetOrCreateMapDomain(DomainName string) *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain {

	key := DomainName

	if v, ok := t.MapDomain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMapDomain(DomainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMapDomain got unexpected error: %v", err))
	}
	return v
}

// GetMapDomain retrieves the value with the specified key from
// the MapDomain map field of NokiaConf_Configure_Service_Vprn_Nat_Map. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) GetMapDomain(DomainName string) *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain {

	if t == nil {
		return nil
	}

	key := DomainName

	if lm, ok := t.MapDomain[key]; ok {
		return lm
	}
	return nil
}

// DeleteMapDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Map. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) DeleteMapDomain(DomainName string) {
	key := DomainName

	delete(t.MapDomain, key)
}

// AppendMapDomain appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain struct to the
// list MapDomain of NokiaConf_Configure_Service_Vprn_Nat_Map. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) AppendMapDomain(v *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) error {
	if v.DomainName == nil {
		return fmt.Errorf("invalid nil key received for DomainName")
	}

	key := *v.DomainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MapDomain == nil {
		t.MapDomain = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain)
	}

	if _, ok := t.MapDomain[key]; ok {
		return fmt.Errorf("duplicate key for list MapDomain %v", key)
	}

	t.MapDomain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MapDomain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Map.
func (*NokiaConf_Configure_Service_Vprn_Nat_Map) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain represents the /nokia-conf/configure/service/vprn/nat/map/map-domain YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain struct {
	DomainName *string `path:"domain-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) IsYANGGoStruct() {}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DomainName == nil {
		return nil, fmt.Errorf("nil value for key DomainName")
	}

	return map[string]interface{}{
		"domain-name": *t.DomainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain.
func (*NokiaConf_Configure_Service_Vprn_Nat_Map_MapDomain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside represents the /nokia-conf/configure/service/vprn/nat/outside YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside struct {
	DnatOnly *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly        `path:"dnat-only" module:"nokia-conf"`
	Filters  *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters         `path:"filters" module:"nokia-conf"`
	Mtu      *uint32                                                       `path:"mtu" module:"nokia-conf"`
	Pool     map[string]*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Service_Vprn_Nat_Outside struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) NewPool(Name string) (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Service_Vprn_Nat_Outside struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Outside. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) GetOrCreatePool(Name string) *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Service_Vprn_Nat_Outside. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) GetPool(Name string) *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Outside. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool struct to the
// list Pool of NokiaConf_Configure_Service_Vprn_Nat_Outside. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) AppendPool(v *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateDnatOnly retrieves the value of the DnatOnly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) GetOrCreateDnatOnly() *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly {
	if t.DnatOnly != nil {
		return t.DnatOnly
	}
	t.DnatOnly = &NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly{}
	return t.DnatOnly
}

// GetOrCreateFilters retrieves the value of the Filters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) GetOrCreateFilters() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters {
	if t.Filters != nil {
		return t.Filters
	}
	t.Filters = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters{}
	return t.Filters
}

// GetDnatOnly returns the value of the DnatOnly struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside. If the receiver or the field DnatOnly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) GetDnatOnly() *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly {
	if t != nil && t.DnatOnly != nil {
		return t.DnatOnly
	}
	return nil
}

// GetFilters returns the value of the Filters struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside. If the receiver or the field Filters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) GetFilters() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters {
	if t != nil && t.Filters != nil {
		return t.Filters
	}
	return nil
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Vprn_Nat_Outside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DnatOnly.PopulateDefaults()
	t.Filters.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly represents the /nokia-conf/configure/service/vprn/nat/outside/dnat-only YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly struct {
	RouteLimit *uint32 `path:"route-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly) IsYANGGoStruct() {}

// GetRouteLimit retrieves the value of the leaf RouteLimit from the NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteLimit is set, it can
// safely use t.GetRouteLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly) GetRouteLimit() uint32 {
	if t == nil || t.RouteLimit == nil {
		return 32768
	}
	return *t.RouteLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouteLimit == nil {
		var v uint32 = 32768
		t.RouteLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_DnatOnly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters represents the /nokia-conf/configure/service/vprn/nat/outside/filters YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters struct {
	Downstream *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream `path:"downstream" module:"nokia-conf"`
	Upstream   *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream   `path:"upstream" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) IsYANGGoStruct() {}

// GetOrCreateDownstream retrieves the value of the Downstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) GetOrCreateDownstream() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream {
	if t.Downstream != nil {
		return t.Downstream
	}
	t.Downstream = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream{}
	return t.Downstream
}

// GetOrCreateUpstream retrieves the value of the Upstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) GetOrCreateUpstream() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream {
	if t.Upstream != nil {
		return t.Upstream
	}
	t.Upstream = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream{}
	return t.Upstream
}

// GetDownstream returns the value of the Downstream struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters. If the receiver or the field Downstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) GetDownstream() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream {
	if t != nil && t.Downstream != nil {
		return t.Downstream
	}
	return nil
}

// GetUpstream returns the value of the Upstream struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters. If the receiver or the field Upstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) GetUpstream() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream {
	if t != nil && t.Upstream != nil {
		return t.Upstream
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Downstream.PopulateDefaults()
	t.Upstream.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream represents the /nokia-conf/configure/service/vprn/nat/outside/filters/downstream YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream struct {
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Downstream) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream represents the /nokia-conf/configure/service/vprn/nat/outside/filters/upstream YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream struct {
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Filters_Upstream) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool represents the /nokia-conf/configure/service/vprn/nat/outside/pool YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool struct {
	AddressRange       map[NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key]*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange `path:"address-range" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                                                                            `path:"admin-state" module:"nokia-conf"`
	Applications       *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications                                                                        `path:"applications" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                                                `path:"description" module:"nokia-conf"`
	IcmpEchoReply      *bool                                                                                                                                  `path:"icmp-echo-reply" module:"nokia-conf"`
	L2Aware            *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware                                                                             `path:"l2-aware" module:"nokia-conf"`
	LargeScale         *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale                                                                          `path:"large-scale" module:"nokia-conf"`
	Mode               E_NokiaTypesNat_PoolMode                                                                                                               `path:"mode" module:"nokia-conf"`
	Name               *string                                                                                                                                `path:"name" module:"nokia-conf"`
	NatGroup           *uint32                                                                                                                                `path:"nat-group" module:"nokia-conf"`
	PortForwarding     *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding                                                                      `path:"port-forwarding" module:"nokia-conf"`
	PortReservation    *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation                                                                     `path:"port-reservation" module:"nokia-conf"`
	Type               E_NokiaTypesNat_PoolType                                                                                                               `path:"type" module:"nokia-conf"`
	Watermarks         *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks                                                                          `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
	WlanGwGroup        *uint32                                                                                                                                `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key represents the key for list AddressRange of element /nokia-conf/configure/service/vprn/nat/outside/pool.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewAddressRange creates a new entry in the AddressRange list of the
// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) NewAddressRange(Start string, End string) (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key]*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange)
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressRange", key)
	}

	t.AddressRange[key] = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange{
		Start: &Start,
		End:   &End,
	}

	return t.AddressRange[key], nil
}

// RenameAddressRange renames an entry in the list AddressRange within
// the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) RenameAddressRange(oldK, newK NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key) error {
	if _, ok := t.AddressRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressRange", newK)
	}

	e, ok := t.AddressRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.AddressRange[newK] = e
	delete(t.AddressRange, oldK)
	return nil
}

// GetOrCreateAddressRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetOrCreateAddressRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange {

	key := NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.AddressRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressRange got unexpected error: %v", err))
	}
	return v
}

// GetAddressRange retrieves the value with the specified key from
// the AddressRange map field of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetAddressRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.AddressRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) DeleteAddressRange(Start string, End string) {
	key := NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.AddressRange, key)
}

// AppendAddressRange appends the supplied NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange struct to the
// list AddressRange of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) AppendAddressRange(v *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange_Key]*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange)
	}

	if _, ok := t.AddressRange[key]; ok {
		return fmt.Errorf("duplicate key for list AddressRange %v", key)
	}

	t.AddressRange[key] = v
	return nil
}

// GetOrCreateApplications retrieves the value of the Applications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetOrCreateApplications() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications {
	if t.Applications != nil {
		return t.Applications
	}
	t.Applications = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications{}
	return t.Applications
}

// GetOrCreateL2Aware retrieves the value of the L2Aware field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetOrCreateL2Aware() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware {
	if t.L2Aware != nil {
		return t.L2Aware
	}
	t.L2Aware = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware{}
	return t.L2Aware
}

// GetOrCreateLargeScale retrieves the value of the LargeScale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetOrCreateLargeScale() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale {
	if t.LargeScale != nil {
		return t.LargeScale
	}
	t.LargeScale = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale{}
	return t.LargeScale
}

// GetOrCreatePortForwarding retrieves the value of the PortForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetOrCreatePortForwarding() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding {
	if t.PortForwarding != nil {
		return t.PortForwarding
	}
	t.PortForwarding = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding{}
	return t.PortForwarding
}

// GetOrCreatePortReservation retrieves the value of the PortReservation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetOrCreatePortReservation() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation {
	if t.PortReservation != nil {
		return t.PortReservation
	}
	t.PortReservation = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation{}
	return t.PortReservation
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks{}
	return t.Watermarks
}

// GetApplications returns the value of the Applications struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the receiver or the field Applications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetApplications() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications {
	if t != nil && t.Applications != nil {
		return t.Applications
	}
	return nil
}

// GetL2Aware returns the value of the L2Aware struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the receiver or the field L2Aware is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetL2Aware() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware {
	if t != nil && t.L2Aware != nil {
		return t.L2Aware
	}
	return nil
}

// GetLargeScale returns the value of the LargeScale struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the receiver or the field LargeScale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetLargeScale() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale {
	if t != nil && t.LargeScale != nil {
		return t.LargeScale
	}
	return nil
}

// GetPortForwarding returns the value of the PortForwarding struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the receiver or the field PortForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetPortForwarding() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding {
	if t != nil && t.PortForwarding != nil {
		return t.PortForwarding
	}
	return nil
}

// GetPortReservation returns the value of the PortReservation struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the receiver or the field PortReservation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetPortReservation() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation {
	if t != nil && t.PortReservation != nil {
		return t.PortReservation
	}
	return nil
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIcmpEchoReply retrieves the value of the leaf IcmpEchoReply from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpEchoReply is set, it can
// safely use t.GetIcmpEchoReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpEchoReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetIcmpEchoReply() bool {
	if t == nil || t.IcmpEchoReply == nil {
		return false
	}
	return *t.IcmpEchoReply
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetMode() E_NokiaTypesNat_PoolMode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetType() E_NokiaTypesNat_PoolType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IcmpEchoReply == nil {
		var v bool = false
		t.IcmpEchoReply = &v
	}
	t.Applications.PopulateDefaults()
	t.L2Aware.PopulateDefaults()
	t.LargeScale.PopulateDefaults()
	t.PortForwarding.PopulateDefaults()
	t.PortReservation.PopulateDefaults()
	t.Watermarks.PopulateDefaults()
	for _, e := range t.AddressRange {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange represents the /nokia-conf/configure/service/vprn/nat/outside/pool/address-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	Drain              *bool    `path:"drain" module:"nokia-conf"`
	End                *string  `path:"end" module:"nokia-conf"`
	Start              *string  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_AddressRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications represents the /nokia-conf/configure/service/vprn/nat/outside/pool/applications YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications struct {
	Agnostic *bool `path:"agnostic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications) IsYANGGoStruct() {}

// GetAgnostic retrieves the value of the leaf Agnostic from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Agnostic is set, it can
// safely use t.GetAgnostic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Agnostic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications) GetAgnostic() bool {
	if t == nil || t.Agnostic == nil {
		return false
	}
	return *t.Agnostic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Agnostic == nil {
		var v bool = false
		t.Agnostic = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Applications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware represents the /nokia-conf/configure/service/vprn/nat/outside/pool/l2-aware YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware struct {
	ExternalAssignment *bool                                                                         `path:"external-assignment" module:"nokia-conf"`
	PortBlockExtension *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension `path:"port-block-extension" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) IsYANGGoStruct() {}

// GetOrCreatePortBlockExtension retrieves the value of the PortBlockExtension field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) GetOrCreatePortBlockExtension() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension {
	if t.PortBlockExtension != nil {
		return t.PortBlockExtension
	}
	t.PortBlockExtension = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension{}
	return t.PortBlockExtension
}

// GetPortBlockExtension returns the value of the PortBlockExtension struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware. If the receiver or the field PortBlockExtension is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) GetPortBlockExtension() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension {
	if t != nil && t.PortBlockExtension != nil {
		return t.PortBlockExtension
	}
	return nil
}

// GetExternalAssignment retrieves the value of the leaf ExternalAssignment from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalAssignment is set, it can
// safely use t.GetExternalAssignment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalAssignment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) GetExternalAssignment() bool {
	if t == nil || t.ExternalAssignment == nil {
		return false
	}
	return *t.ExternalAssignment
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExternalAssignment == nil {
		var v bool = false
		t.ExternalAssignment = &v
	}
	t.PortBlockExtension.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension represents the /nokia-conf/configure/service/vprn/nat/outside/pool/l2-aware/port-block-extension YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension struct {
	Ports           *uint32                                                                                  `path:"ports" module:"nokia-conf"`
	Subscriber      *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber `path:"subscriber" module:"nokia-conf"`
	SubscriberLimit *uint32                                                                                  `path:"subscriber-limit" module:"nokia-conf"`
	Watermarks      *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) IsYANGGoStruct() {
}

// GetOrCreateSubscriber retrieves the value of the Subscriber field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetOrCreateSubscriber() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber {
	if t.Subscriber != nil {
		return t.Subscriber
	}
	t.Subscriber = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber{}
	return t.Subscriber
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks{}
	return t.Watermarks
}

// GetSubscriber returns the value of the Subscriber struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension. If the receiver or the field Subscriber is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetSubscriber() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber {
	if t != nil && t.Subscriber != nil {
		return t.Subscriber
	}
	return nil
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetPorts retrieves the value of the leaf Ports from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ports is set, it can
// safely use t.GetPorts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ports == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetPorts() uint32 {
	if t == nil || t.Ports == nil {
		return 0
	}
	return *t.Ports
}

// GetSubscriberLimit retrieves the value of the leaf SubscriberLimit from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberLimit is set, it can
// safely use t.GetSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetSubscriberLimit() uint32 {
	if t == nil || t.SubscriberLimit == nil {
		return 0
	}
	return *t.SubscriberLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Subscriber.PopulateDefaults()
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber represents the /nokia-conf/configure/service/vprn/nat/outside/pool/l2-aware/port-block-extension/subscriber YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber struct {
	Watermarks *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) IsYANGGoStruct() {
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) GetWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks represents the /nokia-conf/configure/service/vprn/nat/outside/pool/l2-aware/port-block-extension/subscriber/watermarks YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks represents the /nokia-conf/configure/service/vprn/nat/outside/pool/l2-aware/port-block-extension/watermarks YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale represents the /nokia-conf/configure/service/vprn/nat/outside/pool/large-scale YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale struct {
	Deterministic   *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic `path:"deterministic" module:"nokia-conf"`
	Redundancy      *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy    `path:"redundancy" module:"nokia-conf"`
	SubscriberLimit *uint32                                                                     `path:"subscriber-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) IsYANGGoStruct() {}

// GetOrCreateDeterministic retrieves the value of the Deterministic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) GetOrCreateDeterministic() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic {
	if t.Deterministic != nil {
		return t.Deterministic
	}
	t.Deterministic = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic{}
	return t.Deterministic
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) GetOrCreateRedundancy() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy{}
	return t.Redundancy
}

// GetDeterministic returns the value of the Deterministic struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale. If the receiver or the field Deterministic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) GetDeterministic() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic {
	if t != nil && t.Deterministic != nil {
		return t.Deterministic
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) GetRedundancy() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetSubscriberLimit retrieves the value of the leaf SubscriberLimit from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberLimit is set, it can
// safely use t.GetSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) GetSubscriberLimit() uint32 {
	if t == nil || t.SubscriberLimit == nil {
		return 0
	}
	return *t.SubscriberLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Deterministic.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic represents the /nokia-conf/configure/service/vprn/nat/outside/pool/large-scale/deterministic YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic struct {
	PortReservation *uint32                                                                                `path:"port-reservation" module:"nokia-conf"`
	Watermarks      *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) GetOrCreateWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) GetWatermarks() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetPortReservation retrieves the value of the leaf PortReservation from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortReservation is set, it can
// safely use t.GetPortReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) GetPortReservation() uint32 {
	if t == nil || t.PortReservation == nil {
		return 0
	}
	return *t.PortReservation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks represents the /nokia-conf/configure/service/vprn/nat/outside/pool/large-scale/deterministic/watermarks YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy represents the /nokia-conf/configure/service/vprn/nat/outside/pool/large-scale/redundancy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy struct {
	AdminState   E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	ExportRoute  *string                                                                         `path:"export-route" module:"nokia-conf"`
	Follow       *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow `path:"follow" module:"nokia-conf"`
	MonitorRoute *string                                                                         `path:"monitor-route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) IsYANGGoStruct() {}

// GetOrCreateFollow retrieves the value of the Follow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) GetOrCreateFollow() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow {
	if t.Follow != nil {
		return t.Follow
	}
	t.Follow = &NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow{}
	return t.Follow
}

// GetFollow returns the value of the Follow struct pointer
// from NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy. If the receiver or the field Follow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) GetFollow() *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow {
	if t != nil && t.Follow != nil {
		return t.Follow
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExportRoute retrieves the value of the leaf ExportRoute from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRoute is set, it can
// safely use t.GetExportRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) GetExportRoute() string {
	if t == nil || t.ExportRoute == nil {
		return ""
	}
	return *t.ExportRoute
}

// GetMonitorRoute retrieves the value of the leaf MonitorRoute from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorRoute is set, it can
// safely use t.GetMonitorRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) GetMonitorRoute() string {
	if t == nil || t.MonitorRoute == nil {
		return ""
	}
	return *t.MonitorRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Follow.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow represents the /nokia-conf/configure/service/vprn/nat/outside/pool/large-scale/redundancy/follow YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_LargeScale_Redundancy_Follow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding represents the /nokia-conf/configure/service/vprn/nat/outside/pool/port-forwarding YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding struct {
	DynamicBlockReservation *bool   `path:"dynamic-block-reservation" module:"nokia-conf"`
	RangeEnd                *uint16 `path:"range-end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) IsYANGGoStruct() {}

// GetDynamicBlockReservation retrieves the value of the leaf DynamicBlockReservation from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicBlockReservation is set, it can
// safely use t.GetDynamicBlockReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicBlockReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) GetDynamicBlockReservation() bool {
	if t == nil || t.DynamicBlockReservation == nil {
		return false
	}
	return *t.DynamicBlockReservation
}

// GetRangeEnd retrieves the value of the leaf RangeEnd from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RangeEnd is set, it can
// safely use t.GetRangeEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RangeEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) GetRangeEnd() uint16 {
	if t == nil || t.RangeEnd == nil {
		return 0
	}
	return *t.RangeEnd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicBlockReservation == nil {
		var v bool = false
		t.DynamicBlockReservation = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortForwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation represents the /nokia-conf/configure/service/vprn/nat/outside/pool/port-reservation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation struct {
	PortBlocks *uint16 `path:"port-blocks" module:"nokia-conf"`
	Ports      *uint16 `path:"ports" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) IsYANGGoStruct() {}

// GetPortBlocks retrieves the value of the leaf PortBlocks from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBlocks is set, it can
// safely use t.GetPortBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBlocks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) GetPortBlocks() uint16 {
	if t == nil || t.PortBlocks == nil {
		return 0
	}
	return *t.PortBlocks
}

// GetPorts retrieves the value of the leaf Ports from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ports is set, it can
// safely use t.GetPorts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ports == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) GetPorts() uint16 {
	if t == nil || t.Ports == nil {
		return 0
	}
	return *t.Ports
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_PortReservation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks represents the /nokia-conf/configure/service/vprn/nat/outside/pool/watermarks YANG schema element.
type NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks.
func (*NokiaConf_Configure_Service_Vprn_Nat_Outside_Pool_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Network represents the /nokia-conf/configure/service/vprn/network YANG schema element.
type NokiaConf_Configure_Service_Vprn_Network struct {
	ApplyGroups        []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vprn_Network_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Network) IsYANGGoStruct() {}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Network) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_Network_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_Network_Ingress{}
	return t.Ingress
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_Network. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Network) GetIngress() *NokiaConf_Configure_Service_Vprn_Network_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Network.
func (*NokiaConf_Configure_Service_Vprn_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface represents the /nokia-conf/configure/service/vprn/network-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	CflowdParameters   *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters `path:"cflowd-parameters" module:"nokia-conf"`
	CpuProtection      *uint32                                                             `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                                             `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress           `path:"egress" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime         `path:"hold-time" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress          `path:"ingress" module:"nokia-conf"`
	IngressStats       *bool                                                               `path:"ingress-stats" module:"nokia-conf"`
	InterfaceName      *string                                                             `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                             `path:"ip-mtu" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4             `path:"ipv4" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag              `path:"lag" module:"nokia-conf"`
	LoadBalancing      *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing    `path:"load-balancing" module:"nokia-conf"`
	Loopback           YANGEmpty                                                           `path:"loopback" module:"nokia-conf"`
	Mac                *string                                                             `path:"mac" module:"nokia-conf"`
	Port               *string                                                             `path:"port" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos              `path:"qos" module:"nokia-conf"`
	TosMarkingState    E_NokiaTypesRouter_TosMarkingState                                  `path:"tos-marking-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface) IsYANGGoStruct() {}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateEgress() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress{}
	return t.Egress
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateLag() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag{}
	return t.Lag
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateLoadBalancing() *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos{}
	return t.Qos
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetCflowdParameters() *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetEgress() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetHoldTime() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetIngress() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetIpv4() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetLag() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetLoadBalancing() *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetQos() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetLoopback() YANGEmpty {
	if t == nil || t.Loopback == false {
		return false
	}
	return t.Loopback
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetPort() string {
	if t == nil || t.Port == nil {
		return ""
	}
	return *t.Port
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Service_Vprn_NetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_trusted
	}
	return t.TosMarkingState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_trusted
	}
	t.CflowdParameters.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_NetworkInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters represents the /nokia-conf/configure/service/vprn/network-interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters struct {
	Sampling map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) IsYANGGoStruct() {}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) NewSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) (*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) RenameSampling(oldK, newK E_NokiaTypesRouter_CflowdSampling) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) GetOrCreateSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) GetSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) DeleteSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling represents the /nokia-conf/configure/service/vprn/network-interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile      NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType       E_NokiaTypesRouter_CflowdSampling                                                               `path:"sampling-type" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) GetSamplingType() E_NokiaTypesRouter_CflowdSampling {
	if t == nil || t.SamplingType == 0 {
		return 0
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress represents the /nokia-conf/configure/service/vprn/network-interface/egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress struct {
	Filter *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter `path:"filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) GetFilter() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter represents the /nokia-conf/configure/service/vprn/network-interface/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime represents the /nokia-conf/configure/service/vprn/network-interface/hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) GetIpv4() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4 represents the /nokia-conf/configure/service/vprn/network-interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/service/vprn/network-interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/service/vprn/network-interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress represents the /nokia-conf/configure/service/vprn/network-interface/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress struct {
	Filter *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter `path:"filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) GetFilter() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter represents the /nokia-conf/configure/service/vprn/network-interface/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4 represents the /nokia-conf/configure/service/vprn/network-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4 struct {
	AllowDirectedBroadcasts *bool                                                                        `path:"allow-directed-broadcasts" module:"nokia-conf"`
	Bfd                     *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd                  `path:"bfd" module:"nokia-conf"`
	Icmp                    *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp                 `path:"icmp" module:"nokia-conf"`
	NeighborDiscovery       *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery    `path:"neighbor-discovery" module:"nokia-conf"`
	Primary                 *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary              `path:"primary" module:"nokia-conf" yangPresence:"true"`
	Secondary               map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary `path:"secondary" module:"nokia-conf"`
	TcpMss                  *uint32                                                                      `path:"tcp-mss" module:"nokia-conf"`
	UrpfCheck               *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck            `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) IsYANGGoStruct() {}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) NewSecondary(Address string) (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary{
		Address: &Address,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.Address = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetOrCreateSecondary(Address string) *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary {

	key := Address

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetSecondary(Address string) *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) DeleteSecondary(Address string) {
	key := Address

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary struct to the
// list Secondary of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) AppendSecondary(v *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary{}
	return t.Primary
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetBfd() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetIcmp() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowDirectedBroadcasts retrieves the value of the leaf AllowDirectedBroadcasts from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDirectedBroadcasts is set, it can
// safely use t.GetAllowDirectedBroadcasts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDirectedBroadcasts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetAllowDirectedBroadcasts() bool {
	if t == nil || t.AllowDirectedBroadcasts == nil {
		return false
	}
	return *t.AllowDirectedBroadcasts
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDirectedBroadcasts == nil {
		var v bool = false
		t.AllowDirectedBroadcasts = &v
	}
	t.Bfd.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                           `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                           `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                           `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                           `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/icmp YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp struct {
	MaskReply    *bool                                                                     `path:"mask-reply" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects    `path:"redirects" module:"nokia-conf"`
	TtlExpired   *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired   `path:"ttl-expired" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) IsYANGGoStruct() {}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetOrCreateParamProblem() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetOrCreateRedirects() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects{}
	return t.Redirects
}

// GetOrCreateTtlExpired retrieves the value of the TtlExpired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetOrCreateTtlExpired() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired {
	if t.TtlExpired != nil {
		return t.TtlExpired
	}
	t.TtlExpired = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired{}
	return t.TtlExpired
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetOrCreateUnreachables() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables{}
	return t.Unreachables
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetParamProblem() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetRedirects() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTtlExpired returns the value of the TtlExpired struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp. If the receiver or the field TtlExpired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetTtlExpired() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired {
	if t != nil && t.TtlExpired != nil {
		return t.TtlExpired
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetUnreachables() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// GetMaskReply retrieves the value of the leaf MaskReply from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskReply is set, it can
// safely use t.GetMaskReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) GetMaskReply() bool {
	if t == nil || t.MaskReply == nil {
		return true
	}
	return *t.MaskReply
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaskReply == nil {
		var v bool = true
		t.MaskReply = &v
	}
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TtlExpired.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/icmp/param-problem YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/icmp/redirects YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/icmp/ttl-expired YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_TtlExpired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/icmp/unreachables YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Icmp_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery struct {
	RetryTimer     *uint32                                                                                             `path:"retry-timer" module:"nokia-conf"`
	StaticNeighbor map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
	Timeout        *uint32                                                                                             `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) NewStaticNeighbor(Ipv4Address string) (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor {

	key := Ipv4Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) GetStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) DeleteStaticNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 50
	}
	return *t.RetryTimer
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RetryTimer == nil {
		var v uint32 = 50
		t.RetryTimer = &v
	}
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	MacAddress         *string  `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary struct {
	Address            *string                                     `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Broadcast          E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	PrefixLength       *uint32                                     `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/secondary YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary struct {
	Address            *string                                     `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Broadcast          E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	IgpInhibit         *bool                                       `path:"igp-inhibit" module:"nokia-conf"`
	PrefixLength       *uint32                                     `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetIgpInhibit retrieves the value of the leaf IgpInhibit from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpInhibit is set, it can
// safely use t.GetIgpInhibit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpInhibit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) GetIgpInhibit() bool {
	if t == nil || t.IgpInhibit == nil {
		return false
	}
	return *t.IgpInhibit
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	if t.IgpInhibit == nil {
		var v bool = false
		t.IgpInhibit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck represents the /nokia-conf/configure/service/vprn/network-interface/ipv4/urpf-check YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Ipv4_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag represents the /nokia-conf/configure/service/vprn/network-interface/lag YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag struct {
	LinkMapProfile *int32                                                             `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) GetPerLinkHash() *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash represents the /nokia-conf/configure/service/vprn/network-interface/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing represents the /nokia-conf/configure/service/vprn/network-interface/load-balancing YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing struct {
	FlowLabelLoadBalancing *bool                               `path:"flow-label-load-balancing" module:"nokia-conf"`
	IpLoadBalancing        E_NokiaTypesRouter_IpLoadBalancing  `path:"ip-load-balancing" module:"nokia-conf"`
	LsrLoadBalancing       E_NokiaTypesRouter_LsrLoadBalancing `path:"lsr-load-balancing" module:"nokia-conf"`
	SpiLoadBalancing       *bool                               `path:"spi-load-balancing" module:"nokia-conf"`
	TeidLoadBalancing      *bool                               `path:"teid-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) IsYANGGoStruct() {}

// GetFlowLabelLoadBalancing retrieves the value of the leaf FlowLabelLoadBalancing from the NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabelLoadBalancing is set, it can
// safely use t.GetFlowLabelLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabelLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) GetFlowLabelLoadBalancing() bool {
	if t == nil || t.FlowLabelLoadBalancing == nil {
		return false
	}
	return *t.FlowLabelLoadBalancing
}

// GetIpLoadBalancing retrieves the value of the leaf IpLoadBalancing from the NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpLoadBalancing is set, it can
// safely use t.GetIpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) GetIpLoadBalancing() E_NokiaTypesRouter_IpLoadBalancing {
	if t == nil || t.IpLoadBalancing == 0 {
		return NokiaTypesRouter_IpLoadBalancing_both
	}
	return t.IpLoadBalancing
}

// GetLsrLoadBalancing retrieves the value of the leaf LsrLoadBalancing from the NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrLoadBalancing is set, it can
// safely use t.GetLsrLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) GetLsrLoadBalancing() E_NokiaTypesRouter_LsrLoadBalancing {
	if t == nil || t.LsrLoadBalancing == 0 {
		return 0
	}
	return t.LsrLoadBalancing
}

// GetSpiLoadBalancing retrieves the value of the leaf SpiLoadBalancing from the NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiLoadBalancing is set, it can
// safely use t.GetSpiLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) GetSpiLoadBalancing() bool {
	if t == nil || t.SpiLoadBalancing == nil {
		return false
	}
	return *t.SpiLoadBalancing
}

// GetTeidLoadBalancing retrieves the value of the leaf TeidLoadBalancing from the NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeidLoadBalancing is set, it can
// safely use t.GetTeidLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeidLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) GetTeidLoadBalancing() bool {
	if t == nil || t.TeidLoadBalancing == nil {
		return false
	}
	return *t.TeidLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowLabelLoadBalancing == nil {
		var v bool = false
		t.FlowLabelLoadBalancing = &v
	}
	if t.IpLoadBalancing == 0 {
		t.IpLoadBalancing = NokiaTypesRouter_IpLoadBalancing_both
	}
	if t.SpiLoadBalancing == nil {
		var v bool = false
		t.SpiLoadBalancing = &v
	}
	if t.TeidLoadBalancing == nil {
		var v bool = false
		t.TeidLoadBalancing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos represents the /nokia-conf/configure/service/vprn/network-interface/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos struct {
	ApplyGroups             []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string `path:"apply-groups-exclude" module:"nokia-conf"`
	EgressInstance          *uint32  `path:"egress-instance" module:"nokia-conf"`
	EgressPortRedirectGroup *string  `path:"egress-port-redirect-group" module:"nokia-conf"`
	IngressFpRedirectGroup  *string  `path:"ingress-fp-redirect-group" module:"nokia-conf"`
	IngressInstance         *uint32  `path:"ingress-instance" module:"nokia-conf"`
	NetworkPolicy           *string  `path:"network-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEgressInstance retrieves the value of the leaf EgressInstance from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressInstance is set, it can
// safely use t.GetEgressInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) GetEgressInstance() uint32 {
	if t == nil || t.EgressInstance == nil {
		return 0
	}
	return *t.EgressInstance
}

// GetEgressPortRedirectGroup retrieves the value of the leaf EgressPortRedirectGroup from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPortRedirectGroup is set, it can
// safely use t.GetEgressPortRedirectGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPortRedirectGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) GetEgressPortRedirectGroup() string {
	if t == nil || t.EgressPortRedirectGroup == nil {
		return ""
	}
	return *t.EgressPortRedirectGroup
}

// GetIngressFpRedirectGroup retrieves the value of the leaf IngressFpRedirectGroup from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressFpRedirectGroup is set, it can
// safely use t.GetIngressFpRedirectGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressFpRedirectGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) GetIngressFpRedirectGroup() string {
	if t == nil || t.IngressFpRedirectGroup == nil {
		return ""
	}
	return *t.IngressFpRedirectGroup
}

// GetIngressInstance retrieves the value of the leaf IngressInstance from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressInstance is set, it can
// safely use t.GetIngressInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) GetIngressInstance() uint32 {
	if t == nil || t.IngressInstance == nil {
		return 0
	}
	return *t.IngressInstance
}

// GetNetworkPolicy retrieves the value of the leaf NetworkPolicy from the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkPolicy is set, it can
// safely use t.GetNetworkPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) GetNetworkPolicy() string {
	if t == nil || t.NetworkPolicy == nil {
		return ""
	}
	return *t.NetworkPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos.
func (*NokiaConf_Configure_Service_Vprn_NetworkInterface_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Network_Ingress represents the /nokia-conf/configure/service/vprn/network/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Network_Ingress struct {
	ClassificationOverride *string                                                  `path:"classification-override" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	UrpfCheck              *bool                                                    `path:"urpf-check" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Network_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Network_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_Network_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) GetFilter() *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_Network_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) GetQos() *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetClassificationOverride retrieves the value of the leaf ClassificationOverride from the NokiaConf_Configure_Service_Vprn_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassificationOverride is set, it can
// safely use t.GetClassificationOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassificationOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) GetClassificationOverride() string {
	if t == nil || t.ClassificationOverride == nil {
		return ""
	}
	return *t.ClassificationOverride
}

// GetUrpfCheck retrieves the value of the leaf UrpfCheck from the NokiaConf_Configure_Service_Vprn_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrpfCheck is set, it can
// safely use t.GetUrpfCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrpfCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) GetUrpfCheck() bool {
	if t == nil || t.UrpfCheck == nil {
		return true
	}
	return *t.UrpfCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Network_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UrpfCheck == nil {
		var v bool = true
		t.UrpfCheck = &v
	}
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Network_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Network_Ingress.
func (*NokiaConf_Configure_Service_Vprn_Network_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter represents the /nokia-conf/configure/service/vprn/network/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vprn_Network_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos represents the /nokia-conf/configure/service/vprn/network/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos struct {
	FpRedirectGroup *string `path:"fp-redirect-group" module:"nokia-conf"`
	Instance        *uint32 `path:"instance" module:"nokia-conf"`
	NetworkPolicy   *string `path:"network-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) IsYANGGoStruct() {}

// GetFpRedirectGroup retrieves the value of the leaf FpRedirectGroup from the NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroup is set, it can
// safely use t.GetFpRedirectGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) GetFpRedirectGroup() string {
	if t == nil || t.FpRedirectGroup == nil {
		return ""
	}
	return *t.FpRedirectGroup
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// GetNetworkPolicy retrieves the value of the leaf NetworkPolicy from the NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkPolicy is set, it can
// safely use t.GetNetworkPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) GetNetworkPolicy() string {
	if t == nil || t.NetworkPolicy == nil {
		return ""
	}
	return *t.NetworkPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vprn_Network_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ntp represents the /nokia-conf/configure/service/vprn/ntp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ntp struct {
	AdminState          E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Authenticate        *bool                                                              `path:"authenticate" module:"nokia-conf"`
	AuthenticationCheck *bool                                                              `path:"authentication-check" module:"nokia-conf"`
	AuthenticationKey   map[uint32]*NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey `path:"authentication-key" module:"nokia-conf"`
	Broadcast           map[string]*NokiaConf_Configure_Service_Vprn_Ntp_Broadcast         `path:"broadcast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ntp) IsYANGGoStruct() {}

// NewAuthenticationKey creates a new entry in the AuthenticationKey list of the
// NokiaConf_Configure_Service_Vprn_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) NewAuthenticationKey(KeyId uint32) (*NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationKey == nil {
		t.AuthenticationKey = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AuthenticationKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AuthenticationKey", key)
	}

	t.AuthenticationKey[key] = &NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey{
		KeyId: &KeyId,
	}

	return t.AuthenticationKey[key], nil
}

// RenameAuthenticationKey renames an entry in the list AuthenticationKey within
// the NokiaConf_Configure_Service_Vprn_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) RenameAuthenticationKey(oldK, newK uint32) error {
	if _, ok := t.AuthenticationKey[newK]; ok {
		return fmt.Errorf("key %v already exists in AuthenticationKey", newK)
	}

	e, ok := t.AuthenticationKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AuthenticationKey", oldK)
	}
	e.KeyId = &newK

	t.AuthenticationKey[newK] = e
	delete(t.AuthenticationKey, oldK)
	return nil
}

// GetOrCreateAuthenticationKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetOrCreateAuthenticationKey(KeyId uint32) *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey {

	key := KeyId

	if v, ok := t.AuthenticationKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAuthenticationKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAuthenticationKey got unexpected error: %v", err))
	}
	return v
}

// GetAuthenticationKey retrieves the value with the specified key from
// the AuthenticationKey map field of NokiaConf_Configure_Service_Vprn_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetAuthenticationKey(KeyId uint32) *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.AuthenticationKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteAuthenticationKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) DeleteAuthenticationKey(KeyId uint32) {
	key := KeyId

	delete(t.AuthenticationKey, key)
}

// AppendAuthenticationKey appends the supplied NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey struct to the
// list AuthenticationKey of NokiaConf_Configure_Service_Vprn_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) AppendAuthenticationKey(v *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationKey == nil {
		t.AuthenticationKey = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey)
	}

	if _, ok := t.AuthenticationKey[key]; ok {
		return fmt.Errorf("duplicate key for list AuthenticationKey %v", key)
	}

	t.AuthenticationKey[key] = v
	return nil
}

// NewBroadcast creates a new entry in the Broadcast list of the
// NokiaConf_Configure_Service_Vprn_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) NewBroadcast(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Ntp_Broadcast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Broadcast == nil {
		t.Broadcast = make(map[string]*NokiaConf_Configure_Service_Vprn_Ntp_Broadcast)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Broadcast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Broadcast", key)
	}

	t.Broadcast[key] = &NokiaConf_Configure_Service_Vprn_Ntp_Broadcast{
		InterfaceName: &InterfaceName,
	}

	return t.Broadcast[key], nil
}

// RenameBroadcast renames an entry in the list Broadcast within
// the NokiaConf_Configure_Service_Vprn_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) RenameBroadcast(oldK, newK string) error {
	if _, ok := t.Broadcast[newK]; ok {
		return fmt.Errorf("key %v already exists in Broadcast", newK)
	}

	e, ok := t.Broadcast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Broadcast", oldK)
	}
	e.InterfaceName = &newK

	t.Broadcast[newK] = e
	delete(t.Broadcast, oldK)
	return nil
}

// GetOrCreateBroadcast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetOrCreateBroadcast(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast {

	key := InterfaceName

	if v, ok := t.Broadcast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBroadcast(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBroadcast got unexpected error: %v", err))
	}
	return v
}

// GetBroadcast retrieves the value with the specified key from
// the Broadcast map field of NokiaConf_Configure_Service_Vprn_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetBroadcast(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Broadcast[key]; ok {
		return lm
	}
	return nil
}

// DeleteBroadcast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) DeleteBroadcast(InterfaceName string) {
	key := InterfaceName

	delete(t.Broadcast, key)
}

// AppendBroadcast appends the supplied NokiaConf_Configure_Service_Vprn_Ntp_Broadcast struct to the
// list Broadcast of NokiaConf_Configure_Service_Vprn_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ntp_Broadcast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) AppendBroadcast(v *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Broadcast == nil {
		t.Broadcast = make(map[string]*NokiaConf_Configure_Service_Vprn_Ntp_Broadcast)
	}

	if _, ok := t.Broadcast[key]; ok {
		return fmt.Errorf("duplicate key for list Broadcast %v", key)
	}

	t.Broadcast[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticate retrieves the value of the leaf Authenticate from the NokiaConf_Configure_Service_Vprn_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authenticate is set, it can
// safely use t.GetAuthenticate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authenticate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetAuthenticate() bool {
	if t == nil || t.Authenticate == nil {
		return false
	}
	return *t.Authenticate
}

// GetAuthenticationCheck retrieves the value of the leaf AuthenticationCheck from the NokiaConf_Configure_Service_Vprn_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationCheck is set, it can
// safely use t.GetAuthenticationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) GetAuthenticationCheck() bool {
	if t == nil || t.AuthenticationCheck == nil {
		return true
	}
	return *t.AuthenticationCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Authenticate == nil {
		var v bool = false
		t.Authenticate = &v
	}
	if t.AuthenticationCheck == nil {
		var v bool = true
		t.AuthenticationCheck = &v
	}
	for _, e := range t.AuthenticationKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Broadcast {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ntp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ntp.
func (*NokiaConf_Configure_Service_Vprn_Ntp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey represents the /nokia-conf/configure/service/vprn/ntp/authentication-key YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Key                *string                                                       `path:"key" module:"nokia-conf"`
	KeyId              *uint32                                                       `path:"key-id" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKey retrieves the value of the leaf Key from the NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) GetType() E_NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey.
func (*NokiaConf_Configure_Service_Vprn_Ntp_AuthenticationKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ntp_Broadcast represents the /nokia-conf/configure/service/vprn/ntp/broadcast YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ntp_Broadcast struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	KeyId              *uint32  `path:"key-id" module:"nokia-conf"`
	Ttl                *uint32  `path:"ttl" module:"nokia-conf"`
	Version            *uint32  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ntp_Broadcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 127
	}
	return *t.Ttl
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ttl == nil {
		var v uint32 = 127
		t.Ttl = &v
	}
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ntp_Broadcast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ntp_Broadcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ntp_Broadcast.
func (*NokiaConf_Configure_Service_Vprn_Ntp_Broadcast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf represents the /nokia-conf/configure/service/vprn/ospf YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf struct {
	AdminState                E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability E_NokiaTypesOspf_AdvertiseRouterCapabilityType            `path:"advertise-router-capability" module:"nokia-conf"`
	ApplyGroups               []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Area                      map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area    `path:"area" module:"nokia-conf"`
	CompatibleRfc1583         *bool                                                     `path:"compatible-rfc1583" module:"nokia-conf"`
	ExportLimit               *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit        `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy              []string                                                  `path:"export-policy" module:"nokia-conf"`
	ExternalDbOverflow        *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow `path:"external-db-overflow" module:"nokia-conf" yangPresence:"true"`
	ExternalPreference        *int32                                                    `path:"external-preference" module:"nokia-conf"`
	GracefulRestart           *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart    `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	IgnoreDnBit               *bool                                                     `path:"ignore-dn-bit" module:"nokia-conf"`
	ImportPolicy              []string                                                  `path:"import-policy" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate  `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	MulticastImport           *bool                                                     `path:"multicast-import" module:"nokia-conf"`
	OspfInstance              *uint32                                                   `path:"ospf-instance" module:"nokia-conf"`
	Overload                  *bool                                                     `path:"overload" module:"nokia-conf"`
	OverloadIncludeExt_1      *bool                                                     `path:"overload-include-ext-1" module:"nokia-conf"`
	OverloadIncludeExt_2      *bool                                                     `path:"overload-include-ext-2" module:"nokia-conf"`
	OverloadIncludeStub       *bool                                                     `path:"overload-include-stub" module:"nokia-conf"`
	OverloadOnBoot            *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot     `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	Preference                *int32                                                    `path:"preference" module:"nokia-conf"`
	ReferenceBandwidth        *uint64                                                   `path:"reference-bandwidth" module:"nokia-conf"`
	RibPriority               *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority        `path:"rib-priority" module:"nokia-conf"`
	RouterId                  *string                                                   `path:"router-id" module:"nokia-conf"`
	RtrAdvLsaLimit            *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit     `path:"rtr-adv-lsa-limit" module:"nokia-conf" yangPresence:"true"`
	SuperBackbone             *bool                                                     `path:"super-backbone" module:"nokia-conf"`
	SuppressDnBit             *bool                                                     `path:"suppress-dn-bit" module:"nokia-conf"`
	Timers                    *NokiaConf_Configure_Service_Vprn_Ospf_Timers             `path:"timers" module:"nokia-conf"`
	UnicastImport             *bool                                                     `path:"unicast-import" module:"nokia-conf"`
	VpnDomain                 *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain          `path:"vpn-domain" module:"nokia-conf" yangPresence:"true"`
	VpnTag                    *uint32                                                   `path:"vpn-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf) IsYANGGoStruct() {}

// NewArea creates a new entry in the Area list of the
// NokiaConf_Configure_Service_Vprn_Ospf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) NewArea(AreaId string) (*NokiaConf_Configure_Service_Vprn_Ospf_Area, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area)
	}

	key := AreaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Area[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Area", key)
	}

	t.Area[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area{
		AreaId: &AreaId,
	}

	return t.Area[key], nil
}

// RenameArea renames an entry in the list Area within
// the NokiaConf_Configure_Service_Vprn_Ospf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) RenameArea(oldK, newK string) error {
	if _, ok := t.Area[newK]; ok {
		return fmt.Errorf("key %v already exists in Area", newK)
	}

	e, ok := t.Area[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Area", oldK)
	}
	e.AreaId = &newK

	t.Area[newK] = e
	delete(t.Area, oldK)
	return nil
}

// GetOrCreateArea retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateArea(AreaId string) *NokiaConf_Configure_Service_Vprn_Ospf_Area {

	key := AreaId

	if v, ok := t.Area[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArea(AreaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArea got unexpected error: %v", err))
	}
	return v
}

// GetArea retrieves the value with the specified key from
// the Area map field of NokiaConf_Configure_Service_Vprn_Ospf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetArea(AreaId string) *NokiaConf_Configure_Service_Vprn_Ospf_Area {

	if t == nil {
		return nil
	}

	key := AreaId

	if lm, ok := t.Area[key]; ok {
		return lm
	}
	return nil
}

// DeleteArea deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) DeleteArea(AreaId string) {
	key := AreaId

	delete(t.Area, key)
}

// AppendArea appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area struct to the
// list Area of NokiaConf_Configure_Service_Vprn_Ospf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) AppendArea(v *NokiaConf_Configure_Service_Vprn_Ospf_Area) error {
	if v.AreaId == nil {
		return fmt.Errorf("invalid nil key received for AreaId")
	}

	key := *v.AreaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area)
	}

	if _, ok := t.Area[key]; ok {
		return fmt.Errorf("duplicate key for list Area %v", key)
	}

	t.Area[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateExportLimit() *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateExternalDbOverflow retrieves the value of the ExternalDbOverflow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateExternalDbOverflow() *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow {
	if t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	t.ExternalDbOverflow = &NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow{}
	return t.ExternalDbOverflow
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateGracefulRestart() *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreateRibPriority retrieves the value of the RibPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateRibPriority() *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority {
	if t.RibPriority != nil {
		return t.RibPriority
	}
	t.RibPriority = &NokiaConf_Configure_Service_Vprn_Ospf_RibPriority{}
	return t.RibPriority
}

// GetOrCreateRtrAdvLsaLimit retrieves the value of the RtrAdvLsaLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateRtrAdvLsaLimit() *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit {
	if t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	t.RtrAdvLsaLimit = &NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit{}
	return t.RtrAdvLsaLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Ospf_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Ospf_Timers{}
	return t.Timers
}

// GetOrCreateVpnDomain retrieves the value of the VpnDomain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOrCreateVpnDomain() *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain {
	if t.VpnDomain != nil {
		return t.VpnDomain
	}
	t.VpnDomain = &NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain{}
	return t.VpnDomain
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetExportLimit() *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetExternalDbOverflow returns the value of the ExternalDbOverflow struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field ExternalDbOverflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetExternalDbOverflow() *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow {
	if t != nil && t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetGracefulRestart() *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOverloadOnBoot() *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetRibPriority returns the value of the RibPriority struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field RibPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetRibPriority() *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority {
	if t != nil && t.RibPriority != nil {
		return t.RibPriority
	}
	return nil
}

// GetRtrAdvLsaLimit returns the value of the RtrAdvLsaLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field RtrAdvLsaLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetRtrAdvLsaLimit() *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit {
	if t != nil && t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetTimers() *NokiaConf_Configure_Service_Vprn_Ospf_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetVpnDomain returns the value of the VpnDomain struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf. If the receiver or the field VpnDomain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetVpnDomain() *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain {
	if t != nil && t.VpnDomain != nil {
		return t.VpnDomain
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetAdvertiseRouterCapability() E_NokiaTypesOspf_AdvertiseRouterCapabilityType {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	return t.AdvertiseRouterCapability
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCompatibleRfc1583 retrieves the value of the leaf CompatibleRfc1583 from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompatibleRfc1583 is set, it can
// safely use t.GetCompatibleRfc1583() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompatibleRfc1583 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetCompatibleRfc1583() bool {
	if t == nil || t.CompatibleRfc1583 == nil {
		return true
	}
	return *t.CompatibleRfc1583
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetExternalPreference() int32 {
	if t == nil || t.ExternalPreference == nil {
		return 150
	}
	return *t.ExternalPreference
}

// GetIgnoreDnBit retrieves the value of the leaf IgnoreDnBit from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDnBit is set, it can
// safely use t.GetIgnoreDnBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDnBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetIgnoreDnBit() bool {
	if t == nil || t.IgnoreDnBit == nil {
		return false
	}
	return *t.IgnoreDnBit
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMulticastImport retrieves the value of the leaf MulticastImport from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastImport is set, it can
// safely use t.GetMulticastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetMulticastImport() bool {
	if t == nil || t.MulticastImport == nil {
		return false
	}
	return *t.MulticastImport
}

// GetOspfInstance retrieves the value of the leaf OspfInstance from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfInstance is set, it can
// safely use t.GetOspfInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOspfInstance() uint32 {
	if t == nil || t.OspfInstance == nil {
		return 0
	}
	return *t.OspfInstance
}

// GetOverload retrieves the value of the leaf Overload from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overload is set, it can
// safely use t.GetOverload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOverload() bool {
	if t == nil || t.Overload == nil {
		return false
	}
	return *t.Overload
}

// GetOverloadIncludeExt_1 retrieves the value of the leaf OverloadIncludeExt_1 from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_1 is set, it can
// safely use t.GetOverloadIncludeExt_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOverloadIncludeExt_1() bool {
	if t == nil || t.OverloadIncludeExt_1 == nil {
		return false
	}
	return *t.OverloadIncludeExt_1
}

// GetOverloadIncludeExt_2 retrieves the value of the leaf OverloadIncludeExt_2 from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_2 is set, it can
// safely use t.GetOverloadIncludeExt_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOverloadIncludeExt_2() bool {
	if t == nil || t.OverloadIncludeExt_2 == nil {
		return false
	}
	return *t.OverloadIncludeExt_2
}

// GetOverloadIncludeStub retrieves the value of the leaf OverloadIncludeStub from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeStub is set, it can
// safely use t.GetOverloadIncludeStub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeStub == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetOverloadIncludeStub() bool {
	if t == nil || t.OverloadIncludeStub == nil {
		return false
	}
	return *t.OverloadIncludeStub
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetPreference() int32 {
	if t == nil || t.Preference == nil {
		return 10
	}
	return *t.Preference
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 100000000
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetSuperBackbone retrieves the value of the leaf SuperBackbone from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuperBackbone is set, it can
// safely use t.GetSuperBackbone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuperBackbone == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetSuperBackbone() bool {
	if t == nil || t.SuperBackbone == nil {
		return false
	}
	return *t.SuperBackbone
}

// GetSuppressDnBit retrieves the value of the leaf SuppressDnBit from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressDnBit is set, it can
// safely use t.GetSuppressDnBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressDnBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetSuppressDnBit() bool {
	if t == nil || t.SuppressDnBit == nil {
		return false
	}
	return *t.SuppressDnBit
}

// GetUnicastImport retrieves the value of the leaf UnicastImport from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastImport is set, it can
// safely use t.GetUnicastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetUnicastImport() bool {
	if t == nil || t.UnicastImport == nil {
		return true
	}
	return *t.UnicastImport
}

// GetVpnTag retrieves the value of the leaf VpnTag from the NokiaConf_Configure_Service_Vprn_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnTag is set, it can
// safely use t.GetVpnTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) GetVpnTag() uint32 {
	if t == nil || t.VpnTag == nil {
		return 0
	}
	return *t.VpnTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvertiseRouterCapability == 0 {
		t.AdvertiseRouterCapability = NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	if t.CompatibleRfc1583 == nil {
		var v bool = true
		t.CompatibleRfc1583 = &v
	}
	if t.ExternalPreference == nil {
		var v int32 = 150
		t.ExternalPreference = &v
	}
	if t.IgnoreDnBit == nil {
		var v bool = false
		t.IgnoreDnBit = &v
	}
	if t.MulticastImport == nil {
		var v bool = false
		t.MulticastImport = &v
	}
	if t.Overload == nil {
		var v bool = false
		t.Overload = &v
	}
	if t.OverloadIncludeExt_1 == nil {
		var v bool = false
		t.OverloadIncludeExt_1 = &v
	}
	if t.OverloadIncludeExt_2 == nil {
		var v bool = false
		t.OverloadIncludeExt_2 = &v
	}
	if t.OverloadIncludeStub == nil {
		var v bool = false
		t.OverloadIncludeStub = &v
	}
	if t.Preference == nil {
		var v int32 = 10
		t.Preference = &v
	}
	if t.ReferenceBandwidth == nil {
		var v uint64 = 100000000
		t.ReferenceBandwidth = &v
	}
	if t.SuperBackbone == nil {
		var v bool = false
		t.SuperBackbone = &v
	}
	if t.SuppressDnBit == nil {
		var v bool = false
		t.SuppressDnBit = &v
	}
	if t.UnicastImport == nil {
		var v bool = true
		t.UnicastImport = &v
	}
	if t.VpnTag == nil {
		var v uint32 = 0
		t.VpnTag = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.ExternalDbOverflow.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.RibPriority.PopulateDefaults()
	t.RtrAdvLsaLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.VpnDomain.PopulateDefaults()
	for _, e := range t.Area {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OspfInstance == nil {
		return nil, fmt.Errorf("nil value for key OspfInstance")
	}

	return map[string]interface{}{
		"ospf-instance": *t.OspfInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf.
func (*NokiaConf_Configure_Service_Vprn_Ospf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3 represents the /nokia-conf/configure/service/vprn/ospf3 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3 struct {
	AdminState                E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability E_NokiaTypesOspf_AdvertiseRouterCapabilityType             `path:"advertise-router-capability" module:"nokia-conf"`
	ApplyGroups               []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Area                      map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area    `path:"area" module:"nokia-conf"`
	ExportLimit               *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit        `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy              []string                                                   `path:"export-policy" module:"nokia-conf"`
	ExternalDbOverflow        *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow `path:"external-db-overflow" module:"nokia-conf" yangPresence:"true"`
	ExternalPreference        *int32                                                     `path:"external-preference" module:"nokia-conf"`
	GracefulRestart           *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart    `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	IgnoreDnBit               *bool                                                      `path:"ignore-dn-bit" module:"nokia-conf"`
	ImportPolicy              []string                                                   `path:"import-policy" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate  `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	MulticastImport           *bool                                                      `path:"multicast-import" module:"nokia-conf"`
	OspfInstance              *uint32                                                    `path:"ospf-instance" module:"nokia-conf"`
	Overload                  *bool                                                      `path:"overload" module:"nokia-conf"`
	OverloadIncludeExt_1      *bool                                                      `path:"overload-include-ext-1" module:"nokia-conf"`
	OverloadIncludeExt_2      *bool                                                      `path:"overload-include-ext-2" module:"nokia-conf"`
	OverloadIncludeStub       *bool                                                      `path:"overload-include-stub" module:"nokia-conf"`
	OverloadOnBoot            *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot     `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	Preference                *int32                                                     `path:"preference" module:"nokia-conf"`
	ReferenceBandwidth        *uint64                                                    `path:"reference-bandwidth" module:"nokia-conf"`
	RibPriority               *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority        `path:"rib-priority" module:"nokia-conf"`
	RouterId                  *string                                                    `path:"router-id" module:"nokia-conf"`
	RtrAdvLsaLimit            *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit     `path:"rtr-adv-lsa-limit" module:"nokia-conf" yangPresence:"true"`
	SuppressDnBit             *bool                                                      `path:"suppress-dn-bit" module:"nokia-conf"`
	Timers                    *NokiaConf_Configure_Service_Vprn_Ospf3_Timers             `path:"timers" module:"nokia-conf"`
	UnicastImport             *bool                                                      `path:"unicast-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3) IsYANGGoStruct() {}

// NewArea creates a new entry in the Area list of the
// NokiaConf_Configure_Service_Vprn_Ospf3 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) NewArea(AreaId string) (*NokiaConf_Configure_Service_Vprn_Ospf3_Area, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area)
	}

	key := AreaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Area[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Area", key)
	}

	t.Area[key] = &NokiaConf_Configure_Service_Vprn_Ospf3_Area{
		AreaId: &AreaId,
	}

	return t.Area[key], nil
}

// RenameArea renames an entry in the list Area within
// the NokiaConf_Configure_Service_Vprn_Ospf3 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) RenameArea(oldK, newK string) error {
	if _, ok := t.Area[newK]; ok {
		return fmt.Errorf("key %v already exists in Area", newK)
	}

	e, ok := t.Area[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Area", oldK)
	}
	e.AreaId = &newK

	t.Area[newK] = e
	delete(t.Area, oldK)
	return nil
}

// GetOrCreateArea retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateArea(AreaId string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area {

	key := AreaId

	if v, ok := t.Area[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArea(AreaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArea got unexpected error: %v", err))
	}
	return v
}

// GetArea retrieves the value with the specified key from
// the Area map field of NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetArea(AreaId string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area {

	if t == nil {
		return nil
	}

	key := AreaId

	if lm, ok := t.Area[key]; ok {
		return lm
	}
	return nil
}

// DeleteArea deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) DeleteArea(AreaId string) {
	key := AreaId

	delete(t.Area, key)
}

// AppendArea appends the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area struct to the
// list Area of NokiaConf_Configure_Service_Vprn_Ospf3. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) AppendArea(v *NokiaConf_Configure_Service_Vprn_Ospf3_Area) error {
	if v.AreaId == nil {
		return fmt.Errorf("invalid nil key received for AreaId")
	}

	key := *v.AreaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area)
	}

	if _, ok := t.Area[key]; ok {
		return fmt.Errorf("duplicate key for list Area %v", key)
	}

	t.Area[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateExportLimit() *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateExternalDbOverflow retrieves the value of the ExternalDbOverflow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateExternalDbOverflow() *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow {
	if t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	t.ExternalDbOverflow = &NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow{}
	return t.ExternalDbOverflow
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateGracefulRestart() *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreateRibPriority retrieves the value of the RibPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateRibPriority() *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority {
	if t.RibPriority != nil {
		return t.RibPriority
	}
	t.RibPriority = &NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority{}
	return t.RibPriority
}

// GetOrCreateRtrAdvLsaLimit retrieves the value of the RtrAdvLsaLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateRtrAdvLsaLimit() *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit {
	if t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	t.RtrAdvLsaLimit = &NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit{}
	return t.RtrAdvLsaLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Ospf3_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Ospf3_Timers{}
	return t.Timers
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetExportLimit() *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetExternalDbOverflow returns the value of the ExternalDbOverflow struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field ExternalDbOverflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetExternalDbOverflow() *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow {
	if t != nil && t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetGracefulRestart() *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOverloadOnBoot() *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetRibPriority returns the value of the RibPriority struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field RibPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetRibPriority() *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority {
	if t != nil && t.RibPriority != nil {
		return t.RibPriority
	}
	return nil
}

// GetRtrAdvLsaLimit returns the value of the RtrAdvLsaLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field RtrAdvLsaLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetRtrAdvLsaLimit() *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit {
	if t != nil && t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetTimers() *NokiaConf_Configure_Service_Vprn_Ospf3_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetAdvertiseRouterCapability() E_NokiaTypesOspf_AdvertiseRouterCapabilityType {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	return t.AdvertiseRouterCapability
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetExternalPreference() int32 {
	if t == nil || t.ExternalPreference == nil {
		return 150
	}
	return *t.ExternalPreference
}

// GetIgnoreDnBit retrieves the value of the leaf IgnoreDnBit from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDnBit is set, it can
// safely use t.GetIgnoreDnBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDnBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetIgnoreDnBit() bool {
	if t == nil || t.IgnoreDnBit == nil {
		return false
	}
	return *t.IgnoreDnBit
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMulticastImport retrieves the value of the leaf MulticastImport from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastImport is set, it can
// safely use t.GetMulticastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetMulticastImport() bool {
	if t == nil || t.MulticastImport == nil {
		return false
	}
	return *t.MulticastImport
}

// GetOspfInstance retrieves the value of the leaf OspfInstance from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfInstance is set, it can
// safely use t.GetOspfInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOspfInstance() uint32 {
	if t == nil || t.OspfInstance == nil {
		return 0
	}
	return *t.OspfInstance
}

// GetOverload retrieves the value of the leaf Overload from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overload is set, it can
// safely use t.GetOverload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOverload() bool {
	if t == nil || t.Overload == nil {
		return false
	}
	return *t.Overload
}

// GetOverloadIncludeExt_1 retrieves the value of the leaf OverloadIncludeExt_1 from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_1 is set, it can
// safely use t.GetOverloadIncludeExt_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOverloadIncludeExt_1() bool {
	if t == nil || t.OverloadIncludeExt_1 == nil {
		return false
	}
	return *t.OverloadIncludeExt_1
}

// GetOverloadIncludeExt_2 retrieves the value of the leaf OverloadIncludeExt_2 from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_2 is set, it can
// safely use t.GetOverloadIncludeExt_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOverloadIncludeExt_2() bool {
	if t == nil || t.OverloadIncludeExt_2 == nil {
		return false
	}
	return *t.OverloadIncludeExt_2
}

// GetOverloadIncludeStub retrieves the value of the leaf OverloadIncludeStub from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeStub is set, it can
// safely use t.GetOverloadIncludeStub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeStub == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetOverloadIncludeStub() bool {
	if t == nil || t.OverloadIncludeStub == nil {
		return false
	}
	return *t.OverloadIncludeStub
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetPreference() int32 {
	if t == nil || t.Preference == nil {
		return 10
	}
	return *t.Preference
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 100000000
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetSuppressDnBit retrieves the value of the leaf SuppressDnBit from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressDnBit is set, it can
// safely use t.GetSuppressDnBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressDnBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetSuppressDnBit() bool {
	if t == nil || t.SuppressDnBit == nil {
		return false
	}
	return *t.SuppressDnBit
}

// GetUnicastImport retrieves the value of the leaf UnicastImport from the NokiaConf_Configure_Service_Vprn_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastImport is set, it can
// safely use t.GetUnicastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) GetUnicastImport() bool {
	if t == nil || t.UnicastImport == nil {
		return true
	}
	return *t.UnicastImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvertiseRouterCapability == 0 {
		t.AdvertiseRouterCapability = NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	if t.ExternalPreference == nil {
		var v int32 = 150
		t.ExternalPreference = &v
	}
	if t.IgnoreDnBit == nil {
		var v bool = false
		t.IgnoreDnBit = &v
	}
	if t.MulticastImport == nil {
		var v bool = false
		t.MulticastImport = &v
	}
	if t.Overload == nil {
		var v bool = false
		t.Overload = &v
	}
	if t.OverloadIncludeExt_1 == nil {
		var v bool = false
		t.OverloadIncludeExt_1 = &v
	}
	if t.OverloadIncludeExt_2 == nil {
		var v bool = false
		t.OverloadIncludeExt_2 = &v
	}
	if t.OverloadIncludeStub == nil {
		var v bool = false
		t.OverloadIncludeStub = &v
	}
	if t.Preference == nil {
		var v int32 = 10
		t.Preference = &v
	}
	if t.ReferenceBandwidth == nil {
		var v uint64 = 100000000
		t.ReferenceBandwidth = &v
	}
	if t.SuppressDnBit == nil {
		var v bool = false
		t.SuppressDnBit = &v
	}
	if t.UnicastImport == nil {
		var v bool = true
		t.UnicastImport = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.ExternalDbOverflow.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.RibPriority.PopulateDefaults()
	t.RtrAdvLsaLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Area {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf3 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OspfInstance == nil {
		return nil, fmt.Errorf("nil value for key OspfInstance")
	}

	return map[string]interface{}{
		"ospf-instance": *t.OspfInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3.
func (*NokiaConf_Configure_Service_Vprn_Ospf3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area represents the /nokia-conf/configure/service/vprn/ospf3/area YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area struct {
	AdvertiseRouterCapability *bool                                                                                                                    `path:"advertise-router-capability" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	AreaId                    *string                                                                                                                  `path:"area-id" module:"nokia-conf"`
	AreaRange                 map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange                                                        `path:"area-range" module:"nokia-conf"`
	BlackholeAggregate        *bool                                                                                                                    `path:"blackhole-aggregate" module:"nokia-conf"`
	ExportPolicy              []string                                                                                                                 `path:"export-policy" module:"nokia-conf"`
	ImportPolicy              []string                                                                                                                 `path:"import-policy" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface                                                        `path:"interface" module:"nokia-conf"`
	KeyRolloverInterval       *uint32                                                                                                                  `path:"key-rollover-interval" module:"nokia-conf"`
	LoopfreeAlternateExclude  *bool                                                                                                                    `path:"loopfree-alternate-exclude" module:"nokia-conf"`
	Nssa                      *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa                                                                        `path:"nssa" module:"nokia-conf" yangPresence:"true"`
	Stub                      *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub                                                                        `path:"stub" module:"nokia-conf" yangPresence:"true"`
	VirtualLink               map[NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink `path:"virtual-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key represents the key for list VirtualLink of element /nokia-conf/configure/service/vprn/ospf3/area.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key struct {
	RouterId    string `path:"router-id"`
	TransitArea string `path:"transit-area"`
}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Service_Vprn_Ospf3_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Service_Vprn_Ospf3_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) AppendAreaRange(v *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Ospf3_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Ospf3_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewVirtualLink creates a new entry in the VirtualLink list of the
// NokiaConf_Configure_Service_Vprn_Ospf3_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) NewVirtualLink(RouterId string, TransitArea string) (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink)
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualLink", key)
	}

	t.VirtualLink[key] = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink{
		RouterId:    &RouterId,
		TransitArea: &TransitArea,
	}

	return t.VirtualLink[key], nil
}

// RenameVirtualLink renames an entry in the list VirtualLink within
// the NokiaConf_Configure_Service_Vprn_Ospf3_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) RenameVirtualLink(oldK, newK NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key) error {
	if _, ok := t.VirtualLink[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualLink", newK)
	}

	e, ok := t.VirtualLink[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualLink", oldK)
	}
	e.RouterId = &newK.RouterId
	e.TransitArea = &newK.TransitArea

	t.VirtualLink[newK] = e
	delete(t.VirtualLink, oldK)
	return nil
}

// GetOrCreateVirtualLink retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetOrCreateVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink {

	key := NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if v, ok := t.VirtualLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualLink(RouterId, TransitArea)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualLink got unexpected error: %v", err))
	}
	return v
}

// GetVirtualLink retrieves the value with the specified key from
// the VirtualLink map field of NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if lm, ok := t.VirtualLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualLink deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) DeleteVirtualLink(RouterId string, TransitArea string) {
	key := NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	delete(t.VirtualLink, key)
}

// AppendVirtualLink appends the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink struct to the
// list VirtualLink of NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) AppendVirtualLink(v *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) error {
	if v.RouterId == nil {
		return fmt.Errorf("invalid nil key for RouterId")
	}

	if v.TransitArea == nil {
		return fmt.Errorf("invalid nil key for TransitArea")
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key{
		RouterId:    *v.RouterId,
		TransitArea: *v.TransitArea,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink)
	}

	if _, ok := t.VirtualLink[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualLink %v", key)
	}

	t.VirtualLink[key] = v
	return nil
}

// GetOrCreateNssa retrieves the value of the Nssa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetOrCreateNssa() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa {
	if t.Nssa != nil {
		return t.Nssa
	}
	t.Nssa = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa{}
	return t.Nssa
}

// GetOrCreateStub retrieves the value of the Stub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetOrCreateStub() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub {
	if t.Stub != nil {
		return t.Stub
	}
	t.Stub = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub{}
	return t.Stub
}

// GetNssa returns the value of the Nssa struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the receiver or the field Nssa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetNssa() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa {
	if t != nil && t.Nssa != nil {
		return t.Nssa
	}
	return nil
}

// GetStub returns the value of the Stub struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area. If the receiver or the field Stub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetStub() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub {
	if t != nil && t.Stub != nil {
		return t.Stub
	}
	return nil
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAreaId retrieves the value of the leaf AreaId from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaId is set, it can
// safely use t.GetAreaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetAreaId() string {
	if t == nil || t.AreaId == nil {
		return ""
	}
	return *t.AreaId
}

// GetBlackholeAggregate retrieves the value of the leaf BlackholeAggregate from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackholeAggregate is set, it can
// safely use t.GetBlackholeAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackholeAggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetBlackholeAggregate() bool {
	if t == nil || t.BlackholeAggregate == nil {
		return true
	}
	return *t.BlackholeAggregate
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetKeyRolloverInterval retrieves the value of the leaf KeyRolloverInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyRolloverInterval is set, it can
// safely use t.GetKeyRolloverInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyRolloverInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetKeyRolloverInterval() uint32 {
	if t == nil || t.KeyRolloverInterval == nil {
		return 10
	}
	return *t.KeyRolloverInterval
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.BlackholeAggregate == nil {
		var v bool = true
		t.BlackholeAggregate = &v
	}
	if t.KeyRolloverInterval == nil {
		var v uint32 = 10
		t.KeyRolloverInterval = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	t.Nssa.PopulateDefaults()
	t.Stub.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.VirtualLink {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf3_Area struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AreaId == nil {
		return nil, fmt.Errorf("nil value for key AreaId")
	}

	return map[string]interface{}{
		"area-id": *t.AreaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange represents the /nokia-conf/configure/service/vprn/ospf3/area/area-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange struct {
	Advertise          *bool    `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixMask       *string  `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_AreaRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface represents the /nokia-conf/configure/service/vprn/ospf3/area/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability *bool                                                                      `path:"advertise-router-capability" module:"nokia-conf"`
	ApplyGroups               []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Authentication            *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication      `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	BfdLiveness               *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness         `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	DeadInterval              *uint32                                                                    `path:"dead-interval" module:"nokia-conf"`
	HelloInterval             *uint32                                                                    `path:"hello-interval" module:"nokia-conf"`
	InterfaceName             *string                                                                    `path:"interface-name" module:"nokia-conf"`
	InterfaceType             E_NokiaTypesOspf_InterfaceType                                             `path:"interface-type" module:"nokia-conf"`
	LoadBalancingWeight       *uint32                                                                    `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate   `path:"loopfree-alternate" module:"nokia-conf"`
	LsaFilterOut              E_NokiaTypesOspf_LsaFilterOut                                              `path:"lsa-filter-out" module:"nokia-conf"`
	Metric                    *uint32                                                                    `path:"metric" module:"nokia-conf"`
	Mtu                       *uint32                                                                    `path:"mtu" module:"nokia-conf"`
	Neighbor                  map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor `path:"neighbor" module:"nokia-conf"`
	Passive                   *bool                                                                      `path:"passive" module:"nokia-conf"`
	PollInterval              *uint32                                                                    `path:"poll-interval" module:"nokia-conf"`
	Priority                  *uint16                                                                    `path:"priority" module:"nokia-conf"`
	RetransmitInterval        *uint32                                                                    `path:"retransmit-interval" module:"nokia-conf"`
	RibPriority               E_NokiaTypesOspf_RibPriority                                               `path:"rib-priority" module:"nokia-conf"`
	TransitDelay              *uint32                                                                    `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) NewNeighbor(Address string) (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor{
		Address: &Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetOrCreateNeighbor(Address string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor {

	key := Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetNeighbor(Address string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) DeleteNeighbor(Address string) {
	key := Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) AppendNeighbor(v *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetOrCreateAuthentication() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetAuthentication() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetInterfaceType() E_NokiaTypesOspf_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLsaFilterOut retrieves the value of the leaf LsaFilterOut from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaFilterOut is set, it can
// safely use t.GetLsaFilterOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaFilterOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetLsaFilterOut() E_NokiaTypesOspf_LsaFilterOut {
	if t == nil || t.LsaFilterOut == 0 {
		return NokiaTypesOspf_LsaFilterOut_none
	}
	return t.LsaFilterOut
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPollInterval retrieves the value of the leaf PollInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 120
	}
	return *t.PollInterval
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetPriority() uint16 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRibPriority retrieves the value of the leaf RibPriority from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibPriority is set, it can
// safely use t.GetRibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetRibPriority() E_NokiaTypesOspf_RibPriority {
	if t == nil || t.RibPriority == 0 {
		return 0
	}
	return t.RibPriority
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.LsaFilterOut == 0 {
		t.LsaFilterOut = NokiaTypesOspf_LsaFilterOut_none
	}
	if t.PollInterval == nil {
		var v uint32 = 120
		t.PollInterval = &v
	}
	if t.Priority == nil {
		var v uint16 = 1
		t.Priority = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.Authentication.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication represents the /nokia-conf/configure/service/vprn/ospf3/area/interface/authentication YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication struct {
	Inbound  *string `path:"inbound" module:"nokia-conf"`
	Outbound *string `path:"outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) IsYANGGoStruct() {}

// GetInbound retrieves the value of the leaf Inbound from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inbound is set, it can
// safely use t.GetInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) GetInbound() string {
	if t == nil || t.Inbound == nil {
		return ""
	}
	return *t.Inbound
}

// GetOutbound retrieves the value of the leaf Outbound from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outbound is set, it can
// safely use t.GetOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) GetOutbound() string {
	if t == nil || t.Outbound == nil {
		return ""
	}
	return *t.Outbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness represents the /nokia-conf/configure/service/vprn/ospf3/area/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness struct {
	RemainDownOnFailure *bool `path:"remain-down-on-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetRemainDownOnFailure retrieves the value of the leaf RemainDownOnFailure from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemainDownOnFailure is set, it can
// safely use t.GetRemainDownOnFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemainDownOnFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness) GetRemainDownOnFailure() bool {
	if t == nil || t.RemainDownOnFailure == nil {
		return false
	}
	return *t.RemainDownOnFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemainDownOnFailure == nil {
		var v bool = false
		t.RemainDownOnFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate represents the /nokia-conf/configure/service/vprn/ospf3/area/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                              `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/service/vprn/ospf3/area/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {
}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor represents the /nokia-conf/configure/service/vprn/ospf3/area/interface/neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Interface_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa represents the /nokia-conf/configure/service/vprn/ospf3/area/nssa YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa struct {
	AreaRange             map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange  `path:"area-range" module:"nokia-conf"`
	OriginateDefaultRoute *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute `path:"originate-default-route" module:"nokia-conf" yangPresence:"true"`
	RedistributeExternal  *bool                                                                   `path:"redistribute-external" module:"nokia-conf"`
	Summaries             *bool                                                                   `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) AppendAreaRange(v *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// GetOrCreateOriginateDefaultRoute retrieves the value of the OriginateDefaultRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) GetOrCreateOriginateDefaultRoute() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute {
	if t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	t.OriginateDefaultRoute = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute{}
	return t.OriginateDefaultRoute
}

// GetOriginateDefaultRoute returns the value of the OriginateDefaultRoute struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa. If the receiver or the field OriginateDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) GetOriginateDefaultRoute() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute {
	if t != nil && t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	return nil
}

// GetRedistributeExternal retrieves the value of the leaf RedistributeExternal from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeExternal is set, it can
// safely use t.GetRedistributeExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) GetRedistributeExternal() bool {
	if t == nil || t.RedistributeExternal == nil {
		return true
	}
	return *t.RedistributeExternal
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RedistributeExternal == nil {
		var v bool = true
		t.RedistributeExternal = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
	t.OriginateDefaultRoute.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange represents the /nokia-conf/configure/service/vprn/ospf3/area/nssa/area-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange struct {
	Advertise          *bool    `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixMask       *string  `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_AreaRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute represents the /nokia-conf/configure/service/vprn/ospf3/area/nssa/originate-default-route YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute struct {
	AdjacencyCheck *bool `path:"adjacency-check" module:"nokia-conf"`
	TypeNssa       *bool `path:"type-nssa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) IsYANGGoStruct() {}

// GetAdjacencyCheck retrieves the value of the leaf AdjacencyCheck from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyCheck is set, it can
// safely use t.GetAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) GetAdjacencyCheck() bool {
	if t == nil || t.AdjacencyCheck == nil {
		return false
	}
	return *t.AdjacencyCheck
}

// GetTypeNssa retrieves the value of the leaf TypeNssa from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeNssa is set, it can
// safely use t.GetTypeNssa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeNssa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) GetTypeNssa() bool {
	if t == nil || t.TypeNssa == nil {
		return false
	}
	return *t.TypeNssa
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjacencyCheck == nil {
		var v bool = false
		t.AdjacencyCheck = &v
	}
	if t.TypeNssa == nil {
		var v bool = false
		t.TypeNssa = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Nssa_OriginateDefaultRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub represents the /nokia-conf/configure/service/vprn/ospf3/area/stub YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub struct {
	DefaultMetric *uint32 `path:"default-metric" module:"nokia-conf"`
	Summaries     *bool   `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultMetric == nil {
		var v uint32 = 1
		t.DefaultMetric = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_Stub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink represents the /nokia-conf/configure/service/vprn/ospf3/area/virtual-link YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink struct {
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Authentication     *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	DeadInterval       *uint32                                                                 `path:"dead-interval" module:"nokia-conf"`
	HelloInterval      *uint32                                                                 `path:"hello-interval" module:"nokia-conf"`
	RetransmitInterval *uint32                                                                 `path:"retransmit-interval" module:"nokia-conf"`
	RouterId           *string                                                                 `path:"router-id" module:"nokia-conf"`
	TransitArea        *string                                                                 `path:"transit-area" module:"nokia-conf"`
	TransitDelay       *uint32                                                                 `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) IsYANGGoStruct() {}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetOrCreateAuthentication() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication{}
	return t.Authentication
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetAuthentication() *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetTransitArea retrieves the value of the leaf TransitArea from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitArea is set, it can
// safely use t.GetTransitArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitArea == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetTransitArea() string {
	if t == nil || t.TransitArea == nil {
		return ""
	}
	return *t.TransitArea
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.Authentication.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterId == nil {
		return nil, fmt.Errorf("nil value for key RouterId")
	}

	if t.TransitArea == nil {
		return nil, fmt.Errorf("nil value for key TransitArea")
	}

	return map[string]interface{}{
		"router-id":    *t.RouterId,
		"transit-area": *t.TransitArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication represents the /nokia-conf/configure/service/vprn/ospf3/area/virtual-link/authentication YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication struct {
	Inbound  *string `path:"inbound" module:"nokia-conf"`
	Outbound *string `path:"outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) IsYANGGoStruct() {}

// GetInbound retrieves the value of the leaf Inbound from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inbound is set, it can
// safely use t.GetInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) GetInbound() string {
	if t == nil || t.Inbound == nil {
		return ""
	}
	return *t.Inbound
}

// GetOutbound retrieves the value of the leaf Outbound from the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outbound is set, it can
// safely use t.GetOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) GetOutbound() string {
	if t == nil || t.Outbound == nil {
		return ""
	}
	return *t.Outbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Area_VirtualLink_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit represents the /nokia-conf/configure/service/vprn/ospf3/export-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow represents the /nokia-conf/configure/service/vprn/ospf3/external-db-overflow YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
	Limit    *uint32 `path:"limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 0
		t.Interval = &v
	}
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_ExternalDbOverflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart represents the /nokia-conf/configure/service/vprn/ospf3/graceful-restart YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart struct {
	HelperMode        *bool `path:"helper-mode" module:"nokia-conf"`
	StrictLsaChecking *bool `path:"strict-lsa-checking" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// GetStrictLsaChecking retrieves the value of the leaf StrictLsaChecking from the NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictLsaChecking is set, it can
// safely use t.GetStrictLsaChecking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictLsaChecking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) GetStrictLsaChecking() bool {
	if t == nil || t.StrictLsaChecking == nil {
		return true
	}
	return *t.StrictLsaChecking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
	if t.StrictLsaChecking == nil {
		var v bool = true
		t.StrictLsaChecking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate represents the /nokia-conf/configure/service/vprn/ospf3/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate struct {
	Exclude *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude `path:"exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exclude.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/service/vprn/ospf3/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude) IsYANGGoStruct() {}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_LoopfreeAlternate_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot represents the /nokia-conf/configure/service/vprn/ospf3/overload-on-boot YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot) IsYANGGoStruct() {}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_OverloadOnBoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority represents the /nokia-conf/configure/service/vprn/ospf3/rib-priority YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority struct {
	High *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) GetHigh() *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High represents the /nokia-conf/configure/service/vprn/ospf3/rib-priority/high YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_RibPriority_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit represents the /nokia-conf/configure/service/vprn/ospf3/rtr-adv-lsa-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit struct {
	LogOnly          *bool                                                                       `path:"log-only" module:"nokia-conf"`
	MaxLsaCount      *uint32                                                                     `path:"max-lsa-count" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                                     `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxLsaCount retrieves the value of the leaf MaxLsaCount from the NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaCount is set, it can
// safely use t.GetMaxLsaCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) GetMaxLsaCount() uint32 {
	if t == nil || t.MaxLsaCount == nil {
		return 0
	}
	return *t.MaxLsaCount
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) GetOverloadTimeout() NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_RtrAdvLsaLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Timers represents the /nokia-conf/configure/service/vprn/ospf3/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Timers struct {
	IncrementalSpfWait *uint32                                                    `path:"incremental-spf-wait" module:"nokia-conf"`
	LsaAccumulate      *uint32                                                    `path:"lsa-accumulate" module:"nokia-conf"`
	LsaArrival         *uint32                                                    `path:"lsa-arrival" module:"nokia-conf"`
	LsaGenerate        *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate `path:"lsa-generate" module:"nokia-conf"`
	RedistributeDelay  *uint32                                                    `path:"redistribute-delay" module:"nokia-conf"`
	SpfWait            *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait     `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGenerate retrieves the value of the LsaGenerate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetOrCreateLsaGenerate() *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate {
	if t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	t.LsaGenerate = &NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate{}
	return t.LsaGenerate
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait{}
	return t.SpfWait
}

// GetLsaGenerate returns the value of the LsaGenerate struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Timers. If the receiver or the field LsaGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetLsaGenerate() *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate {
	if t != nil && t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf3_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetSpfWait() *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// GetIncrementalSpfWait retrieves the value of the leaf IncrementalSpfWait from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementalSpfWait is set, it can
// safely use t.GetIncrementalSpfWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementalSpfWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetIncrementalSpfWait() uint32 {
	if t == nil || t.IncrementalSpfWait == nil {
		return 1000
	}
	return *t.IncrementalSpfWait
}

// GetLsaAccumulate retrieves the value of the leaf LsaAccumulate from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaAccumulate is set, it can
// safely use t.GetLsaAccumulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaAccumulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetLsaAccumulate() uint32 {
	if t == nil || t.LsaAccumulate == nil {
		return 1000
	}
	return *t.LsaAccumulate
}

// GetLsaArrival retrieves the value of the leaf LsaArrival from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaArrival is set, it can
// safely use t.GetLsaArrival() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaArrival == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetLsaArrival() uint32 {
	if t == nil || t.LsaArrival == nil {
		return 1000
	}
	return *t.LsaArrival
}

// GetRedistributeDelay retrieves the value of the leaf RedistributeDelay from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeDelay is set, it can
// safely use t.GetRedistributeDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) GetRedistributeDelay() uint32 {
	if t == nil || t.RedistributeDelay == nil {
		return 1000
	}
	return *t.RedistributeDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncrementalSpfWait == nil {
		var v uint32 = 1000
		t.IncrementalSpfWait = &v
	}
	if t.LsaAccumulate == nil {
		var v uint32 = 1000
		t.LsaAccumulate = &v
	}
	if t.LsaArrival == nil {
		var v uint32 = 1000
		t.LsaArrival = &v
	}
	if t.RedistributeDelay == nil {
		var v uint32 = 1000
		t.RedistributeDelay = &v
	}
	t.LsaGenerate.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Timers.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate represents the /nokia-conf/configure/service/vprn/ospf3/timers/lsa-generate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate struct {
	LsaInitialWait *uint32 `path:"lsa-initial-wait" module:"nokia-conf"`
	LsaSecondWait  *uint32 `path:"lsa-second-wait" module:"nokia-conf"`
	MaxLsaWait     *uint32 `path:"max-lsa-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) IsYANGGoStruct() {}

// GetLsaInitialWait retrieves the value of the leaf LsaInitialWait from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaInitialWait is set, it can
// safely use t.GetLsaInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) GetLsaInitialWait() uint32 {
	if t == nil || t.LsaInitialWait == nil {
		return 5000
	}
	return *t.LsaInitialWait
}

// GetLsaSecondWait retrieves the value of the leaf LsaSecondWait from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaSecondWait is set, it can
// safely use t.GetLsaSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) GetLsaSecondWait() uint32 {
	if t == nil || t.LsaSecondWait == nil {
		return 5000
	}
	return *t.LsaSecondWait
}

// GetMaxLsaWait retrieves the value of the leaf MaxLsaWait from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaWait is set, it can
// safely use t.GetMaxLsaWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) GetMaxLsaWait() uint32 {
	if t == nil || t.MaxLsaWait == nil {
		return 5000
	}
	return *t.MaxLsaWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LsaInitialWait == nil {
		var v uint32 = 5000
		t.LsaInitialWait = &v
	}
	if t.LsaSecondWait == nil {
		var v uint32 = 5000
		t.LsaSecondWait = &v
	}
	if t.MaxLsaWait == nil {
		var v uint32 = 5000
		t.MaxLsaWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Timers_LsaGenerate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait represents the /nokia-conf/configure/service/vprn/ospf3/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait.
func (*NokiaConf_Configure_Service_Vprn_Ospf3_Timers_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area represents the /nokia-conf/configure/service/vprn/ospf/area YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area struct {
	AdvertiseNeProfile        *string                                                                                                                `path:"advertise-ne-profile" module:"nokia-conf"`
	AdvertiseRouterCapability *bool                                                                                                                  `path:"advertise-router-capability" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	AreaId                    *string                                                                                                                `path:"area-id" module:"nokia-conf"`
	AreaRange                 map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange                                                       `path:"area-range" module:"nokia-conf"`
	BlackholeAggregate        *bool                                                                                                                  `path:"blackhole-aggregate" module:"nokia-conf"`
	ExportPolicy              []string                                                                                                               `path:"export-policy" module:"nokia-conf"`
	ImportPolicy              []string                                                                                                               `path:"import-policy" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface                                                       `path:"interface" module:"nokia-conf"`
	LoopfreeAlternateExclude  *bool                                                                                                                  `path:"loopfree-alternate-exclude" module:"nokia-conf"`
	Nssa                      *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa                                                                       `path:"nssa" module:"nokia-conf" yangPresence:"true"`
	ShamLink                  map[NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink       `path:"sham-link" module:"nokia-conf"`
	Stub                      *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub                                                                       `path:"stub" module:"nokia-conf" yangPresence:"true"`
	VirtualLink               map[NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink `path:"virtual-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key represents the key for list ShamLink of element /nokia-conf/configure/service/vprn/ospf/area.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key struct {
	Interface string `path:"interface"`
	IpAddress string `path:"ip-address"`
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key represents the key for list VirtualLink of element /nokia-conf/configure/service/vprn/ospf/area.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key struct {
	RouterId    string `path:"router-id"`
	TransitArea string `path:"transit-area"`
}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) AppendAreaRange(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewShamLink creates a new entry in the ShamLink list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) NewShamLink(Interface string, IpAddress string) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ShamLink == nil {
		t.ShamLink = make(map[NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink)
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key{
		Interface: Interface,
		IpAddress: IpAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ShamLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ShamLink", key)
	}

	t.ShamLink[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink{
		Interface: &Interface,
		IpAddress: &IpAddress,
	}

	return t.ShamLink[key], nil
}

// RenameShamLink renames an entry in the list ShamLink within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) RenameShamLink(oldK, newK NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key) error {
	if _, ok := t.ShamLink[newK]; ok {
		return fmt.Errorf("key %v already exists in ShamLink", newK)
	}

	e, ok := t.ShamLink[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ShamLink", oldK)
	}
	e.Interface = &newK.Interface
	e.IpAddress = &newK.IpAddress

	t.ShamLink[newK] = e
	delete(t.ShamLink, oldK)
	return nil
}

// GetOrCreateShamLink retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetOrCreateShamLink(Interface string, IpAddress string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink {

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key{
		Interface: Interface,
		IpAddress: IpAddress,
	}

	if v, ok := t.ShamLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewShamLink(Interface, IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateShamLink got unexpected error: %v", err))
	}
	return v
}

// GetShamLink retrieves the value with the specified key from
// the ShamLink map field of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetShamLink(Interface string, IpAddress string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key{
		Interface: Interface,
		IpAddress: IpAddress,
	}

	if lm, ok := t.ShamLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteShamLink deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) DeleteShamLink(Interface string, IpAddress string) {
	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key{
		Interface: Interface,
		IpAddress: IpAddress,
	}

	delete(t.ShamLink, key)
}

// AppendShamLink appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink struct to the
// list ShamLink of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) AppendShamLink(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) error {
	if v.Interface == nil {
		return fmt.Errorf("invalid nil key for Interface")
	}

	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key{
		Interface: *v.Interface,
		IpAddress: *v.IpAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ShamLink == nil {
		t.ShamLink = make(map[NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink)
	}

	if _, ok := t.ShamLink[key]; ok {
		return fmt.Errorf("duplicate key for list ShamLink %v", key)
	}

	t.ShamLink[key] = v
	return nil
}

// NewVirtualLink creates a new entry in the VirtualLink list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) NewVirtualLink(RouterId string, TransitArea string) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink)
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualLink", key)
	}

	t.VirtualLink[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink{
		RouterId:    &RouterId,
		TransitArea: &TransitArea,
	}

	return t.VirtualLink[key], nil
}

// RenameVirtualLink renames an entry in the list VirtualLink within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) RenameVirtualLink(oldK, newK NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key) error {
	if _, ok := t.VirtualLink[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualLink", newK)
	}

	e, ok := t.VirtualLink[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualLink", oldK)
	}
	e.RouterId = &newK.RouterId
	e.TransitArea = &newK.TransitArea

	t.VirtualLink[newK] = e
	delete(t.VirtualLink, oldK)
	return nil
}

// GetOrCreateVirtualLink retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetOrCreateVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink {

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if v, ok := t.VirtualLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualLink(RouterId, TransitArea)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualLink got unexpected error: %v", err))
	}
	return v
}

// GetVirtualLink retrieves the value with the specified key from
// the VirtualLink map field of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if lm, ok := t.VirtualLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualLink deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) DeleteVirtualLink(RouterId string, TransitArea string) {
	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	delete(t.VirtualLink, key)
}

// AppendVirtualLink appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink struct to the
// list VirtualLink of NokiaConf_Configure_Service_Vprn_Ospf_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) AppendVirtualLink(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) error {
	if v.RouterId == nil {
		return fmt.Errorf("invalid nil key for RouterId")
	}

	if v.TransitArea == nil {
		return fmt.Errorf("invalid nil key for TransitArea")
	}

	key := NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key{
		RouterId:    *v.RouterId,
		TransitArea: *v.TransitArea,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_Key]*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink)
	}

	if _, ok := t.VirtualLink[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualLink %v", key)
	}

	t.VirtualLink[key] = v
	return nil
}

// GetOrCreateNssa retrieves the value of the Nssa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetOrCreateNssa() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa {
	if t.Nssa != nil {
		return t.Nssa
	}
	t.Nssa = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa{}
	return t.Nssa
}

// GetOrCreateStub retrieves the value of the Stub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetOrCreateStub() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub {
	if t.Stub != nil {
		return t.Stub
	}
	t.Stub = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub{}
	return t.Stub
}

// GetNssa returns the value of the Nssa struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Area. If the receiver or the field Nssa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetNssa() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa {
	if t != nil && t.Nssa != nil {
		return t.Nssa
	}
	return nil
}

// GetStub returns the value of the Stub struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Area. If the receiver or the field Stub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetStub() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub {
	if t != nil && t.Stub != nil {
		return t.Stub
	}
	return nil
}

// GetAdvertiseNeProfile retrieves the value of the leaf AdvertiseNeProfile from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseNeProfile is set, it can
// safely use t.GetAdvertiseNeProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseNeProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetAdvertiseNeProfile() string {
	if t == nil || t.AdvertiseNeProfile == nil {
		return ""
	}
	return *t.AdvertiseNeProfile
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAreaId retrieves the value of the leaf AreaId from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaId is set, it can
// safely use t.GetAreaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetAreaId() string {
	if t == nil || t.AreaId == nil {
		return ""
	}
	return *t.AreaId
}

// GetBlackholeAggregate retrieves the value of the leaf BlackholeAggregate from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackholeAggregate is set, it can
// safely use t.GetBlackholeAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackholeAggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetBlackholeAggregate() bool {
	if t == nil || t.BlackholeAggregate == nil {
		return true
	}
	return *t.BlackholeAggregate
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.BlackholeAggregate == nil {
		var v bool = true
		t.BlackholeAggregate = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	t.Nssa.PopulateDefaults()
	t.Stub.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.ShamLink {
		e.PopulateDefaults()
	}
	for _, e := range t.VirtualLink {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AreaId == nil {
		return nil, fmt.Errorf("nil value for key AreaId")
	}

	return map[string]interface{}{
		"area-id": *t.AreaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange represents the /nokia-conf/configure/service/vprn/ospf/area/area-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange struct {
	Advertise          *bool    `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixMask       *string  `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_AreaRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface represents the /nokia-conf/configure/service/vprn/ospf/area/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability *bool                                                                             `path:"advertise-router-capability" module:"nokia-conf"`
	AdvertiseSubnet           *bool                                                                             `path:"advertise-subnet" module:"nokia-conf"`
	ApplyGroups               []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey         *string                                                                           `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain    *string                                                                           `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType        E_NokiaTypesOspf_AuthenticationType                                               `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness               *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness                 `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	DeadInterval              *uint32                                                                           `path:"dead-interval" module:"nokia-conf"`
	HelloInterval             *uint32                                                                           `path:"hello-interval" module:"nokia-conf"`
	InterfaceName             *string                                                                           `path:"interface-name" module:"nokia-conf"`
	InterfaceType             E_NokiaTypesOspf_InterfaceType                                                    `path:"interface-type" module:"nokia-conf"`
	LoadBalancingWeight       *uint32                                                                           `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate           `path:"loopfree-alternate" module:"nokia-conf"`
	LsaFilterOut              E_NokiaTypesOspf_LsaFilterOut                                                     `path:"lsa-filter-out" module:"nokia-conf"`
	MessageDigestKey          map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey `path:"message-digest-key" module:"nokia-conf"`
	Metric                    *uint32                                                                           `path:"metric" module:"nokia-conf"`
	Mtu                       *uint32                                                                           `path:"mtu" module:"nokia-conf"`
	Neighbor                  map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor         `path:"neighbor" module:"nokia-conf"`
	Passive                   *bool                                                                             `path:"passive" module:"nokia-conf"`
	PollInterval              *uint32                                                                           `path:"poll-interval" module:"nokia-conf"`
	Priority                  *uint16                                                                           `path:"priority" module:"nokia-conf"`
	RetransmitInterval        *uint32                                                                           `path:"retransmit-interval" module:"nokia-conf"`
	RibPriority               E_NokiaTypesOspf_RibPriority                                                      `path:"rib-priority" module:"nokia-conf"`
	TransitDelay              *uint32                                                                           `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) IsYANGGoStruct() {}

// NewMessageDigestKey creates a new entry in the MessageDigestKey list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) NewMessageDigestKey(KeyId uint16) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MessageDigestKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MessageDigestKey", key)
	}

	t.MessageDigestKey[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey{
		KeyId: &KeyId,
	}

	return t.MessageDigestKey[key], nil
}

// RenameMessageDigestKey renames an entry in the list MessageDigestKey within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) RenameMessageDigestKey(oldK, newK uint16) error {
	if _, ok := t.MessageDigestKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MessageDigestKey", newK)
	}

	e, ok := t.MessageDigestKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MessageDigestKey", oldK)
	}
	e.KeyId = &newK

	t.MessageDigestKey[newK] = e
	delete(t.MessageDigestKey, oldK)
	return nil
}

// GetOrCreateMessageDigestKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetOrCreateMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey {

	key := KeyId

	if v, ok := t.MessageDigestKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMessageDigestKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMessageDigestKey got unexpected error: %v", err))
	}
	return v
}

// GetMessageDigestKey retrieves the value with the specified key from
// the MessageDigestKey map field of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.MessageDigestKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMessageDigestKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) DeleteMessageDigestKey(KeyId uint16) {
	key := KeyId

	delete(t.MessageDigestKey, key)
}

// AppendMessageDigestKey appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey struct to the
// list MessageDigestKey of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) AppendMessageDigestKey(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey)
	}

	if _, ok := t.MessageDigestKey[key]; ok {
		return fmt.Errorf("duplicate key for list MessageDigestKey %v", key)
	}

	t.MessageDigestKey[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) NewNeighbor(Address string) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor{
		Address: &Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetOrCreateNeighbor(Address string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor {

	key := Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetNeighbor(Address string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) DeleteNeighbor(Address string) {
	key := Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) AppendNeighbor(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAdvertiseSubnet retrieves the value of the leaf AdvertiseSubnet from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseSubnet is set, it can
// safely use t.GetAdvertiseSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetAdvertiseSubnet() bool {
	if t == nil || t.AdvertiseSubnet == nil {
		return true
	}
	return *t.AdvertiseSubnet
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetAuthenticationType() E_NokiaTypesOspf_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetInterfaceType() E_NokiaTypesOspf_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLsaFilterOut retrieves the value of the leaf LsaFilterOut from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaFilterOut is set, it can
// safely use t.GetLsaFilterOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaFilterOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetLsaFilterOut() E_NokiaTypesOspf_LsaFilterOut {
	if t == nil || t.LsaFilterOut == 0 {
		return NokiaTypesOspf_LsaFilterOut_none
	}
	return t.LsaFilterOut
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPollInterval retrieves the value of the leaf PollInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 120
	}
	return *t.PollInterval
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetPriority() uint16 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRibPriority retrieves the value of the leaf RibPriority from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibPriority is set, it can
// safely use t.GetRibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetRibPriority() E_NokiaTypesOspf_RibPriority {
	if t == nil || t.RibPriority == 0 {
		return 0
	}
	return t.RibPriority
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.AdvertiseSubnet == nil {
		var v bool = true
		t.AdvertiseSubnet = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.LsaFilterOut == 0 {
		t.LsaFilterOut = NokiaTypesOspf_LsaFilterOut_none
	}
	if t.PollInterval == nil {
		var v uint32 = 120
		t.PollInterval = &v
	}
	if t.Priority == nil {
		var v uint16 = 1
		t.Priority = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.BfdLiveness.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	for _, e := range t.MessageDigestKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness represents the /nokia-conf/configure/service/vprn/ospf/area/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness struct {
	RemainDownOnFailure *bool `path:"remain-down-on-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetRemainDownOnFailure retrieves the value of the leaf RemainDownOnFailure from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemainDownOnFailure is set, it can
// safely use t.GetRemainDownOnFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemainDownOnFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness) GetRemainDownOnFailure() bool {
	if t == nil || t.RemainDownOnFailure == nil {
		return false
	}
	return *t.RemainDownOnFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemainDownOnFailure == nil {
		var v bool = false
		t.RemainDownOnFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate represents the /nokia-conf/configure/service/vprn/ospf/area/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                             `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/service/vprn/ospf/area/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {
}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey represents the /nokia-conf/configure/service/vprn/ospf/area/interface/message-digest-key YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	KeyId              *uint16  `path:"key-id" module:"nokia-conf"`
	Md5                *string  `path:"md5" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetMd5 retrieves the value of the leaf Md5 from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Md5 is set, it can
// safely use t.GetMd5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Md5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) GetMd5() string {
	if t == nil || t.Md5 == nil {
		return ""
	}
	return *t.Md5
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_MessageDigestKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor represents the /nokia-conf/configure/service/vprn/ospf/area/interface/neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Interface_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa represents the /nokia-conf/configure/service/vprn/ospf/area/nssa YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa struct {
	AreaRange             map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange  `path:"area-range" module:"nokia-conf"`
	OriginateDefaultRoute *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute `path:"originate-default-route" module:"nokia-conf" yangPresence:"true"`
	RedistributeExternal  *bool                                                                  `path:"redistribute-external" module:"nokia-conf"`
	Summaries             *bool                                                                  `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) AppendAreaRange(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// GetOrCreateOriginateDefaultRoute retrieves the value of the OriginateDefaultRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) GetOrCreateOriginateDefaultRoute() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute {
	if t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	t.OriginateDefaultRoute = &NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute{}
	return t.OriginateDefaultRoute
}

// GetOriginateDefaultRoute returns the value of the OriginateDefaultRoute struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa. If the receiver or the field OriginateDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) GetOriginateDefaultRoute() *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute {
	if t != nil && t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	return nil
}

// GetRedistributeExternal retrieves the value of the leaf RedistributeExternal from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeExternal is set, it can
// safely use t.GetRedistributeExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) GetRedistributeExternal() bool {
	if t == nil || t.RedistributeExternal == nil {
		return true
	}
	return *t.RedistributeExternal
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RedistributeExternal == nil {
		var v bool = true
		t.RedistributeExternal = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
	t.OriginateDefaultRoute.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange represents the /nokia-conf/configure/service/vprn/ospf/area/nssa/area-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange struct {
	Advertise          *bool    `path:"advertise" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixMask       *string  `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_AreaRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute represents the /nokia-conf/configure/service/vprn/ospf/area/nssa/originate-default-route YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute struct {
	AdjacencyCheck *bool `path:"adjacency-check" module:"nokia-conf"`
	TypeNssa       *bool `path:"type-nssa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) IsYANGGoStruct() {}

// GetAdjacencyCheck retrieves the value of the leaf AdjacencyCheck from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyCheck is set, it can
// safely use t.GetAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) GetAdjacencyCheck() bool {
	if t == nil || t.AdjacencyCheck == nil {
		return false
	}
	return *t.AdjacencyCheck
}

// GetTypeNssa retrieves the value of the leaf TypeNssa from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeNssa is set, it can
// safely use t.GetTypeNssa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeNssa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) GetTypeNssa() bool {
	if t == nil || t.TypeNssa == nil {
		return false
	}
	return *t.TypeNssa
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjacencyCheck == nil {
		var v bool = false
		t.AdjacencyCheck = &v
	}
	if t.TypeNssa == nil {
		var v bool = false
		t.TypeNssa = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Nssa_OriginateDefaultRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink represents the /nokia-conf/configure/service/vprn/ospf/area/sham-link YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink struct {
	AdminState             E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey      *string                                                                          `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain *string                                                                          `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType     E_NokiaTypesOspf_AuthenticationType                                              `path:"authentication-type" module:"nokia-conf"`
	DeadInterval           *uint32                                                                          `path:"dead-interval" module:"nokia-conf"`
	HelloInterval          *uint32                                                                          `path:"hello-interval" module:"nokia-conf"`
	Interface              *string                                                                          `path:"interface" module:"nokia-conf"`
	IpAddress              *string                                                                          `path:"ip-address" module:"nokia-conf"`
	MessageDigestKey       map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey `path:"message-digest-key" module:"nokia-conf"`
	Metric                 *uint32                                                                          `path:"metric" module:"nokia-conf"`
	RetransmitInterval     *uint32                                                                          `path:"retransmit-interval" module:"nokia-conf"`
	TransitDelay           *uint32                                                                          `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) IsYANGGoStruct() {}

// NewMessageDigestKey creates a new entry in the MessageDigestKey list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) NewMessageDigestKey(KeyId uint16) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MessageDigestKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MessageDigestKey", key)
	}

	t.MessageDigestKey[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey{
		KeyId: &KeyId,
	}

	return t.MessageDigestKey[key], nil
}

// RenameMessageDigestKey renames an entry in the list MessageDigestKey within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) RenameMessageDigestKey(oldK, newK uint16) error {
	if _, ok := t.MessageDigestKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MessageDigestKey", newK)
	}

	e, ok := t.MessageDigestKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MessageDigestKey", oldK)
	}
	e.KeyId = &newK

	t.MessageDigestKey[newK] = e
	delete(t.MessageDigestKey, oldK)
	return nil
}

// GetOrCreateMessageDigestKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetOrCreateMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey {

	key := KeyId

	if v, ok := t.MessageDigestKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMessageDigestKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMessageDigestKey got unexpected error: %v", err))
	}
	return v
}

// GetMessageDigestKey retrieves the value with the specified key from
// the MessageDigestKey map field of NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.MessageDigestKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMessageDigestKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) DeleteMessageDigestKey(KeyId uint16) {
	key := KeyId

	delete(t.MessageDigestKey, key)
}

// AppendMessageDigestKey appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey struct to the
// list MessageDigestKey of NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) AppendMessageDigestKey(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey)
	}

	if _, ok := t.MessageDigestKey[key]; ok {
		return fmt.Errorf("duplicate key for list MessageDigestKey %v", key)
	}

	t.MessageDigestKey[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetAuthenticationType() E_NokiaTypesOspf_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	for _, e := range t.MessageDigestKey {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Interface == nil {
		return nil, fmt.Errorf("nil value for key Interface")
	}

	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"interface":  *t.Interface,
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey represents the /nokia-conf/configure/service/vprn/ospf/area/sham-link/message-digest-key YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	KeyId              *uint16  `path:"key-id" module:"nokia-conf"`
	Md5                *string  `path:"md5" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetMd5 retrieves the value of the leaf Md5 from the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Md5 is set, it can
// safely use t.GetMd5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Md5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) GetMd5() string {
	if t == nil || t.Md5 == nil {
		return ""
	}
	return *t.Md5
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_ShamLink_MessageDigestKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub represents the /nokia-conf/configure/service/vprn/ospf/area/stub YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub struct {
	DefaultMetric *uint32 `path:"default-metric" module:"nokia-conf"`
	Summaries     *bool   `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultMetric == nil {
		var v uint32 = 1
		t.DefaultMetric = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_Stub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink represents the /nokia-conf/configure/service/vprn/ospf/area/virtual-link YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink struct {
	AdminState             E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey      *string                                                                             `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain *string                                                                             `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType     E_NokiaTypesOspf_AuthenticationType                                                 `path:"authentication-type" module:"nokia-conf"`
	DeadInterval           *uint32                                                                             `path:"dead-interval" module:"nokia-conf"`
	HelloInterval          *uint32                                                                             `path:"hello-interval" module:"nokia-conf"`
	MessageDigestKey       map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey `path:"message-digest-key" module:"nokia-conf"`
	RetransmitInterval     *uint32                                                                             `path:"retransmit-interval" module:"nokia-conf"`
	RouterId               *string                                                                             `path:"router-id" module:"nokia-conf"`
	TransitArea            *string                                                                             `path:"transit-area" module:"nokia-conf"`
	TransitDelay           *uint32                                                                             `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) IsYANGGoStruct() {}

// NewMessageDigestKey creates a new entry in the MessageDigestKey list of the
// NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) NewMessageDigestKey(KeyId uint16) (*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MessageDigestKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MessageDigestKey", key)
	}

	t.MessageDigestKey[key] = &NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey{
		KeyId: &KeyId,
	}

	return t.MessageDigestKey[key], nil
}

// RenameMessageDigestKey renames an entry in the list MessageDigestKey within
// the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) RenameMessageDigestKey(oldK, newK uint16) error {
	if _, ok := t.MessageDigestKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MessageDigestKey", newK)
	}

	e, ok := t.MessageDigestKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MessageDigestKey", oldK)
	}
	e.KeyId = &newK

	t.MessageDigestKey[newK] = e
	delete(t.MessageDigestKey, oldK)
	return nil
}

// GetOrCreateMessageDigestKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetOrCreateMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey {

	key := KeyId

	if v, ok := t.MessageDigestKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMessageDigestKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMessageDigestKey got unexpected error: %v", err))
	}
	return v
}

// GetMessageDigestKey retrieves the value with the specified key from
// the MessageDigestKey map field of NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetMessageDigestKey(KeyId uint16) *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.MessageDigestKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMessageDigestKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) DeleteMessageDigestKey(KeyId uint16) {
	key := KeyId

	delete(t.MessageDigestKey, key)
}

// AppendMessageDigestKey appends the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey struct to the
// list MessageDigestKey of NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) AppendMessageDigestKey(v *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[uint16]*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey)
	}

	if _, ok := t.MessageDigestKey[key]; ok {
		return fmt.Errorf("duplicate key for list MessageDigestKey %v", key)
	}

	t.MessageDigestKey[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetAuthenticationType() E_NokiaTypesOspf_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetTransitArea retrieves the value of the leaf TransitArea from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitArea is set, it can
// safely use t.GetTransitArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitArea == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetTransitArea() string {
	if t == nil || t.TransitArea == nil {
		return ""
	}
	return *t.TransitArea
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	for _, e := range t.MessageDigestKey {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterId == nil {
		return nil, fmt.Errorf("nil value for key RouterId")
	}

	if t.TransitArea == nil {
		return nil, fmt.Errorf("nil value for key TransitArea")
	}

	return map[string]interface{}{
		"router-id":    *t.RouterId,
		"transit-area": *t.TransitArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey represents the /nokia-conf/configure/service/vprn/ospf/area/virtual-link/message-digest-key YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	KeyId              *uint16  `path:"key-id" module:"nokia-conf"`
	Md5                *string  `path:"md5" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetMd5 retrieves the value of the leaf Md5 from the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Md5 is set, it can
// safely use t.GetMd5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Md5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) GetMd5() string {
	if t == nil || t.Md5 == nil {
		return ""
	}
	return *t.Md5
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Area_VirtualLink_MessageDigestKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit represents the /nokia-conf/configure/service/vprn/ospf/export-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit.
func (*NokiaConf_Configure_Service_Vprn_Ospf_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow represents the /nokia-conf/configure/service/vprn/ospf/external-db-overflow YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
	Limit    *uint32 `path:"limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 0
		t.Interval = &v
	}
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow.
func (*NokiaConf_Configure_Service_Vprn_Ospf_ExternalDbOverflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart represents the /nokia-conf/configure/service/vprn/ospf/graceful-restart YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart struct {
	HelperMode        *bool `path:"helper-mode" module:"nokia-conf"`
	StrictLsaChecking *bool `path:"strict-lsa-checking" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// GetStrictLsaChecking retrieves the value of the leaf StrictLsaChecking from the NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictLsaChecking is set, it can
// safely use t.GetStrictLsaChecking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictLsaChecking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) GetStrictLsaChecking() bool {
	if t == nil || t.StrictLsaChecking == nil {
		return true
	}
	return *t.StrictLsaChecking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
	if t.StrictLsaChecking == nil {
		var v bool = true
		t.StrictLsaChecking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart.
func (*NokiaConf_Configure_Service_Vprn_Ospf_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate represents the /nokia-conf/configure/service/vprn/ospf/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate struct {
	Exclude *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude `path:"exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exclude.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate.
func (*NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/service/vprn/ospf/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude) IsYANGGoStruct() {}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Service_Vprn_Ospf_LoopfreeAlternate_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot represents the /nokia-conf/configure/service/vprn/ospf/overload-on-boot YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot) IsYANGGoStruct() {}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot.
func (*NokiaConf_Configure_Service_Vprn_Ospf_OverloadOnBoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_RibPriority represents the /nokia-conf/configure/service/vprn/ospf/rib-priority YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_RibPriority struct {
	High *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) GetHigh() *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_RibPriority.
func (*NokiaConf_Configure_Service_Vprn_Ospf_RibPriority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High represents the /nokia-conf/configure/service/vprn/ospf/rib-priority/high YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High.
func (*NokiaConf_Configure_Service_Vprn_Ospf_RibPriority_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit represents the /nokia-conf/configure/service/vprn/ospf/rtr-adv-lsa-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit struct {
	LogOnly          *bool                                                                      `path:"log-only" module:"nokia-conf"`
	MaxLsaCount      *uint32                                                                    `path:"max-lsa-count" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                                    `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxLsaCount retrieves the value of the leaf MaxLsaCount from the NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaCount is set, it can
// safely use t.GetMaxLsaCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) GetMaxLsaCount() uint32 {
	if t == nil || t.MaxLsaCount == nil {
		return 0
	}
	return *t.MaxLsaCount
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) GetOverloadTimeout() NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit.
func (*NokiaConf_Configure_Service_Vprn_Ospf_RtrAdvLsaLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Timers represents the /nokia-conf/configure/service/vprn/ospf/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Timers struct {
	IncrementalSpfWait *uint32                                                   `path:"incremental-spf-wait" module:"nokia-conf"`
	LsaAccumulate      *uint32                                                   `path:"lsa-accumulate" module:"nokia-conf"`
	LsaArrival         *uint32                                                   `path:"lsa-arrival" module:"nokia-conf"`
	LsaGenerate        *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate `path:"lsa-generate" module:"nokia-conf"`
	RedistributeDelay  *uint32                                                   `path:"redistribute-delay" module:"nokia-conf"`
	SpfWait            *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait     `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGenerate retrieves the value of the LsaGenerate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetOrCreateLsaGenerate() *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate {
	if t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	t.LsaGenerate = &NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate{}
	return t.LsaGenerate
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait{}
	return t.SpfWait
}

// GetLsaGenerate returns the value of the LsaGenerate struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Timers. If the receiver or the field LsaGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetLsaGenerate() *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate {
	if t != nil && t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Service_Vprn_Ospf_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetSpfWait() *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// GetIncrementalSpfWait retrieves the value of the leaf IncrementalSpfWait from the NokiaConf_Configure_Service_Vprn_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementalSpfWait is set, it can
// safely use t.GetIncrementalSpfWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementalSpfWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetIncrementalSpfWait() uint32 {
	if t == nil || t.IncrementalSpfWait == nil {
		return 1000
	}
	return *t.IncrementalSpfWait
}

// GetLsaAccumulate retrieves the value of the leaf LsaAccumulate from the NokiaConf_Configure_Service_Vprn_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaAccumulate is set, it can
// safely use t.GetLsaAccumulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaAccumulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetLsaAccumulate() uint32 {
	if t == nil || t.LsaAccumulate == nil {
		return 1000
	}
	return *t.LsaAccumulate
}

// GetLsaArrival retrieves the value of the leaf LsaArrival from the NokiaConf_Configure_Service_Vprn_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaArrival is set, it can
// safely use t.GetLsaArrival() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaArrival == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetLsaArrival() uint32 {
	if t == nil || t.LsaArrival == nil {
		return 1000
	}
	return *t.LsaArrival
}

// GetRedistributeDelay retrieves the value of the leaf RedistributeDelay from the NokiaConf_Configure_Service_Vprn_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeDelay is set, it can
// safely use t.GetRedistributeDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) GetRedistributeDelay() uint32 {
	if t == nil || t.RedistributeDelay == nil {
		return 1000
	}
	return *t.RedistributeDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncrementalSpfWait == nil {
		var v uint32 = 1000
		t.IncrementalSpfWait = &v
	}
	if t.LsaAccumulate == nil {
		var v uint32 = 1000
		t.LsaAccumulate = &v
	}
	if t.LsaArrival == nil {
		var v uint32 = 1000
		t.LsaArrival = &v
	}
	if t.RedistributeDelay == nil {
		var v uint32 = 1000
		t.RedistributeDelay = &v
	}
	t.LsaGenerate.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Timers.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate represents the /nokia-conf/configure/service/vprn/ospf/timers/lsa-generate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate struct {
	LsaInitialWait *uint32 `path:"lsa-initial-wait" module:"nokia-conf"`
	LsaSecondWait  *uint32 `path:"lsa-second-wait" module:"nokia-conf"`
	MaxLsaWait     *uint32 `path:"max-lsa-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) IsYANGGoStruct() {}

// GetLsaInitialWait retrieves the value of the leaf LsaInitialWait from the NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaInitialWait is set, it can
// safely use t.GetLsaInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) GetLsaInitialWait() uint32 {
	if t == nil || t.LsaInitialWait == nil {
		return 5000
	}
	return *t.LsaInitialWait
}

// GetLsaSecondWait retrieves the value of the leaf LsaSecondWait from the NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaSecondWait is set, it can
// safely use t.GetLsaSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) GetLsaSecondWait() uint32 {
	if t == nil || t.LsaSecondWait == nil {
		return 5000
	}
	return *t.LsaSecondWait
}

// GetMaxLsaWait retrieves the value of the leaf MaxLsaWait from the NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaWait is set, it can
// safely use t.GetMaxLsaWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) GetMaxLsaWait() uint32 {
	if t == nil || t.MaxLsaWait == nil {
		return 5000
	}
	return *t.MaxLsaWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LsaInitialWait == nil {
		var v uint32 = 5000
		t.LsaInitialWait = &v
	}
	if t.LsaSecondWait == nil {
		var v uint32 = 5000
		t.LsaSecondWait = &v
	}
	if t.MaxLsaWait == nil {
		var v uint32 = 5000
		t.MaxLsaWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Timers_LsaGenerate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait represents the /nokia-conf/configure/service/vprn/ospf/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait.
func (*NokiaConf_Configure_Service_Vprn_Ospf_Timers_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain represents the /nokia-conf/configure/service/vprn/ospf/vpn-domain YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain struct {
	Id   *string                        `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesOspf_VpnDomainType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) GetId() string {
	if t == nil || t.Id == nil {
		return "0000.0000.0000"
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) GetType() E_NokiaTypesOspf_VpnDomainType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Id == nil {
		var v string = "0000.0000.0000"
		t.Id = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain.
func (*NokiaConf_Configure_Service_Vprn_Ospf_VpnDomain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pcp represents the /nokia-conf/configure/service/vprn/pcp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pcp struct {
	Server map[string]*NokiaConf_Configure_Service_Vprn_Pcp_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pcp) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Service_Vprn_Pcp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) NewServer(Name string) (*NokiaConf_Configure_Service_Vprn_Pcp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Vprn_Pcp_Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Service_Vprn_Pcp_Server{
		Name: &Name,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Service_Vprn_Pcp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Name = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pcp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) GetOrCreateServer(Name string) *NokiaConf_Configure_Service_Vprn_Pcp_Server {

	key := Name

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Service_Vprn_Pcp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) GetServer(Name string) *NokiaConf_Configure_Service_Vprn_Pcp_Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pcp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) DeleteServer(Name string) {
	key := Name

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Service_Vprn_Pcp_Server struct to the
// list Server of NokiaConf_Configure_Service_Vprn_Pcp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pcp_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) AppendServer(v *NokiaConf_Configure_Service_Vprn_Pcp_Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Vprn_Pcp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pcp.
func (*NokiaConf_Configure_Service_Vprn_Pcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pcp_Server represents the /nokia-conf/configure/service/vprn/pcp/server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pcp_Server struct {
	AdminState           E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                           `path:"description" module:"nokia-conf"`
	DualStackLiteAddress *string                                                           `path:"dual-stack-lite-address" module:"nokia-conf"`
	FwdInsideRouter      *string                                                           `path:"fwd-inside-router" module:"nokia-conf"`
	Interface            map[string]*NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface `path:"interface" module:"nokia-conf"`
	Name                 *string                                                           `path:"name" module:"nokia-conf"`
	Policy               *string                                                           `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pcp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pcp_Server) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Pcp_Server struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) NewInterface(Name string) (*NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Pcp_Server struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pcp_Server. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetOrCreateInterface(Name string) *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Pcp_Server. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetInterface(Name string) *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pcp_Server. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Pcp_Server. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDualStackLiteAddress retrieves the value of the leaf DualStackLiteAddress from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DualStackLiteAddress is set, it can
// safely use t.GetDualStackLiteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DualStackLiteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetDualStackLiteAddress() string {
	if t == nil || t.DualStackLiteAddress == nil {
		return ""
	}
	return *t.DualStackLiteAddress
}

// GetFwdInsideRouter retrieves the value of the leaf FwdInsideRouter from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdInsideRouter is set, it can
// safely use t.GetFwdInsideRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdInsideRouter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetFwdInsideRouter() string {
	if t == nil || t.FwdInsideRouter == nil {
		return ""
	}
	return *t.FwdInsideRouter
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pcp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pcp_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pcp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pcp_Server.
func (*NokiaConf_Configure_Service_Vprn_Pcp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface represents the /nokia-conf/configure/service/vprn/pcp/server/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface.
func (*NokiaConf_Configure_Service_Vprn_Pcp_Server_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim represents the /nokia-conf/configure/service/vprn/pim YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim struct {
	AdminState          E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ApplyTo             E_NokiaConf_Configure_Service_Vprn_Pim_ApplyTo                 `path:"apply-to" module:"nokia-conf"`
	BgpNhOverride       *bool                                                          `path:"bgp-nh-override" module:"nokia-conf"`
	Import              *NokiaConf_Configure_Service_Vprn_Pim_Import                   `path:"import" module:"nokia-conf"`
	Interface           map[string]*NokiaConf_Configure_Service_Vprn_Pim_Interface     `path:"interface" module:"nokia-conf"`
	Ipv4                *NokiaConf_Configure_Service_Vprn_Pim_Ipv4                     `path:"ipv4" module:"nokia-conf"`
	Ipv6                *NokiaConf_Configure_Service_Vprn_Pim_Ipv6                     `path:"ipv6" module:"nokia-conf"`
	McEcmpBalance       *bool                                                          `path:"mc-ecmp-balance" module:"nokia-conf"`
	McEcmpBalanceHold   *uint32                                                        `path:"mc-ecmp-balance-hold" module:"nokia-conf"`
	McEcmpHashing       *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing            `path:"mc-ecmp-hashing" module:"nokia-conf" yangPresence:"true"`
	MtuOverHead         *int32                                                         `path:"mtu-over-head" module:"nokia-conf"`
	NonDrAttractTraffic *bool                                                          `path:"non-dr-attract-traffic" module:"nokia-conf"`
	Rp                  *NokiaConf_Configure_Service_Vprn_Pim_Rp                       `path:"rp" module:"nokia-conf"`
	SptSwitchover       map[string]*NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover `path:"spt-switchover" module:"nokia-conf"`
	SsmGroups           *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups                `path:"ssm-groups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Pim_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Pim_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Pim_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Pim_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Pim. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Pim_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSptSwitchover creates a new entry in the SptSwitchover list of the
// NokiaConf_Configure_Service_Vprn_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim) NewSptSwitchover(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SptSwitchover == nil {
		t.SptSwitchover = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SptSwitchover[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SptSwitchover", key)
	}

	t.SptSwitchover[key] = &NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover{
		IpPrefix: &IpPrefix,
	}

	return t.SptSwitchover[key], nil
}

// RenameSptSwitchover renames an entry in the list SptSwitchover within
// the NokiaConf_Configure_Service_Vprn_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) RenameSptSwitchover(oldK, newK string) error {
	if _, ok := t.SptSwitchover[newK]; ok {
		return fmt.Errorf("key %v already exists in SptSwitchover", newK)
	}

	e, ok := t.SptSwitchover[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SptSwitchover", oldK)
	}
	e.IpPrefix = &newK

	t.SptSwitchover[newK] = e
	delete(t.SptSwitchover, oldK)
	return nil
}

// GetOrCreateSptSwitchover retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateSptSwitchover(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover {

	key := IpPrefix

	if v, ok := t.SptSwitchover[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSptSwitchover(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSptSwitchover got unexpected error: %v", err))
	}
	return v
}

// GetSptSwitchover retrieves the value with the specified key from
// the SptSwitchover map field of NokiaConf_Configure_Service_Vprn_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetSptSwitchover(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SptSwitchover[key]; ok {
		return lm
	}
	return nil
}

// DeleteSptSwitchover deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim) DeleteSptSwitchover(IpPrefix string) {
	key := IpPrefix

	delete(t.SptSwitchover, key)
}

// AppendSptSwitchover appends the supplied NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover struct to the
// list SptSwitchover of NokiaConf_Configure_Service_Vprn_Pim. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim) AppendSptSwitchover(v *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SptSwitchover == nil {
		t.SptSwitchover = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover)
	}

	if _, ok := t.SptSwitchover[key]; ok {
		return fmt.Errorf("duplicate key for list SptSwitchover %v", key)
	}

	t.SptSwitchover[key] = v
	return nil
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateImport() *NokiaConf_Configure_Service_Vprn_Pim_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Service_Vprn_Pim_Import{}
	return t.Import
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Pim_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Pim_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Pim_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Pim_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMcEcmpHashing retrieves the value of the McEcmpHashing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateMcEcmpHashing() *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing {
	if t.McEcmpHashing != nil {
		return t.McEcmpHashing
	}
	t.McEcmpHashing = &NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing{}
	return t.McEcmpHashing
}

// GetOrCreateRp retrieves the value of the Rp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateRp() *NokiaConf_Configure_Service_Vprn_Pim_Rp {
	if t.Rp != nil {
		return t.Rp
	}
	t.Rp = &NokiaConf_Configure_Service_Vprn_Pim_Rp{}
	return t.Rp
}

// GetOrCreateSsmGroups retrieves the value of the SsmGroups field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetOrCreateSsmGroups() *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups {
	if t.SsmGroups != nil {
		return t.SsmGroups
	}
	t.SsmGroups = &NokiaConf_Configure_Service_Vprn_Pim_SsmGroups{}
	return t.SsmGroups
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetImport() *NokiaConf_Configure_Service_Vprn_Pim_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetIpv4() *NokiaConf_Configure_Service_Vprn_Pim_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetIpv6() *NokiaConf_Configure_Service_Vprn_Pim_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMcEcmpHashing returns the value of the McEcmpHashing struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim. If the receiver or the field McEcmpHashing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetMcEcmpHashing() *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing {
	if t != nil && t.McEcmpHashing != nil {
		return t.McEcmpHashing
	}
	return nil
}

// GetRp returns the value of the Rp struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim. If the receiver or the field Rp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetRp() *NokiaConf_Configure_Service_Vprn_Pim_Rp {
	if t != nil && t.Rp != nil {
		return t.Rp
	}
	return nil
}

// GetSsmGroups returns the value of the SsmGroups struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim. If the receiver or the field SsmGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetSsmGroups() *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups {
	if t != nil && t.SsmGroups != nil {
		return t.SsmGroups
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetApplyTo retrieves the value of the leaf ApplyTo from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyTo is set, it can
// safely use t.GetApplyTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyTo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetApplyTo() E_NokiaConf_Configure_Service_Vprn_Pim_ApplyTo {
	if t == nil || t.ApplyTo == 0 {
		return NokiaConf_Configure_Service_Vprn_Pim_ApplyTo_none
	}
	return t.ApplyTo
}

// GetBgpNhOverride retrieves the value of the leaf BgpNhOverride from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpNhOverride is set, it can
// safely use t.GetBgpNhOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpNhOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetBgpNhOverride() bool {
	if t == nil || t.BgpNhOverride == nil {
		return false
	}
	return *t.BgpNhOverride
}

// GetMcEcmpBalance retrieves the value of the leaf McEcmpBalance from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEcmpBalance is set, it can
// safely use t.GetMcEcmpBalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEcmpBalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetMcEcmpBalance() bool {
	if t == nil || t.McEcmpBalance == nil {
		return true
	}
	return *t.McEcmpBalance
}

// GetMcEcmpBalanceHold retrieves the value of the leaf McEcmpBalanceHold from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEcmpBalanceHold is set, it can
// safely use t.GetMcEcmpBalanceHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEcmpBalanceHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetMcEcmpBalanceHold() uint32 {
	if t == nil || t.McEcmpBalanceHold == nil {
		return 0
	}
	return *t.McEcmpBalanceHold
}

// GetMtuOverHead retrieves the value of the leaf MtuOverHead from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuOverHead is set, it can
// safely use t.GetMtuOverHead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuOverHead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetMtuOverHead() int32 {
	if t == nil || t.MtuOverHead == nil {
		return 0
	}
	return *t.MtuOverHead
}

// GetNonDrAttractTraffic retrieves the value of the leaf NonDrAttractTraffic from the NokiaConf_Configure_Service_Vprn_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonDrAttractTraffic is set, it can
// safely use t.GetNonDrAttractTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonDrAttractTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim) GetNonDrAttractTraffic() bool {
	if t == nil || t.NonDrAttractTraffic == nil {
		return false
	}
	return *t.NonDrAttractTraffic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.ApplyTo == 0 {
		t.ApplyTo = NokiaConf_Configure_Service_Vprn_Pim_ApplyTo_none
	}
	if t.BgpNhOverride == nil {
		var v bool = false
		t.BgpNhOverride = &v
	}
	if t.McEcmpBalance == nil {
		var v bool = true
		t.McEcmpBalance = &v
	}
	if t.MtuOverHead == nil {
		var v int32 = 0
		t.MtuOverHead = &v
	}
	if t.NonDrAttractTraffic == nil {
		var v bool = false
		t.NonDrAttractTraffic = &v
	}
	t.Import.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.McEcmpHashing.PopulateDefaults()
	t.Rp.PopulateDefaults()
	t.SsmGroups.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.SptSwitchover {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim.
func (*NokiaConf_Configure_Service_Vprn_Pim) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Import represents the /nokia-conf/configure/service/vprn/pim/import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Import struct {
	JoinPolicy     []string `path:"join-policy" module:"nokia-conf"`
	RegisterPolicy []string `path:"register-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Import) IsYANGGoStruct() {}

// GetJoinPolicy retrieves the value of the leaf JoinPolicy from the NokiaConf_Configure_Service_Vprn_Pim_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPolicy is set, it can
// safely use t.GetJoinPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Import) GetJoinPolicy() []string {
	if t == nil || t.JoinPolicy == nil {
		return nil
	}
	return t.JoinPolicy
}

// GetRegisterPolicy retrieves the value of the leaf RegisterPolicy from the NokiaConf_Configure_Service_Vprn_Pim_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RegisterPolicy is set, it can
// safely use t.GetRegisterPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RegisterPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Import) GetRegisterPolicy() []string {
	if t == nil || t.RegisterPolicy == nil {
		return nil
	}
	return t.RegisterPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Import.
func (*NokiaConf_Configure_Service_Vprn_Pim_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface represents the /nokia-conf/configure/service/vprn/pim/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface struct {
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AssertPeriod       *int32                                                            `path:"assert-period" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness       `path:"bfd-liveness" module:"nokia-conf"`
	BsmCheckRtrAlert   *bool                                                             `path:"bsm-check-rtr-alert" module:"nokia-conf"`
	HelloInterval      *int32                                                            `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier    *uint32                                                           `path:"hello-multiplier" module:"nokia-conf"`
	ImprovedAssert     *bool                                                             `path:"improved-assert" module:"nokia-conf"`
	InstantPruneEcho   *bool                                                             `path:"instant-prune-echo" module:"nokia-conf"`
	InterfaceName      *string                                                           `path:"interface-name" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4              `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6              `path:"ipv6" module:"nokia-conf"`
	MaxGroups          *uint32                                                           `path:"max-groups" module:"nokia-conf"`
	Mcac               *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac              `path:"mcac" module:"nokia-conf"`
	MulticastSenders   E_NokiaConf_Configure_Service_Vprn_Pim_Interface_MulticastSenders `path:"multicast-senders" module:"nokia-conf"`
	P2MpLdpTreeJoin    *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin   `path:"p2mp-ldp-tree-join" module:"nokia-conf"`
	Priority           *uint32                                                           `path:"priority" module:"nokia-conf"`
	StickyDr           *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr          `path:"sticky-dr" module:"nokia-conf" yangPresence:"true"`
	ThreeWayHello      *bool                                                             `path:"three-way-hello" module:"nokia-conf"`
	TrackingSupport    *bool                                                             `path:"tracking-support" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetOrCreateMcac() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateP2MpLdpTreeJoin retrieves the value of the P2MpLdpTreeJoin field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetOrCreateP2MpLdpTreeJoin() *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin {
	if t.P2MpLdpTreeJoin != nil {
		return t.P2MpLdpTreeJoin
	}
	t.P2MpLdpTreeJoin = &NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin{}
	return t.P2MpLdpTreeJoin
}

// GetOrCreateStickyDr retrieves the value of the StickyDr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetOrCreateStickyDr() *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr {
	if t.StickyDr != nil {
		return t.StickyDr
	}
	t.StickyDr = &NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr{}
	return t.StickyDr
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetIpv4() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetIpv6() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetMcac() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetP2MpLdpTreeJoin returns the value of the P2MpLdpTreeJoin struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface. If the receiver or the field P2MpLdpTreeJoin is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetP2MpLdpTreeJoin() *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin {
	if t != nil && t.P2MpLdpTreeJoin != nil {
		return t.P2MpLdpTreeJoin
	}
	return nil
}

// GetStickyDr returns the value of the StickyDr struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface. If the receiver or the field StickyDr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetStickyDr() *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr {
	if t != nil && t.StickyDr != nil {
		return t.StickyDr
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAssertPeriod retrieves the value of the leaf AssertPeriod from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssertPeriod is set, it can
// safely use t.GetAssertPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssertPeriod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetAssertPeriod() int32 {
	if t == nil || t.AssertPeriod == nil {
		return 60
	}
	return *t.AssertPeriod
}

// GetBsmCheckRtrAlert retrieves the value of the leaf BsmCheckRtrAlert from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BsmCheckRtrAlert is set, it can
// safely use t.GetBsmCheckRtrAlert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BsmCheckRtrAlert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetBsmCheckRtrAlert() bool {
	if t == nil || t.BsmCheckRtrAlert == nil {
		return false
	}
	return *t.BsmCheckRtrAlert
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetHelloInterval() int32 {
	if t == nil || t.HelloInterval == nil {
		return 30
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetHelloMultiplier() uint32 {
	if t == nil || t.HelloMultiplier == nil {
		return 35
	}
	return *t.HelloMultiplier
}

// GetImprovedAssert retrieves the value of the leaf ImprovedAssert from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImprovedAssert is set, it can
// safely use t.GetImprovedAssert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImprovedAssert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetImprovedAssert() bool {
	if t == nil || t.ImprovedAssert == nil {
		return true
	}
	return *t.ImprovedAssert
}

// GetInstantPruneEcho retrieves the value of the leaf InstantPruneEcho from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstantPruneEcho is set, it can
// safely use t.GetInstantPruneEcho() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstantPruneEcho == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetInstantPruneEcho() bool {
	if t == nil || t.InstantPruneEcho == nil {
		return false
	}
	return *t.InstantPruneEcho
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaxGroups retrieves the value of the leaf MaxGroups from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGroups is set, it can
// safely use t.GetMaxGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetMaxGroups() uint32 {
	if t == nil || t.MaxGroups == nil {
		return 0
	}
	return *t.MaxGroups
}

// GetMulticastSenders retrieves the value of the leaf MulticastSenders from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastSenders is set, it can
// safely use t.GetMulticastSenders() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastSenders == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetMulticastSenders() E_NokiaConf_Configure_Service_Vprn_Pim_Interface_MulticastSenders {
	if t == nil || t.MulticastSenders == 0 {
		return NokiaConf_Configure_Service_Vprn_Pim_Interface_MulticastSenders_auto
	}
	return t.MulticastSenders
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetThreeWayHello retrieves the value of the leaf ThreeWayHello from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeWayHello is set, it can
// safely use t.GetThreeWayHello() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeWayHello == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetThreeWayHello() bool {
	if t == nil || t.ThreeWayHello == nil {
		return false
	}
	return *t.ThreeWayHello
}

// GetTrackingSupport retrieves the value of the leaf TrackingSupport from the NokiaConf_Configure_Service_Vprn_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackingSupport is set, it can
// safely use t.GetTrackingSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackingSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) GetTrackingSupport() bool {
	if t == nil || t.TrackingSupport == nil {
		return false
	}
	return *t.TrackingSupport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AssertPeriod == nil {
		var v int32 = 60
		t.AssertPeriod = &v
	}
	if t.BsmCheckRtrAlert == nil {
		var v bool = false
		t.BsmCheckRtrAlert = &v
	}
	if t.HelloInterval == nil {
		var v int32 = 30
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint32 = 35
		t.HelloMultiplier = &v
	}
	if t.ImprovedAssert == nil {
		var v bool = true
		t.ImprovedAssert = &v
	}
	if t.InstantPruneEcho == nil {
		var v bool = false
		t.InstantPruneEcho = &v
	}
	if t.MaxGroups == nil {
		var v uint32 = 0
		t.MaxGroups = &v
	}
	if t.MulticastSenders == 0 {
		t.MulticastSenders = NokiaConf_Configure_Service_Vprn_Pim_Interface_MulticastSenders_auto
	}
	if t.Priority == nil {
		var v uint32 = 1
		t.Priority = &v
	}
	if t.ThreeWayHello == nil {
		var v bool = false
		t.ThreeWayHello = &v
	}
	if t.TrackingSupport == nil {
		var v bool = false
		t.TrackingSupport = &v
	}
	t.BfdLiveness.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Mcac.PopulateDefaults()
	t.P2MpLdpTreeJoin.PopulateDefaults()
	t.StickyDr.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness represents the /nokia-conf/configure/service/vprn/pim/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4 represents the /nokia-conf/configure/service/vprn/pim/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4 struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	MonitorOperGroup   *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
	Multicast          *bool                                                                 `path:"multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) IsYANGGoStruct() {}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) GetMonitorOperGroup() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMulticast retrieves the value of the leaf Multicast from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multicast is set, it can
// safely use t.GetMulticast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) GetMulticast() bool {
	if t == nil || t.Multicast == nil {
		return true
	}
	return *t.Multicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multicast == nil {
		var v bool = true
		t.Multicast = &v
	}
	t.MonitorOperGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup represents the /nokia-conf/configure/service/vprn/pim/interface/ipv4/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup struct {
	Name          *string                                                                          `path:"name" module:"nokia-conf"`
	Operation     E_NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup_Operation `path:"operation" module:"nokia-conf"`
	PriorityDelta *uint32                                                                          `path:"priority-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperation retrieves the value of the leaf Operation from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) GetOperation() E_NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup_Operation {
	if t == nil || t.Operation == 0 {
		return 0
	}
	return t.Operation
}

// GetPriorityDelta retrieves the value of the leaf PriorityDelta from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDelta is set, it can
// safely use t.GetPriorityDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) GetPriorityDelta() uint32 {
	if t == nil || t.PriorityDelta == nil {
		return 0
	}
	return *t.PriorityDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv4_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6 represents the /nokia-conf/configure/service/vprn/pim/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6 struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	MonitorOperGroup   *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
	Multicast          *bool                                                                 `path:"multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) IsYANGGoStruct() {}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) GetMonitorOperGroup() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMulticast retrieves the value of the leaf Multicast from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multicast is set, it can
// safely use t.GetMulticast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) GetMulticast() bool {
	if t == nil || t.Multicast == nil {
		return true
	}
	return *t.Multicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multicast == nil {
		var v bool = true
		t.Multicast = &v
	}
	t.MonitorOperGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup represents the /nokia-conf/configure/service/vprn/pim/interface/ipv6/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup struct {
	Name          *string                                                                          `path:"name" module:"nokia-conf"`
	Operation     E_NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup_Operation `path:"operation" module:"nokia-conf"`
	PriorityDelta *uint32                                                                          `path:"priority-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperation retrieves the value of the leaf Operation from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) GetOperation() E_NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup_Operation {
	if t == nil || t.Operation == 0 {
		return 0
	}
	return t.Operation
}

// GetPriorityDelta retrieves the value of the leaf PriorityDelta from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDelta is set, it can
// safely use t.GetPriorityDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) GetPriorityDelta() uint32 {
	if t == nil || t.PriorityDelta == nil {
		return 0
	}
	return *t.PriorityDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Ipv6_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac represents the /nokia-conf/configure/service/vprn/pim/interface/mcac YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                            `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                            `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/service/vprn/pim/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints represents the /nokia-conf/configure/service/vprn/pim/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints struct {
	AdminState       E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	Level            map[uint32]*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level      `path:"level" module:"nokia-conf"`
	NumberDown       map[uint32]*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                    `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) NewLevel(LevelId uint32) (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level{
		LevelId: &LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId uint32) *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) GetLevel(LevelId uint32) *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) DeleteLevel(LevelId uint32) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) error {
	if v.LevelId == nil {
		return fmt.Errorf("invalid nil key received for LevelId")
	}

	key := *v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown uint32) (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: &NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK uint32) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = &newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown uint32) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) error {
	if v.NumberLagPortDown == nil {
		return fmt.Errorf("invalid nil key received for NumberLagPortDown")
	}

	key := *v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/service/vprn/pim/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	LevelId            *uint32  `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) GetLevelId() uint32 {
	if t == nil || t.LevelId == nil {
		return 0
	}
	return *t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelId == nil {
		return nil, fmt.Errorf("nil value for key LevelId")
	}

	return map[string]interface{}{
		"level-id": *t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/service/vprn/pim/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	NumberLagPortDown  *uint32  `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() uint32 {
	if t == nil || t.NumberLagPortDown == nil {
		return 0
	}
	return *t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumberLagPortDown == nil {
		return nil, fmt.Errorf("nil value for key NumberLagPortDown")
	}

	return map[string]interface{}{
		"number-lag-port-down": *t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin represents the /nokia-conf/configure/service/vprn/pim/interface/p2mp-ldp-tree-join YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_P2MpLdpTreeJoin) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr represents the /nokia-conf/configure/service/vprn/pim/interface/sticky-dr YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr struct {
	Priority *uint32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr) IsYANGGoStruct() {}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 1024
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == nil {
		var v uint32 = 1024
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr.
func (*NokiaConf_Configure_Service_Vprn_Pim_Interface_StickyDr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Ipv4 represents the /nokia-conf/configure/service/vprn/pim/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Ipv4 struct {
	AdminState              E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	GrtExtranet             *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet `path:"grt-extranet" module:"nokia-conf"`
	RpfTable                E_NokiaConf_Configure_Service_Vprn_Pim_Ipv4_RpfTable   `path:"rpf-table" module:"nokia-conf"`
	SsmAssertCompatibleMode *bool                                                  `path:"ssm-assert-compatible-mode" module:"nokia-conf"`
	SsmDefaultRange         *bool                                                  `path:"ssm-default-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv4) IsYANGGoStruct() {}

// GetOrCreateGrtExtranet retrieves the value of the GrtExtranet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) GetOrCreateGrtExtranet() *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet {
	if t.GrtExtranet != nil {
		return t.GrtExtranet
	}
	t.GrtExtranet = &NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet{}
	return t.GrtExtranet
}

// GetGrtExtranet returns the value of the GrtExtranet struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Ipv4. If the receiver or the field GrtExtranet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) GetGrtExtranet() *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet {
	if t != nil && t.GrtExtranet != nil {
		return t.GrtExtranet
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) GetRpfTable() E_NokiaConf_Configure_Service_Vprn_Pim_Ipv4_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Service_Vprn_Pim_Ipv4_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSsmAssertCompatibleMode retrieves the value of the leaf SsmAssertCompatibleMode from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmAssertCompatibleMode is set, it can
// safely use t.GetSsmAssertCompatibleMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmAssertCompatibleMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) GetSsmAssertCompatibleMode() bool {
	if t == nil || t.SsmAssertCompatibleMode == nil {
		return false
	}
	return *t.SsmAssertCompatibleMode
}

// GetSsmDefaultRange retrieves the value of the leaf SsmDefaultRange from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmDefaultRange is set, it can
// safely use t.GetSsmDefaultRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmDefaultRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) GetSsmDefaultRange() bool {
	if t == nil || t.SsmDefaultRange == nil {
		return true
	}
	return *t.SsmDefaultRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Service_Vprn_Pim_Ipv4_RpfTable_rtable_u
	}
	if t.SsmAssertCompatibleMode == nil {
		var v bool = false
		t.SsmAssertCompatibleMode = &v
	}
	if t.SsmDefaultRange == nil {
		var v bool = true
		t.SsmDefaultRange = &v
	}
	t.GrtExtranet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet represents the /nokia-conf/configure/service/vprn/pim/ipv4/grt-extranet YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet struct {
	Any         YANGEmpty                                                                     `path:"any" module:"nokia-conf"`
	GroupPrefix map[string]*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) NewGroupPrefix(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.IpPrefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) GetOrCreateGroupPrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix {

	key := IpPrefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) GetGroupPrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) DeleteGroupPrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) AppendGroupPrefix(v *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) GetAny() YANGEmpty {
	if t == nil || t.Any == false {
		return false
	}
	return t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix represents the /nokia-conf/configure/service/vprn/pim/ipv4/grt-extranet/group-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
	Starg              *bool    `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) GetStarg() bool {
	if t == nil || t.Starg == nil {
		return false
	}
	return *t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Starg == nil {
		var v bool = false
		t.Starg = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv4_GrtExtranet_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Ipv6 represents the /nokia-conf/configure/service/vprn/pim/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Ipv6 struct {
	AdminState      E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	RpfTable        E_NokiaConf_Configure_Service_Vprn_Pim_Ipv6_RpfTable `path:"rpf-table" module:"nokia-conf"`
	SsmDefaultRange *bool                                                `path:"ssm-default-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Service_Vprn_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv6) GetRpfTable() E_NokiaConf_Configure_Service_Vprn_Pim_Ipv6_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Service_Vprn_Pim_Ipv6_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSsmDefaultRange retrieves the value of the leaf SsmDefaultRange from the NokiaConf_Configure_Service_Vprn_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmDefaultRange is set, it can
// safely use t.GetSsmDefaultRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmDefaultRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv6) GetSsmDefaultRange() bool {
	if t == nil || t.SsmDefaultRange == nil {
		return true
	}
	return *t.SsmDefaultRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Service_Vprn_Pim_Ipv6_RpfTable_rtable_u
	}
	if t.SsmDefaultRange == nil {
		var v bool = true
		t.SsmDefaultRange = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Pim_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing represents the /nokia-conf/configure/service/vprn/pim/mc-ecmp-hashing YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing struct {
	Rebalance *bool `path:"rebalance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing) IsYANGGoStruct() {}

// GetRebalance retrieves the value of the leaf Rebalance from the NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rebalance is set, it can
// safely use t.GetRebalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rebalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing) GetRebalance() bool {
	if t == nil || t.Rebalance == nil {
		return false
	}
	return *t.Rebalance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rebalance == nil {
		var v bool = false
		t.Rebalance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing.
func (*NokiaConf_Configure_Service_Vprn_Pim_McEcmpHashing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp represents the /nokia-conf/configure/service/vprn/pim/rp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp struct {
	Bootstrap *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap `path:"bootstrap" module:"nokia-conf"`
	Ipv4      *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4      `path:"ipv4" module:"nokia-conf"`
	Ipv6      *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6      `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp) IsYANGGoStruct() {}

// GetOrCreateBootstrap retrieves the value of the Bootstrap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) GetOrCreateBootstrap() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap {
	if t.Bootstrap != nil {
		return t.Bootstrap
	}
	t.Bootstrap = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap{}
	return t.Bootstrap
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6{}
	return t.Ipv6
}

// GetBootstrap returns the value of the Bootstrap struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp. If the receiver or the field Bootstrap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) GetBootstrap() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap {
	if t != nil && t.Bootstrap != nil {
		return t.Bootstrap
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) GetIpv4() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) GetIpv6() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bootstrap.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap represents the /nokia-conf/configure/service/vprn/pim/rp/bootstrap YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap struct {
	Export []string `path:"export" module:"nokia-conf"`
	Import []string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) GetExport() []string {
	if t == nil || t.Export == nil {
		return nil
	}
	return t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) GetImport() []string {
	if t == nil || t.Import == nil {
		return nil
	}
	return t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Bootstrap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4 represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4 struct {
	Anycast         map[NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast `path:"anycast" module:"nokia-conf"`
	AutoRpDiscovery *bool                                                                                                              `path:"auto-rp-discovery" module:"nokia-conf"`
	BsrCandidate    *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate                                                         `path:"bsr-candidate" module:"nokia-conf"`
	Candidate       *bool                                                                                                              `path:"candidate" module:"nokia-conf"`
	MappingAgent    *bool                                                                                                              `path:"mapping-agent" module:"nokia-conf"`
	RpCandidate     *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate                                                          `path:"rp-candidate" module:"nokia-conf"`
	Static          *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static                                                               `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key represents the key for list Anycast of element /nokia-conf/configure/service/vprn/pim/rp/ipv4.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key struct {
	Ipv4Address string `path:"ipv4-address"`
	RpSetPeer   string `path:"rp-set-peer"`
}

// NewAnycast creates a new entry in the Anycast list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) NewAnycast(Ipv4Address string, RpSetPeer string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast)
	}

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Anycast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Anycast", key)
	}

	t.Anycast[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast{
		Ipv4Address: &Ipv4Address,
		RpSetPeer:   &RpSetPeer,
	}

	return t.Anycast[key], nil
}

// RenameAnycast renames an entry in the list Anycast within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) RenameAnycast(oldK, newK NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key) error {
	if _, ok := t.Anycast[newK]; ok {
		return fmt.Errorf("key %v already exists in Anycast", newK)
	}

	e, ok := t.Anycast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Anycast", oldK)
	}
	e.Ipv4Address = &newK.Ipv4Address
	e.RpSetPeer = &newK.RpSetPeer

	t.Anycast[newK] = e
	delete(t.Anycast, oldK)
	return nil
}

// GetOrCreateAnycast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetOrCreateAnycast(Ipv4Address string, RpSetPeer string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast {

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	if v, ok := t.Anycast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnycast(Ipv4Address, RpSetPeer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnycast got unexpected error: %v", err))
	}
	return v
}

// GetAnycast retrieves the value with the specified key from
// the Anycast map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetAnycast(Ipv4Address string, RpSetPeer string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	if lm, ok := t.Anycast[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnycast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) DeleteAnycast(Ipv4Address string, RpSetPeer string) {
	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	delete(t.Anycast, key)
}

// AppendAnycast appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast struct to the
// list Anycast of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) AppendAnycast(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key for Ipv4Address")
	}

	if v.RpSetPeer == nil {
		return fmt.Errorf("invalid nil key for RpSetPeer")
	}

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: *v.Ipv4Address,
		RpSetPeer:   *v.RpSetPeer,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast)
	}

	if _, ok := t.Anycast[key]; ok {
		return fmt.Errorf("duplicate key for list Anycast %v", key)
	}

	t.Anycast[key] = v
	return nil
}

// GetOrCreateBsrCandidate retrieves the value of the BsrCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetOrCreateBsrCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate {
	if t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	t.BsrCandidate = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate{}
	return t.BsrCandidate
}

// GetOrCreateRpCandidate retrieves the value of the RpCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetOrCreateRpCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate {
	if t.RpCandidate != nil {
		return t.RpCandidate
	}
	t.RpCandidate = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate{}
	return t.RpCandidate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetOrCreateStatic() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static{}
	return t.Static
}

// GetBsrCandidate returns the value of the BsrCandidate struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4. If the receiver or the field BsrCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetBsrCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate {
	if t != nil && t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	return nil
}

// GetRpCandidate returns the value of the RpCandidate struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4. If the receiver or the field RpCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetRpCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate {
	if t != nil && t.RpCandidate != nil {
		return t.RpCandidate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetStatic() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAutoRpDiscovery retrieves the value of the leaf AutoRpDiscovery from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoRpDiscovery is set, it can
// safely use t.GetAutoRpDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoRpDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetAutoRpDiscovery() bool {
	if t == nil || t.AutoRpDiscovery == nil {
		return false
	}
	return *t.AutoRpDiscovery
}

// GetCandidate retrieves the value of the leaf Candidate from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Candidate is set, it can
// safely use t.GetCandidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Candidate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetCandidate() bool {
	if t == nil || t.Candidate == nil {
		return false
	}
	return *t.Candidate
}

// GetMappingAgent retrieves the value of the leaf MappingAgent from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MappingAgent is set, it can
// safely use t.GetMappingAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MappingAgent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) GetMappingAgent() bool {
	if t == nil || t.MappingAgent == nil {
		return false
	}
	return *t.MappingAgent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoRpDiscovery == nil {
		var v bool = false
		t.AutoRpDiscovery = &v
	}
	if t.Candidate == nil {
		var v bool = false
		t.Candidate = &v
	}
	if t.MappingAgent == nil {
		var v bool = false
		t.MappingAgent = &v
	}
	t.BsrCandidate.PopulateDefaults()
	t.RpCandidate.PopulateDefaults()
	t.Static.PopulateDefaults()
	for _, e := range t.Anycast {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4/anycast YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast struct {
	Ipv4Address *string `path:"ipv4-address" module:"nokia-conf"`
	RpSetPeer   *string `path:"rp-set-peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) IsYANGGoStruct() {}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetRpSetPeer retrieves the value of the leaf RpSetPeer from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpSetPeer is set, it can
// safely use t.GetRpSetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpSetPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) GetRpSetPeer() string {
	if t == nil || t.RpSetPeer == nil {
		return ""
	}
	return *t.RpSetPeer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	if t.RpSetPeer == nil {
		return nil, fmt.Errorf("nil value for key RpSetPeer")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
		"rp-set-peer":  *t.RpSetPeer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Anycast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4/bsr-candidate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate struct {
	Address     *string                     `path:"address" module:"nokia-conf"`
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HashMaskLen *int32                      `path:"hash-mask-len" module:"nokia-conf"`
	Priority    *int32                      `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHashMaskLen retrieves the value of the leaf HashMaskLen from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashMaskLen is set, it can
// safely use t.GetHashMaskLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashMaskLen == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) GetHashMaskLen() int32 {
	if t == nil || t.HashMaskLen == nil {
		return 30
	}
	return *t.HashMaskLen
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HashMaskLen == nil {
		var v int32 = 30
		t.HashMaskLen = &v
	}
	if t.Priority == nil {
		var v int32 = 0
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_BsrCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4/rp-candidate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate struct {
	Address    *string                                                                         `path:"address" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange `path:"group-range" module:"nokia-conf"`
	Holdtime   *int32                                                                          `path:"holdtime" module:"nokia-conf"`
	Priority   *int32                                                                          `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) NewGroupRange(Ipv4Prefix string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv4Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) GetOrCreateGroupRange(Ipv4Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange {

	key := Ipv4Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) GetGroupRange(Ipv4Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) DeleteGroupRange(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldtime retrieves the value of the leaf Holdtime from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Holdtime is set, it can
// safely use t.GetHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Holdtime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) GetHoldtime() int32 {
	if t == nil || t.Holdtime == nil {
		return 150
	}
	return *t.Holdtime
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 192
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Holdtime == nil {
		var v int32 = 150
		t.Holdtime = &v
	}
	if t.Priority == nil {
		var v int32 = 192
		t.Priority = &v
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4/rp-candidate/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange struct {
	Ipv4Prefix *string `path:"ipv4-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) IsYANGGoStruct() {}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_RpCandidate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4/static YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static struct {
	Address map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) GetAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address struct to the
// list Address of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) AppendAddress(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4/static/address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address struct {
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupPrefix        map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
	Ipv4Address        *string                                                                             `path:"ipv4-address" module:"nokia-conf"`
	Override           *bool                                                                               `path:"override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) NewGroupPrefix(Ipv4Prefix string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.Ipv4Prefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) GetOrCreateGroupPrefix(Ipv4Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix {

	key := Ipv4Prefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) GetGroupPrefix(Ipv4Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) DeleteGroupPrefix(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) AppendGroupPrefix(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetOverride retrieves the value of the leaf Override from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Override is set, it can
// safely use t.GetOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Override == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) GetOverride() bool {
	if t == nil || t.Override == nil {
		return false
	}
	return *t.Override
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Override == nil {
		var v bool = false
		t.Override = &v
	}
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix represents the /nokia-conf/configure/service/vprn/pim/rp/ipv4/static/address/group-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct {
	Ipv4Prefix *string `path:"ipv4-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) IsYANGGoStruct() {}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv4_Static_Address_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6 represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6 struct {
	Anycast      map[NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast `path:"anycast" module:"nokia-conf"`
	BsrCandidate *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate                                                         `path:"bsr-candidate" module:"nokia-conf"`
	EmbeddedRp   *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp                                                           `path:"embedded-rp" module:"nokia-conf" yangPresence:"true"`
	RpCandidate  *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate                                                          `path:"rp-candidate" module:"nokia-conf"`
	Static       *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static                                                               `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key represents the key for list Anycast of element /nokia-conf/configure/service/vprn/pim/rp/ipv6.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key struct {
	Ipv6Address string `path:"ipv6-address"`
	RpSetPeer   string `path:"rp-set-peer"`
}

// NewAnycast creates a new entry in the Anycast list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) NewAnycast(Ipv6Address string, RpSetPeer string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast)
	}

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Anycast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Anycast", key)
	}

	t.Anycast[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast{
		Ipv6Address: &Ipv6Address,
		RpSetPeer:   &RpSetPeer,
	}

	return t.Anycast[key], nil
}

// RenameAnycast renames an entry in the list Anycast within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) RenameAnycast(oldK, newK NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key) error {
	if _, ok := t.Anycast[newK]; ok {
		return fmt.Errorf("key %v already exists in Anycast", newK)
	}

	e, ok := t.Anycast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Anycast", oldK)
	}
	e.Ipv6Address = &newK.Ipv6Address
	e.RpSetPeer = &newK.RpSetPeer

	t.Anycast[newK] = e
	delete(t.Anycast, oldK)
	return nil
}

// GetOrCreateAnycast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetOrCreateAnycast(Ipv6Address string, RpSetPeer string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast {

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	if v, ok := t.Anycast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnycast(Ipv6Address, RpSetPeer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnycast got unexpected error: %v", err))
	}
	return v
}

// GetAnycast retrieves the value with the specified key from
// the Anycast map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetAnycast(Ipv6Address string, RpSetPeer string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	if lm, ok := t.Anycast[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnycast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) DeleteAnycast(Ipv6Address string, RpSetPeer string) {
	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	delete(t.Anycast, key)
}

// AppendAnycast appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast struct to the
// list Anycast of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) AppendAnycast(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key for Ipv6Address")
	}

	if v.RpSetPeer == nil {
		return fmt.Errorf("invalid nil key for RpSetPeer")
	}

	key := NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: *v.Ipv6Address,
		RpSetPeer:   *v.RpSetPeer,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast)
	}

	if _, ok := t.Anycast[key]; ok {
		return fmt.Errorf("duplicate key for list Anycast %v", key)
	}

	t.Anycast[key] = v
	return nil
}

// GetOrCreateBsrCandidate retrieves the value of the BsrCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetOrCreateBsrCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate {
	if t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	t.BsrCandidate = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate{}
	return t.BsrCandidate
}

// GetOrCreateEmbeddedRp retrieves the value of the EmbeddedRp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetOrCreateEmbeddedRp() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp {
	if t.EmbeddedRp != nil {
		return t.EmbeddedRp
	}
	t.EmbeddedRp = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp{}
	return t.EmbeddedRp
}

// GetOrCreateRpCandidate retrieves the value of the RpCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetOrCreateRpCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate {
	if t.RpCandidate != nil {
		return t.RpCandidate
	}
	t.RpCandidate = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate{}
	return t.RpCandidate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetOrCreateStatic() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static{}
	return t.Static
}

// GetBsrCandidate returns the value of the BsrCandidate struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If the receiver or the field BsrCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetBsrCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate {
	if t != nil && t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	return nil
}

// GetEmbeddedRp returns the value of the EmbeddedRp struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If the receiver or the field EmbeddedRp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetEmbeddedRp() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp {
	if t != nil && t.EmbeddedRp != nil {
		return t.EmbeddedRp
	}
	return nil
}

// GetRpCandidate returns the value of the RpCandidate struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If the receiver or the field RpCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetRpCandidate() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate {
	if t != nil && t.RpCandidate != nil {
		return t.RpCandidate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) GetStatic() *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BsrCandidate.PopulateDefaults()
	t.EmbeddedRp.PopulateDefaults()
	t.RpCandidate.PopulateDefaults()
	t.Static.PopulateDefaults()
	for _, e := range t.Anycast {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/anycast YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast struct {
	Ipv6Address *string `path:"ipv6-address" module:"nokia-conf"`
	RpSetPeer   *string `path:"rp-set-peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) IsYANGGoStruct() {}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetRpSetPeer retrieves the value of the leaf RpSetPeer from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpSetPeer is set, it can
// safely use t.GetRpSetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpSetPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) GetRpSetPeer() string {
	if t == nil || t.RpSetPeer == nil {
		return ""
	}
	return *t.RpSetPeer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	if t.RpSetPeer == nil {
		return nil, fmt.Errorf("nil value for key RpSetPeer")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
		"rp-set-peer":  *t.RpSetPeer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Anycast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/bsr-candidate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate struct {
	Address     *string                     `path:"address" module:"nokia-conf"`
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HashMaskLen *int32                      `path:"hash-mask-len" module:"nokia-conf"`
	Priority    *int32                      `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHashMaskLen retrieves the value of the leaf HashMaskLen from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashMaskLen is set, it can
// safely use t.GetHashMaskLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashMaskLen == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) GetHashMaskLen() int32 {
	if t == nil || t.HashMaskLen == nil {
		return 126
	}
	return *t.HashMaskLen
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HashMaskLen == nil {
		var v int32 = 126
		t.HashMaskLen = &v
	}
	if t.Priority == nil {
		var v int32 = 0
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_BsrCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/embedded-rp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp struct {
	AdminState E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) NewGroupRange(Ipv6Prefix string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) GetOrCreateGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange {

	key := Ipv6Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) GetGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) DeleteGroupRange(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/embedded-rp/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/rp-candidate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate struct {
	Address    *string                                                                         `path:"address" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange `path:"group-range" module:"nokia-conf"`
	Holdtime   *int32                                                                          `path:"holdtime" module:"nokia-conf"`
	Priority   *int32                                                                          `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) NewGroupRange(Ipv6Prefix string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) GetOrCreateGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange {

	key := Ipv6Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) GetGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) DeleteGroupRange(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldtime retrieves the value of the leaf Holdtime from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Holdtime is set, it can
// safely use t.GetHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Holdtime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) GetHoldtime() int32 {
	if t == nil || t.Holdtime == nil {
		return 150
	}
	return *t.Holdtime
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 192
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Holdtime == nil {
		var v int32 = 150
		t.Holdtime = &v
	}
	if t.Priority == nil {
		var v int32 = 192
		t.Priority = &v
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/rp-candidate/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_RpCandidate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/static YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static struct {
	Address map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) GetAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address struct to the
// list Address of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) AppendAddress(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/static/address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address struct {
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupPrefix        map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
	Ipv6Address        *string                                                                             `path:"ipv6-address" module:"nokia-conf"`
	Override           *bool                                                                               `path:"override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) NewGroupPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) GetOrCreateGroupPrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix {

	key := Ipv6Prefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) GetGroupPrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) DeleteGroupPrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) AppendGroupPrefix(v *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetOverride retrieves the value of the leaf Override from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Override is set, it can
// safely use t.GetOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Override == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) GetOverride() bool {
	if t == nil || t.Override == nil {
		return false
	}
	return *t.Override
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Override == nil {
		var v bool = false
		t.Override = &v
	}
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix represents the /nokia-conf/configure/service/vprn/pim/rp/ipv6/static/address/group-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix.
func (*NokiaConf_Configure_Service_Vprn_Pim_Rp_Ipv6_Static_Address_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover represents the /nokia-conf/configure/service/vprn/pim/spt-switchover YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string                                                            `path:"ip-prefix" module:"nokia-conf"`
	Threshold          NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover_Threshold_Union `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) GetThreshold() NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover_Threshold_Union {
	if t == nil || t.Threshold == nil {
		return nil
	}
	return t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover.
func (*NokiaConf_Configure_Service_Vprn_Pim_SptSwitchover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_SsmGroups represents the /nokia-conf/configure/service/vprn/pim/ssm-groups YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_SsmGroups struct {
	GroupRange map[string]*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_SsmGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Pim_SsmGroups struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) NewGroupRange(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange{
		IpPrefix: &IpPrefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Pim_SsmGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.IpPrefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_SsmGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) GetOrCreateGroupRange(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange {

	key := IpPrefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Pim_SsmGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) GetGroupRange(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Pim_SsmGroups. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) DeleteGroupRange(IpPrefix string) {
	key := IpPrefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Pim_SsmGroups. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_SsmGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_SsmGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_SsmGroups.
func (*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange represents the /nokia-conf/configure/service/vprn/pim/ssm-groups/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Pim_SsmGroups_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius represents the /nokia-conf/configure/service/vprn/radius YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Proxy              map[string]*NokiaConf_Configure_Service_Vprn_Radius_Proxy  `path:"proxy" module:"nokia-conf"`
	Server             map[string]*NokiaConf_Configure_Service_Vprn_Radius_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius) IsYANGGoStruct() {}

// NewProxy creates a new entry in the Proxy list of the
// NokiaConf_Configure_Service_Vprn_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Radius) NewProxy(Name string) (*NokiaConf_Configure_Service_Vprn_Radius_Proxy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Proxy == nil {
		t.Proxy = make(map[string]*NokiaConf_Configure_Service_Vprn_Radius_Proxy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Proxy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Proxy", key)
	}

	t.Proxy[key] = &NokiaConf_Configure_Service_Vprn_Radius_Proxy{
		Name: &Name,
	}

	return t.Proxy[key], nil
}

// RenameProxy renames an entry in the list Proxy within
// the NokiaConf_Configure_Service_Vprn_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Radius) RenameProxy(oldK, newK string) error {
	if _, ok := t.Proxy[newK]; ok {
		return fmt.Errorf("key %v already exists in Proxy", newK)
	}

	e, ok := t.Proxy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Proxy", oldK)
	}
	e.Name = &newK

	t.Proxy[newK] = e
	delete(t.Proxy, oldK)
	return nil
}

// GetOrCreateProxy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Radius) GetOrCreateProxy(Name string) *NokiaConf_Configure_Service_Vprn_Radius_Proxy {

	key := Name

	if v, ok := t.Proxy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProxy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProxy got unexpected error: %v", err))
	}
	return v
}

// GetProxy retrieves the value with the specified key from
// the Proxy map field of NokiaConf_Configure_Service_Vprn_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius) GetProxy(Name string) *NokiaConf_Configure_Service_Vprn_Radius_Proxy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Proxy[key]; ok {
		return lm
	}
	return nil
}

// DeleteProxy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Radius) DeleteProxy(Name string) {
	key := Name

	delete(t.Proxy, key)
}

// AppendProxy appends the supplied NokiaConf_Configure_Service_Vprn_Radius_Proxy struct to the
// list Proxy of NokiaConf_Configure_Service_Vprn_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Radius_Proxy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Radius) AppendProxy(v *NokiaConf_Configure_Service_Vprn_Radius_Proxy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Proxy == nil {
		t.Proxy = make(map[string]*NokiaConf_Configure_Service_Vprn_Radius_Proxy)
	}

	if _, ok := t.Proxy[key]; ok {
		return fmt.Errorf("duplicate key for list Proxy %v", key)
	}

	t.Proxy[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Service_Vprn_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Radius) NewServer(Name string) (*NokiaConf_Configure_Service_Vprn_Radius_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Vprn_Radius_Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Service_Vprn_Radius_Server{
		Name: &Name,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Service_Vprn_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Radius) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Name = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Radius) GetOrCreateServer(Name string) *NokiaConf_Configure_Service_Vprn_Radius_Server {

	key := Name

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Service_Vprn_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius) GetServer(Name string) *NokiaConf_Configure_Service_Vprn_Radius_Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Radius) DeleteServer(Name string) {
	key := Name

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Service_Vprn_Radius_Server struct to the
// list Server of NokiaConf_Configure_Service_Vprn_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Radius_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Radius) AppendServer(v *NokiaConf_Configure_Service_Vprn_Radius_Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Vprn_Radius_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Proxy {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius.
func (*NokiaConf_Configure_Service_Vprn_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy represents the /nokia-conf/configure/service/vprn/radius/proxy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy struct {
	AdminState             E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	AttributeMatching      *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching    `path:"attribute-matching" module:"nokia-conf"`
	Cache                  *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache                `path:"cache" module:"nokia-conf"`
	Defaults               *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults             `path:"defaults" module:"nokia-conf"`
	Description            *string                                                             `path:"description" module:"nokia-conf"`
	Interface              map[string]*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface `path:"interface" module:"nokia-conf"`
	LoadBalanceKey         *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey       `path:"load-balance-key" module:"nokia-conf"`
	Name                   *string                                                             `path:"name" module:"nokia-conf"`
	Purpose                E_NokiaConf_Configure_Service_Vprn_Radius_Proxy_Purpose             `path:"purpose" module:"nokia-conf"`
	PythonPolicy           *string                                                             `path:"python-policy" module:"nokia-conf"`
	Secret                 *string                                                             `path:"secret" module:"nokia-conf"`
	SendAccountingResponse *bool                                                               `path:"send-accounting-response" module:"nokia-conf"`
	WlanGw                 *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw               `path:"wlan-gw" module:"nokia-conf"`
	WlanGwGroup            *uint32                                                             `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Radius_Proxy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Radius_Proxy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius_Proxy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAttributeMatching retrieves the value of the AttributeMatching field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetOrCreateAttributeMatching() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching {
	if t.AttributeMatching != nil {
		return t.AttributeMatching
	}
	t.AttributeMatching = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching{}
	return t.AttributeMatching
}

// GetOrCreateCache retrieves the value of the Cache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetOrCreateCache() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache {
	if t.Cache != nil {
		return t.Cache
	}
	t.Cache = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache{}
	return t.Cache
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetOrCreateDefaults() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults{}
	return t.Defaults
}

// GetOrCreateLoadBalanceKey retrieves the value of the LoadBalanceKey field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetOrCreateLoadBalanceKey() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey {
	if t.LoadBalanceKey != nil {
		return t.LoadBalanceKey
	}
	t.LoadBalanceKey = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey{}
	return t.LoadBalanceKey
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetOrCreateWlanGw() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw{}
	return t.WlanGw
}

// GetAttributeMatching returns the value of the AttributeMatching struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the receiver or the field AttributeMatching is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetAttributeMatching() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching {
	if t != nil && t.AttributeMatching != nil {
		return t.AttributeMatching
	}
	return nil
}

// GetCache returns the value of the Cache struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the receiver or the field Cache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetCache() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache {
	if t != nil && t.Cache != nil {
		return t.Cache
	}
	return nil
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetDefaults() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetLoadBalanceKey returns the value of the LoadBalanceKey struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the receiver or the field LoadBalanceKey is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetLoadBalanceKey() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey {
	if t != nil && t.LoadBalanceKey != nil {
		return t.LoadBalanceKey
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetWlanGw() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPurpose retrieves the value of the leaf Purpose from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Purpose is set, it can
// safely use t.GetPurpose() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Purpose == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetPurpose() E_NokiaConf_Configure_Service_Vprn_Radius_Proxy_Purpose {
	if t == nil || t.Purpose == 0 {
		return 0
	}
	return t.Purpose
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetSendAccountingResponse retrieves the value of the leaf SendAccountingResponse from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendAccountingResponse is set, it can
// safely use t.GetSendAccountingResponse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendAccountingResponse == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetSendAccountingResponse() bool {
	if t == nil || t.SendAccountingResponse == nil {
		return false
	}
	return *t.SendAccountingResponse
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendAccountingResponse == nil {
		var v bool = false
		t.SendAccountingResponse = &v
	}
	t.AttributeMatching.PopulateDefaults()
	t.Cache.PopulateDefaults()
	t.Defaults.PopulateDefaults()
	t.LoadBalanceKey.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Radius_Proxy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching represents the /nokia-conf/configure/service/vprn/radius/proxy/attribute-matching YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching struct {
	Entry  map[uint32]*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry `path:"entry" module:"nokia-conf"`
	Type   *uint32                                                                           `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Vendor_Union      `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) NewEntry(Index uint32) (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry{
		Index: &Index,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Index = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) GetOrCreateEntry(Index uint32) *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry {

	key := Index

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) GetEntry(Index uint32) *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) DeleteEntry(Index uint32) {
	key := Index

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry struct to the
// list Entry of NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) AppendEntry(v *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) GetVendor() NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry represents the /nokia-conf/configure/service/vprn/radius/proxy/attribute-matching/entry YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry struct {
	AccountingServerPolicy     *string  `path:"accounting-server-policy" module:"nokia-conf"`
	ApplyGroups                []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationServerPolicy *string  `path:"authentication-server-policy" module:"nokia-conf"`
	Index                      *uint32  `path:"index" module:"nokia-conf"`
	PrefixString               *string  `path:"prefix-string" module:"nokia-conf"`
	SuffixString               *string  `path:"suffix-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) IsYANGGoStruct() {}

// GetAccountingServerPolicy retrieves the value of the leaf AccountingServerPolicy from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingServerPolicy is set, it can
// safely use t.GetAccountingServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) GetAccountingServerPolicy() string {
	if t == nil || t.AccountingServerPolicy == nil {
		return ""
	}
	return *t.AccountingServerPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationServerPolicy retrieves the value of the leaf AuthenticationServerPolicy from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationServerPolicy is set, it can
// safely use t.GetAuthenticationServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) GetAuthenticationServerPolicy() string {
	if t == nil || t.AuthenticationServerPolicy == nil {
		return ""
	}
	return *t.AuthenticationServerPolicy
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// GetSuffixString retrieves the value of the leaf SuffixString from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuffixString is set, it can
// safely use t.GetSuffixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuffixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) GetSuffixString() string {
	if t == nil || t.SuffixString == nil {
		return ""
	}
	return *t.SuffixString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_AttributeMatching_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache represents the /nokia-conf/configure/service/vprn/radius/proxy/cache YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache struct {
	AdminState          E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Key                 *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key                 `path:"key" module:"nokia-conf" yangPresence:"true"`
	Timeout             *uint32                                                                  `path:"timeout" module:"nokia-conf"`
	TrackAccounting     *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting     `path:"track-accounting" module:"nokia-conf"`
	TrackAuthentication *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication `path:"track-authentication" module:"nokia-conf"`
	TrackDeleteHoldTime *uint32                                                                  `path:"track-delete-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) IsYANGGoStruct() {}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetOrCreateKey() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key{}
	return t.Key
}

// GetOrCreateTrackAccounting retrieves the value of the TrackAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetOrCreateTrackAccounting() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting {
	if t.TrackAccounting != nil {
		return t.TrackAccounting
	}
	t.TrackAccounting = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting{}
	return t.TrackAccounting
}

// GetOrCreateTrackAuthentication retrieves the value of the TrackAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetOrCreateTrackAuthentication() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication {
	if t.TrackAuthentication != nil {
		return t.TrackAuthentication
	}
	t.TrackAuthentication = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication{}
	return t.TrackAuthentication
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetKey() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetTrackAccounting returns the value of the TrackAccounting struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache. If the receiver or the field TrackAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetTrackAccounting() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting {
	if t != nil && t.TrackAccounting != nil {
		return t.TrackAccounting
	}
	return nil
}

// GetTrackAuthentication returns the value of the TrackAuthentication struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache. If the receiver or the field TrackAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetTrackAuthentication() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication {
	if t != nil && t.TrackAuthentication != nil {
		return t.TrackAuthentication
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 300
	}
	return *t.Timeout
}

// GetTrackDeleteHoldTime retrieves the value of the leaf TrackDeleteHoldTime from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackDeleteHoldTime is set, it can
// safely use t.GetTrackDeleteHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackDeleteHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) GetTrackDeleteHoldTime() uint32 {
	if t == nil || t.TrackDeleteHoldTime == nil {
		return 0
	}
	return *t.TrackDeleteHoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Timeout == nil {
		var v uint32 = 300
		t.Timeout = &v
	}
	if t.TrackDeleteHoldTime == nil {
		var v uint32 = 0
		t.TrackDeleteHoldTime = &v
	}
	t.Key.PopulateDefaults()
	t.TrackAccounting.PopulateDefaults()
	t.TrackAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key represents the /nokia-conf/configure/service/vprn/radius/proxy/cache/key YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key struct {
	AttributeType *uint32                                                              `path:"attribute-type" module:"nokia-conf"`
	PacketType    E_NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key_PacketType `path:"packet-type" module:"nokia-conf"`
	Vendor        NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) IsYANGGoStruct() {}

// GetAttributeType retrieves the value of the leaf AttributeType from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttributeType is set, it can
// safely use t.GetAttributeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttributeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) GetAttributeType() uint32 {
	if t == nil || t.AttributeType == nil {
		return 0
	}
	return *t.AttributeType
}

// GetPacketType retrieves the value of the leaf PacketType from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketType is set, it can
// safely use t.GetPacketType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) GetPacketType() E_NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key_PacketType {
	if t == nil || t.PacketType == 0 {
		return 0
	}
	return t.PacketType
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) GetVendor() NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting represents the /nokia-conf/configure/service/vprn/radius/proxy/cache/track-accounting YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting struct {
	AccountingOff *bool `path:"accounting-off" module:"nokia-conf"`
	AccountingOn  *bool `path:"accounting-on" module:"nokia-conf"`
	InterimUpdate *bool `path:"interim-update" module:"nokia-conf"`
	Start         *bool `path:"start" module:"nokia-conf"`
	Stop          *bool `path:"stop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) IsYANGGoStruct() {}

// GetAccountingOff retrieves the value of the leaf AccountingOff from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingOff is set, it can
// safely use t.GetAccountingOff() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingOff == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) GetAccountingOff() bool {
	if t == nil || t.AccountingOff == nil {
		return false
	}
	return *t.AccountingOff
}

// GetAccountingOn retrieves the value of the leaf AccountingOn from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingOn is set, it can
// safely use t.GetAccountingOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingOn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) GetAccountingOn() bool {
	if t == nil || t.AccountingOn == nil {
		return false
	}
	return *t.AccountingOn
}

// GetInterimUpdate retrieves the value of the leaf InterimUpdate from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdate is set, it can
// safely use t.GetInterimUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) GetInterimUpdate() bool {
	if t == nil || t.InterimUpdate == nil {
		return false
	}
	return *t.InterimUpdate
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) GetStart() bool {
	if t == nil || t.Start == nil {
		return false
	}
	return *t.Start
}

// GetStop retrieves the value of the leaf Stop from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stop is set, it can
// safely use t.GetStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) GetStop() bool {
	if t == nil || t.Stop == nil {
		return false
	}
	return *t.Stop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccountingOff == nil {
		var v bool = false
		t.AccountingOff = &v
	}
	if t.AccountingOn == nil {
		var v bool = false
		t.AccountingOn = &v
	}
	if t.InterimUpdate == nil {
		var v bool = false
		t.InterimUpdate = &v
	}
	if t.Start == nil {
		var v bool = false
		t.Start = &v
	}
	if t.Stop == nil {
		var v bool = false
		t.Stop = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication represents the /nokia-conf/configure/service/vprn/radius/proxy/cache/track-authentication YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication struct {
	Accept *bool `path:"accept" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication) IsYANGGoStruct() {}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication) GetAccept() bool {
	if t == nil || t.Accept == nil {
		return true
	}
	return *t.Accept
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Accept == nil {
		var v bool = true
		t.Accept = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Cache_TrackAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults represents the /nokia-conf/configure/service/vprn/radius/proxy/defaults YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults struct {
	AccountingServerPolicy     *string `path:"accounting-server-policy" module:"nokia-conf"`
	AuthenticationServerPolicy *string `path:"authentication-server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) IsYANGGoStruct() {}

// GetAccountingServerPolicy retrieves the value of the leaf AccountingServerPolicy from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingServerPolicy is set, it can
// safely use t.GetAccountingServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) GetAccountingServerPolicy() string {
	if t == nil || t.AccountingServerPolicy == nil {
		return ""
	}
	return *t.AccountingServerPolicy
}

// GetAuthenticationServerPolicy retrieves the value of the leaf AuthenticationServerPolicy from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationServerPolicy is set, it can
// safely use t.GetAuthenticationServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) GetAuthenticationServerPolicy() string {
	if t == nil || t.AuthenticationServerPolicy == nil {
		return ""
	}
	return *t.AuthenticationServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface represents the /nokia-conf/configure/service/vprn/radius/proxy/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey represents the /nokia-conf/configure/service/vprn/radius/proxy/load-balance-key YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey struct {
	Attribute_1 *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1 `path:"attribute-1" module:"nokia-conf"`
	Attribute_2 *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2 `path:"attribute-2" module:"nokia-conf"`
	Attribute_3 *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3 `path:"attribute-3" module:"nokia-conf"`
	Attribute_4 *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4 `path:"attribute-4" module:"nokia-conf"`
	Attribute_5 *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5 `path:"attribute-5" module:"nokia-conf"`
	SourceIpUdp YANGEmpty                                                                 `path:"source-ip-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) IsYANGGoStruct() {}

// GetOrCreateAttribute_1 retrieves the value of the Attribute_1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_1() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1 {
	if t.Attribute_1 != nil {
		return t.Attribute_1
	}
	t.Attribute_1 = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1{}
	return t.Attribute_1
}

// GetOrCreateAttribute_2 retrieves the value of the Attribute_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_2() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2 {
	if t.Attribute_2 != nil {
		return t.Attribute_2
	}
	t.Attribute_2 = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2{}
	return t.Attribute_2
}

// GetOrCreateAttribute_3 retrieves the value of the Attribute_3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_3() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3 {
	if t.Attribute_3 != nil {
		return t.Attribute_3
	}
	t.Attribute_3 = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3{}
	return t.Attribute_3
}

// GetOrCreateAttribute_4 retrieves the value of the Attribute_4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_4() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4 {
	if t.Attribute_4 != nil {
		return t.Attribute_4
	}
	t.Attribute_4 = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4{}
	return t.Attribute_4
}

// GetOrCreateAttribute_5 retrieves the value of the Attribute_5 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_5() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5 {
	if t.Attribute_5 != nil {
		return t.Attribute_5
	}
	t.Attribute_5 = &NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5{}
	return t.Attribute_5
}

// GetAttribute_1 returns the value of the Attribute_1 struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetAttribute_1() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1 {
	if t != nil && t.Attribute_1 != nil {
		return t.Attribute_1
	}
	return nil
}

// GetAttribute_2 returns the value of the Attribute_2 struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetAttribute_2() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2 {
	if t != nil && t.Attribute_2 != nil {
		return t.Attribute_2
	}
	return nil
}

// GetAttribute_3 returns the value of the Attribute_3 struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetAttribute_3() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3 {
	if t != nil && t.Attribute_3 != nil {
		return t.Attribute_3
	}
	return nil
}

// GetAttribute_4 returns the value of the Attribute_4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetAttribute_4() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4 {
	if t != nil && t.Attribute_4 != nil {
		return t.Attribute_4
	}
	return nil
}

// GetAttribute_5 returns the value of the Attribute_5 struct pointer
// from NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_5 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetAttribute_5() *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5 {
	if t != nil && t.Attribute_5 != nil {
		return t.Attribute_5
	}
	return nil
}

// GetSourceIpUdp retrieves the value of the leaf SourceIpUdp from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIpUdp is set, it can
// safely use t.GetSourceIpUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIpUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) GetSourceIpUdp() YANGEmpty {
	if t == nil || t.SourceIpUdp == false {
		return false
	}
	return t.SourceIpUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Attribute_1.PopulateDefaults()
	t.Attribute_2.PopulateDefaults()
	t.Attribute_3.PopulateDefaults()
	t.Attribute_4.PopulateDefaults()
	t.Attribute_5.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1 represents the /nokia-conf/configure/service/vprn/radius/proxy/load-balance-key/attribute-1 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1 struct {
	Type   *uint32                                                                               `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) GetVendor() NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2 represents the /nokia-conf/configure/service/vprn/radius/proxy/load-balance-key/attribute-2 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2 struct {
	Type   *uint32                                                                               `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) GetVendor() NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3 represents the /nokia-conf/configure/service/vprn/radius/proxy/load-balance-key/attribute-3 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3 struct {
	Type   *uint32                                                                               `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) GetVendor() NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4 represents the /nokia-conf/configure/service/vprn/radius/proxy/load-balance-key/attribute-4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4 struct {
	Type   *uint32                                                                               `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) GetVendor() NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5 represents the /nokia-conf/configure/service/vprn/radius/proxy/load-balance-key/attribute-5 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5 struct {
	Type   *uint32                                                                               `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) GetVendor() NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_LoadBalanceKey_Attribute_5) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw represents the /nokia-conf/configure/service/vprn/radius/proxy/wlan-gw YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Address        *string  `path:"ipv6-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw.
func (*NokiaConf_Configure_Service_Vprn_Radius_Proxy_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Radius_Server represents the /nokia-conf/configure/service/vprn/radius/server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Radius_Server struct {
	AcceptCoa            *bool    `path:"accept-coa" module:"nokia-conf"`
	AcctPort             *int32   `path:"acct-port" module:"nokia-conf"`
	Address              *string  `path:"address" module:"nokia-conf"`
	ApplyGroups          []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthPort             *int32   `path:"auth-port" module:"nokia-conf"`
	Description          *string  `path:"description" module:"nokia-conf"`
	Name                 *string  `path:"name" module:"nokia-conf"`
	PendingRequestsLimit *uint32  `path:"pending-requests-limit" module:"nokia-conf"`
	PythonPolicy         *string  `path:"python-policy" module:"nokia-conf"`
	Secret               *string  `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Radius_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Radius_Server) IsYANGGoStruct() {}

// GetAcceptCoa retrieves the value of the leaf AcceptCoa from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptCoa is set, it can
// safely use t.GetAcceptCoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptCoa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetAcceptCoa() bool {
	if t == nil || t.AcceptCoa == nil {
		return false
	}
	return *t.AcceptCoa
}

// GetAcctPort retrieves the value of the leaf AcctPort from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetAcctPort() int32 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthPort retrieves the value of the leaf AuthPort from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetAuthPort() int32 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPendingRequestsLimit retrieves the value of the leaf PendingRequestsLimit from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PendingRequestsLimit is set, it can
// safely use t.GetPendingRequestsLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PendingRequestsLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetPendingRequestsLimit() uint32 {
	if t == nil || t.PendingRequestsLimit == nil {
		return 4096
	}
	return *t.PendingRequestsLimit
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Service_Vprn_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Radius_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptCoa == nil {
		var v bool = false
		t.AcceptCoa = &v
	}
	if t.AcctPort == nil {
		var v int32 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v int32 = 1812
		t.AuthPort = &v
	}
	if t.PendingRequestsLimit == nil {
		var v uint32 = 4096
		t.PendingRequestsLimit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Radius_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Radius_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Radius_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Radius_Server.
func (*NokiaConf_Configure_Service_Vprn_Radius_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Reassembly represents the /nokia-conf/configure/service/vprn/reassembly YANG schema element.
type NokiaConf_Configure_Service_Vprn_Reassembly struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	NatGroup           *uint32  `path:"nat-group" module:"nokia-conf"`
	ToBaseNetwork      *bool    `path:"to-base-network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Reassembly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Reassembly) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Service_Vprn_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetToBaseNetwork retrieves the value of the leaf ToBaseNetwork from the NokiaConf_Configure_Service_Vprn_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToBaseNetwork is set, it can
// safely use t.GetToBaseNetwork() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToBaseNetwork == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) GetToBaseNetwork() bool {
	if t == nil || t.ToBaseNetwork == nil {
		return false
	}
	return *t.ToBaseNetwork
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Reassembly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ToBaseNetwork == nil {
		var v bool = false
		t.ToBaseNetwork = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Reassembly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Reassembly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Reassembly.
func (*NokiaConf_Configure_Service_Vprn_Reassembly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface represents the /nokia-conf/configure/service/vprn/redundant-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                  `path:"description" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime            `path:"hold-time" module:"nokia-conf"`
	InterfaceName      *string                                                                  `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                                  `path:"ip-mtu" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4                `path:"ipv4" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface) IsYANGGoStruct() {}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vprn_RedundantInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vprn_RedundantInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_RedundantInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vprn_RedundantInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_RedundantInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vprn_RedundantInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4{}
	return t.Ipv4
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetHoldTime() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetIpv4() *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Vprn_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.HoldTime.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_RedundantInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime represents the /nokia-conf/configure/service/vprn/redundant-interface/hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) GetIpv4() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4 represents the /nokia-conf/configure/service/vprn/redundant-interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/service/vprn/redundant-interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/service/vprn/redundant-interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4 represents the /nokia-conf/configure/service/vprn/redundant-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4 struct {
	Primary *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary `path:"primary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) IsYANGGoStruct() {}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary{}
	return t.Primary
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Primary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary represents the /nokia-conf/configure/service/vprn/redundant-interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
	RemoteIp           *string  `path:"remote-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRemoteIp retrieves the value of the leaf RemoteIp from the NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIp is set, it can
// safely use t.GetRemoteIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) GetRemoteIp() string {
	if t == nil || t.RemoteIp == nil {
		return ""
	}
	return *t.RemoteIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp represents the /nokia-conf/configure/service/vprn/redundant-interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp struct {
	AdminState         E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	ControlWord        *bool                                                                 `path:"control-word" module:"nokia-conf"`
	Description        *string                                                               `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                               `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress represents the /nokia-conf/configure/service/vprn/redundant-interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                     `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/vprn/redundant-interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress represents the /nokia-conf/configure/service/vprn/redundant-interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                      `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/vprn/redundant-interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vprn_RedundantInterface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip represents the /nokia-conf/configure/service/vprn/rip YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip struct {
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                               `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                  `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                  `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	ExportLimit        *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit      `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy       []string                                               `path:"export-policy" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group `path:"group" module:"nokia-conf"`
	ImportPolicy       []string                                               `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                `path:"preference" module:"nokia-conf"`
	PropagateMetric    *bool                                                  `path:"propagate-metric" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Service_Vprn_Rip_Send            `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                  `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Service_Vprn_Rip_Timers           `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Rip struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Rip) NewGroup(GroupName string) (*NokiaConf_Configure_Service_Vprn_Rip_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Rip_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Rip struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Rip. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Service_Vprn_Rip_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Rip. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetGroup(GroupName string) *NokiaConf_Configure_Service_Vprn_Rip_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Rip. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Rip) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Rip_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Rip. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Rip_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Rip) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Rip_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetOrCreateExportLimit() *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Service_Vprn_Rip_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Rip_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Rip_Timers{}
	return t.Timers
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Rip. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetExportLimit() *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Rip. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetTimers() *NokiaConf_Configure_Service_Vprn_Rip_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return NokiaTypesRip_AuthType_none
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 25
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 1
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 1
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetPropagateMetric retrieves the value of the leaf PropagateMetric from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateMetric is set, it can
// safely use t.GetPropagateMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetPropagateMetric() bool {
	if t == nil || t.PropagateMetric == nil {
		return false
	}
	return *t.PropagateMetric
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaTypesRip_Receive_both
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetSend() E_NokiaConf_Configure_Service_Vprn_Rip_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_Service_Vprn_Rip_Send_broadcast
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return true
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AuthenticationType == 0 {
		t.AuthenticationType = NokiaTypesRip_AuthType_none
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.CheckZero == nil {
		var v bool = false
		t.CheckZero = &v
	}
	if t.MessageSize == nil {
		var v uint32 = 25
		t.MessageSize = &v
	}
	if t.MetricIn == nil {
		var v uint32 = 1
		t.MetricIn = &v
	}
	if t.MetricOut == nil {
		var v uint32 = 1
		t.MetricOut = &v
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	if t.PropagateMetric == nil {
		var v bool = false
		t.PropagateMetric = &v
	}
	if t.Receive == 0 {
		t.Receive = NokiaTypesRip_Receive_both
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_Service_Vprn_Rip_Send_broadcast
	}
	if t.SplitHorizon == nil {
		var v bool = true
		t.SplitHorizon = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip.
func (*NokiaConf_Configure_Service_Vprn_Rip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip_ExportLimit represents the /nokia-conf/configure/service/vprn/rip/export-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Service_Vprn_Rip_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Rip_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip_ExportLimit.
func (*NokiaConf_Configure_Service_Vprn_Rip_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip_Group represents the /nokia-conf/configure/service/vprn/rip/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip_Group struct {
	AdminState         E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                         `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                                        `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                           `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                           `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                         `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                        `path:"export-policy" module:"nokia-conf"`
	GroupName          *string                                                         `path:"group-name" module:"nokia-conf"`
	ImportPolicy       []string                                                        `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                         `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                         `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                         `path:"metric-out" module:"nokia-conf"`
	Neighbor           map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Preference         *uint32                                                         `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                         `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Service_Vprn_Rip_Group_Send               `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                           `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers              `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Service_Vprn_Rip_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) NewNeighbor(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor{
		InterfaceName: &InterfaceName,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Service_Vprn_Rip_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.InterfaceName = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Rip_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetOrCreateNeighbor(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor {

	key := InterfaceName

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Service_Vprn_Rip_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetNeighbor(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Rip_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) DeleteNeighbor(InterfaceName string) {
	key := InterfaceName

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Service_Vprn_Rip_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) AppendNeighbor(v *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Rip_Group_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Rip_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetTimers() *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetSend() E_NokiaConf_Configure_Service_Vprn_Rip_Group_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Rip_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip_Group.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor represents the /nokia-conf/configure/service/vprn/rip/group/neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor struct {
	AdminState         E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                                        `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                                                       `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                                          `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                                          `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                                        `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                                       `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                                       `path:"import-policy" module:"nokia-conf"`
	InterfaceName      *string                                                                        `path:"interface-name" module:"nokia-conf"`
	MessageSize        *uint32                                                                        `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                                        `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                                        `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                                        `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                                        `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Send                     `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                                          `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers                    `path:"timers" module:"nokia-conf" yangPresence:"true"`
	UnicastAddress     map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress `path:"unicast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) IsYANGGoStruct() {}

// NewUnicastAddress creates a new entry in the UnicastAddress list of the
// NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) NewUnicastAddress(Address string) (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastAddress", key)
	}

	t.UnicastAddress[key] = &NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress{
		Address: &Address,
	}

	return t.UnicastAddress[key], nil
}

// RenameUnicastAddress renames an entry in the list UnicastAddress within
// the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) RenameUnicastAddress(oldK, newK string) error {
	if _, ok := t.UnicastAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastAddress", newK)
	}

	e, ok := t.UnicastAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastAddress", oldK)
	}
	e.Address = &newK

	t.UnicastAddress[newK] = e
	delete(t.UnicastAddress, oldK)
	return nil
}

// GetOrCreateUnicastAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetOrCreateUnicastAddress(Address string) *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress {

	key := Address

	if v, ok := t.UnicastAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastAddress got unexpected error: %v", err))
	}
	return v
}

// GetUnicastAddress retrieves the value with the specified key from
// the UnicastAddress map field of NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetUnicastAddress(Address string) *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.UnicastAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) DeleteUnicastAddress(Address string) {
	key := Address

	delete(t.UnicastAddress, key)
}

// AppendUnicastAddress appends the supplied NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress struct to the
// list UnicastAddress of NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) AppendUnicastAddress(v *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress)
	}

	if _, ok := t.UnicastAddress[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastAddress %v", key)
	}

	t.UnicastAddress[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetTimers() *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetSend() E_NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.UnicastAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers represents the /nokia-conf/configure/service/vprn/rip/group/neighbor/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress represents the /nokia-conf/configure/service/vprn/rip/group/neighbor/unicast-address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Neighbor_UnicastAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip_Group_Timers represents the /nokia-conf/configure/service/vprn/rip/group/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip_Group_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Service_Vprn_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Service_Vprn_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip_Group_Timers.
func (*NokiaConf_Configure_Service_Vprn_Rip_Group_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Rip_Timers represents the /nokia-conf/configure/service/vprn/rip/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Rip_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Rip_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Rip_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Service_Vprn_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Service_Vprn_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Rip_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Rip_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Rip_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Rip_Timers.
func (*NokiaConf_Configure_Service_Vprn_Rip_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng represents the /nokia-conf/configure/service/vprn/ripng YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng struct {
	AdminState         E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool                                                    `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                    `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	ExportLimit        *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit      `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy       []string                                                 `path:"export-policy" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group `path:"group" module:"nokia-conf"`
	ImportPolicy       []string                                                 `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                  `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                  `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                  `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                  `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRipng_Receive                                `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Service_Vprn_Ripng_Send            `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                    `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Service_Vprn_Ripng_Timers           `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Ripng struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) NewGroup(GroupName string) (*NokiaConf_Configure_Service_Vprn_Ripng_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Ripng_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Ripng struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ripng. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Service_Vprn_Ripng_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Ripng. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetGroup(GroupName string) *NokiaConf_Configure_Service_Vprn_Ripng_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ripng. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Ripng_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Ripng. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ripng_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Ripng_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetOrCreateExportLimit() *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Ripng_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Ripng_Timers{}
	return t.Timers
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Service_Vprn_Ripng. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetExportLimit() *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Ripng. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetTimers() *NokiaConf_Configure_Service_Vprn_Ripng_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 25
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 1
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 1
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaTypesRipng_Receive_ripng
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetSend() E_NokiaConf_Configure_Service_Vprn_Ripng_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_Service_Vprn_Ripng_Send_ripng
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return true
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.CheckZero == nil {
		var v bool = false
		t.CheckZero = &v
	}
	if t.MessageSize == nil {
		var v uint32 = 25
		t.MessageSize = &v
	}
	if t.MetricIn == nil {
		var v uint32 = 1
		t.MetricIn = &v
	}
	if t.MetricOut == nil {
		var v uint32 = 1
		t.MetricOut = &v
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	if t.Receive == 0 {
		t.Receive = NokiaTypesRipng_Receive_ripng
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_Service_Vprn_Ripng_Send_ripng
	}
	if t.SplitHorizon == nil {
		var v bool = true
		t.SplitHorizon = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng.
func (*NokiaConf_Configure_Service_Vprn_Ripng) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit represents the /nokia-conf/configure/service/vprn/ripng/export-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit.
func (*NokiaConf_Configure_Service_Vprn_Ripng_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng_Group represents the /nokia-conf/configure/service/vprn/ripng/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng_Group struct {
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool                                                             `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                             `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                          `path:"export-policy" module:"nokia-conf"`
	GroupName          *string                                                           `path:"group-name" module:"nokia-conf"`
	ImportPolicy       []string                                                          `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                           `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                           `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                           `path:"metric-out" module:"nokia-conf"`
	Neighbor           map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Preference         *uint32                                                           `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRipng_Receive                                         `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Service_Vprn_Ripng_Group_Send               `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                             `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers              `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Service_Vprn_Ripng_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) NewNeighbor(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor{
		InterfaceName: &InterfaceName,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Service_Vprn_Ripng_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.InterfaceName = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ripng_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetOrCreateNeighbor(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor {

	key := InterfaceName

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Service_Vprn_Ripng_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetNeighbor(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ripng_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) DeleteNeighbor(InterfaceName string) {
	key := InterfaceName

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Service_Vprn_Ripng_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) AppendNeighbor(v *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Ripng_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetTimers() *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetSend() E_NokiaConf_Configure_Service_Vprn_Ripng_Group_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ripng_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng_Group.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor represents the /nokia-conf/configure/service/vprn/ripng/group/neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor struct {
	AdminState         E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness        *bool                                                                            `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                                            `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                                          `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                                         `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                                         `path:"import-policy" module:"nokia-conf"`
	InterfaceName      *string                                                                          `path:"interface-name" module:"nokia-conf"`
	MessageSize        *uint32                                                                          `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                                          `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                                          `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                                          `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRipng_Receive                                                        `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Send                     `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                                            `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers                    `path:"timers" module:"nokia-conf" yangPresence:"true"`
	UnicastAddress     map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress `path:"unicast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) IsYANGGoStruct() {}

// NewUnicastAddress creates a new entry in the UnicastAddress list of the
// NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) NewUnicastAddress(Address string) (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastAddress", key)
	}

	t.UnicastAddress[key] = &NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress{
		Address: &Address,
	}

	return t.UnicastAddress[key], nil
}

// RenameUnicastAddress renames an entry in the list UnicastAddress within
// the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) RenameUnicastAddress(oldK, newK string) error {
	if _, ok := t.UnicastAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastAddress", newK)
	}

	e, ok := t.UnicastAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastAddress", oldK)
	}
	e.Address = &newK

	t.UnicastAddress[newK] = e
	delete(t.UnicastAddress, oldK)
	return nil
}

// GetOrCreateUnicastAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetOrCreateUnicastAddress(Address string) *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress {

	key := Address

	if v, ok := t.UnicastAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastAddress got unexpected error: %v", err))
	}
	return v
}

// GetUnicastAddress retrieves the value with the specified key from
// the UnicastAddress map field of NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetUnicastAddress(Address string) *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.UnicastAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) DeleteUnicastAddress(Address string) {
	key := Address

	delete(t.UnicastAddress, key)
}

// AppendUnicastAddress appends the supplied NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress struct to the
// list UnicastAddress of NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) AppendUnicastAddress(v *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress)
	}

	if _, ok := t.UnicastAddress[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastAddress %v", key)
	}

	t.UnicastAddress[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetOrCreateTimers() *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetTimers() *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetSend() E_NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.UnicastAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers represents the /nokia-conf/configure/service/vprn/ripng/group/neighbor/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress represents the /nokia-conf/configure/service/vprn/ripng/group/neighbor/unicast-address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Neighbor_UnicastAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers represents the /nokia-conf/configure/service/vprn/ripng/group/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Group_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Ripng_Timers represents the /nokia-conf/configure/service/vprn/ripng/timers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Ripng_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Ripng_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Service_Vprn_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Service_Vprn_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Ripng_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Ripng_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Ripng_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Ripng_Timers.
func (*NokiaConf_Configure_Service_Vprn_Ripng_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 represents the /nokia-conf/configure/service/vprn/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Instance           *int32                                                                `path:"instance" module:"nokia-conf"`
	Locator            map[string]*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator `path:"locator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) IsYANGGoStruct() {}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) NewLocator(LocatorName string) (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) GetLocator(LocatorName string) *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator struct to the
// list Locator of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) AppendLocator(v *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) GetInstance() int32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Instance == nil {
		return nil, fmt.Errorf("nil value for key Instance")
	}

	return map[string]interface{}{
		"instance": *t.Instance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator represents the /nokia-conf/configure/service/vprn/segment-routing-v6/locator YANG schema element.
type NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Function           *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function `path:"function" module:"nokia-conf"`
	LocatorName        *string                                                             `path:"locator-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) IsYANGGoStruct() {}

// GetOrCreateFunction retrieves the value of the Function field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) GetOrCreateFunction() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function {
	if t.Function != nil {
		return t.Function
	}
	t.Function = &NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function{}
	return t.Function
}

// GetFunction returns the value of the Function struct pointer
// from NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator. If the receiver or the field Function is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) GetFunction() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function {
	if t != nil && t.Function != nil {
		return t.Function
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Function.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function represents the /nokia-conf/configure/service/vprn/segment-routing-v6/locator/function YANG schema element.
type NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function struct {
	EndDt4  *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4  `path:"end-dt4" module:"nokia-conf" yangPresence:"true"`
	EndDt46 *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46 `path:"end-dt46" module:"nokia-conf" yangPresence:"true"`
	EndDt6  *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6  `path:"end-dt6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) IsYANGGoStruct() {}

// GetOrCreateEndDt4 retrieves the value of the EndDt4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) GetOrCreateEndDt4() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4 {
	if t.EndDt4 != nil {
		return t.EndDt4
	}
	t.EndDt4 = &NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4{}
	return t.EndDt4
}

// GetOrCreateEndDt46 retrieves the value of the EndDt46 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) GetOrCreateEndDt46() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46 {
	if t.EndDt46 != nil {
		return t.EndDt46
	}
	t.EndDt46 = &NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46{}
	return t.EndDt46
}

// GetOrCreateEndDt6 retrieves the value of the EndDt6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) GetOrCreateEndDt6() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6 {
	if t.EndDt6 != nil {
		return t.EndDt6
	}
	t.EndDt6 = &NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6{}
	return t.EndDt6
}

// GetEndDt4 returns the value of the EndDt4 struct pointer
// from NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function. If the receiver or the field EndDt4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) GetEndDt4() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4 {
	if t != nil && t.EndDt4 != nil {
		return t.EndDt4
	}
	return nil
}

// GetEndDt46 returns the value of the EndDt46 struct pointer
// from NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function. If the receiver or the field EndDt46 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) GetEndDt46() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46 {
	if t != nil && t.EndDt46 != nil {
		return t.EndDt46
	}
	return nil
}

// GetEndDt6 returns the value of the EndDt6 struct pointer
// from NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function. If the receiver or the field EndDt6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) GetEndDt6() *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6 {
	if t != nil && t.EndDt6 != nil {
		return t.EndDt6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EndDt4.PopulateDefaults()
	t.EndDt46.PopulateDefaults()
	t.EndDt6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4 represents the /nokia-conf/configure/service/vprn/segment-routing-v6/locator/function/end-dt4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46 represents the /nokia-conf/configure/service/vprn/segment-routing-v6/locator/function/end-dt46 YANG schema element.
type NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt46) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6 represents the /nokia-conf/configure/service/vprn/segment-routing-v6/locator/function/end-dt6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6.
func (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6_Locator_Function_EndDt6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SfmOverload represents the /nokia-conf/configure/service/vprn/sfm-overload YANG schema element.
type NokiaConf_Configure_Service_Vprn_SfmOverload struct {
	HoldoffTime *uint32 `path:"holdoff-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SfmOverload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SfmOverload) IsYANGGoStruct() {}

// GetHoldoffTime retrieves the value of the leaf HoldoffTime from the NokiaConf_Configure_Service_Vprn_SfmOverload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldoffTime is set, it can
// safely use t.GetHoldoffTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldoffTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SfmOverload) GetHoldoffTime() uint32 {
	if t == nil || t.HoldoffTime == nil {
		return 0
	}
	return *t.HoldoffTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SfmOverload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SfmOverload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SfmOverload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SfmOverload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SfmOverload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SfmOverload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SfmOverload.
func (*NokiaConf_Configure_Service_Vprn_SfmOverload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SgtQos represents the /nokia-conf/configure/service/vprn/sgt-qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_SgtQos struct {
	Dot1P *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P `path:"dot1p" module:"nokia-conf"`
	Dscp  *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp  `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SgtQos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SgtQos) IsYANGGoStruct() {}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) GetOrCreateDot1P() *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) GetOrCreateDscp() *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Service_Vprn_SgtQos_Dscp{}
	return t.Dscp
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Service_Vprn_SgtQos. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) GetDot1P() *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Service_Vprn_SgtQos. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) GetDscp() *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SgtQos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1P.PopulateDefaults()
	t.Dscp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SgtQos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SgtQos.
func (*NokiaConf_Configure_Service_Vprn_SgtQos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P represents the /nokia-conf/configure/service/vprn/sgt-qos/dot1p YANG schema element.
type NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P struct {
	Application map[E_NokiaTypesRouter_Dot1PAppName]*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application `path:"application" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) NewApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) (*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_Dot1PAppName]*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application)
	}

	key := Dot1PAppName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application{
		Dot1PAppName: Dot1PAppName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) RenameApplication(oldK, newK E_NokiaTypesRouter_Dot1PAppName) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.Dot1PAppName = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) GetOrCreateApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application {

	key := Dot1PAppName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(Dot1PAppName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) GetApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application {

	if t == nil {
		return nil
	}

	key := Dot1PAppName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) DeleteApplication(Dot1PAppName E_NokiaTypesRouter_Dot1PAppName) {
	key := Dot1PAppName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application struct to the
// list Application of NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) AppendApplication(v *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) error {
	key := v.Dot1PAppName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_Dot1PAppName]*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application represents the /nokia-conf/configure/service/vprn/sgt-qos/dot1p/application YANG schema element.
type NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Dot1P              NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application_Dot1P_Union `path:"dot1p" module:"nokia-conf"`
	Dot1PAppName       E_NokiaTypesRouter_Dot1PAppName                                       `path:"dot1p-app-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) GetDot1P() NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application_Dot1P_Union {
	if t == nil || t.Dot1P == nil {
		return nil
	}
	return t.Dot1P
}

// GetDot1PAppName retrieves the value of the leaf Dot1PAppName from the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PAppName is set, it can
// safely use t.GetDot1PAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PAppName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) GetDot1PAppName() E_NokiaTypesRouter_Dot1PAppName {
	if t == nil || t.Dot1PAppName == 0 {
		return 0
	}
	return t.Dot1PAppName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-app-name": t.Dot1PAppName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dot1P_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SgtQos_Dscp represents the /nokia-conf/configure/service/vprn/sgt-qos/dscp YANG schema element.
type NokiaConf_Configure_Service_Vprn_SgtQos_Dscp struct {
	Application map[E_NokiaTypesRouter_DscpAppNameVprn]*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application `path:"application" module:"nokia-conf"`
	DscpMap     map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap               `path:"dscp-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SgtQos_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Service_Vprn_SgtQos_Dscp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) NewApplication(DscpAppName E_NokiaTypesRouter_DscpAppNameVprn) (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_DscpAppNameVprn]*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application)
	}

	key := DscpAppName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application{
		DscpAppName: DscpAppName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) RenameApplication(oldK, newK E_NokiaTypesRouter_DscpAppNameVprn) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.DscpAppName = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) GetOrCreateApplication(DscpAppName E_NokiaTypesRouter_DscpAppNameVprn) *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application {

	key := DscpAppName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(DscpAppName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) GetApplication(DscpAppName E_NokiaTypesRouter_DscpAppNameVprn) *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application {

	if t == nil {
		return nil
	}

	key := DscpAppName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) DeleteApplication(DscpAppName E_NokiaTypesRouter_DscpAppNameVprn) {
	key := DscpAppName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application struct to the
// list Application of NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) AppendApplication(v *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) error {
	key := v.DscpAppName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[E_NokiaTypesRouter_DscpAppNameVprn]*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// NewDscpMap creates a new entry in the DscpMap list of the
// NokiaConf_Configure_Service_Vprn_SgtQos_Dscp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) NewDscpMap(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpMap == nil {
		t.DscpMap = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DscpMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DscpMap", key)
	}

	t.DscpMap[key] = &NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap{
		DscpName: DscpName,
	}

	return t.DscpMap[key], nil
}

// RenameDscpMap renames an entry in the list DscpMap within
// the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) RenameDscpMap(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.DscpMap[newK]; ok {
		return fmt.Errorf("key %v already exists in DscpMap", newK)
	}

	e, ok := t.DscpMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DscpMap", oldK)
	}
	e.DscpName = newK

	t.DscpMap[newK] = e
	delete(t.DscpMap, oldK)
	return nil
}

// GetOrCreateDscpMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) GetOrCreateDscpMap(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap {

	key := DscpName

	if v, ok := t.DscpMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscpMap(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscpMap got unexpected error: %v", err))
	}
	return v
}

// GetDscpMap retrieves the value with the specified key from
// the DscpMap map field of NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) GetDscpMap(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.DscpMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscpMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) DeleteDscpMap(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.DscpMap, key)
}

// AppendDscpMap appends the supplied NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap struct to the
// list DscpMap of NokiaConf_Configure_Service_Vprn_SgtQos_Dscp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) AppendDscpMap(v *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpMap == nil {
		t.DscpMap = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap)
	}

	if _, ok := t.DscpMap[key]; ok {
		return fmt.Errorf("duplicate key for list DscpMap %v", key)
	}

	t.DscpMap[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
	for _, e := range t.DscpMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SgtQos_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SgtQos_Dscp.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application represents the /nokia-conf/configure/service/vprn/sgt-qos/dscp/application YANG schema element.
type NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Dscp               NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application_Dscp_Union `path:"dscp" module:"nokia-conf"`
	DscpAppName        E_NokiaTypesRouter_DscpAppNameVprn                                  `path:"dscp-app-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) GetDscp() NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application_Dscp_Union {
	if t == nil || t.Dscp == nil {
		return nil
	}
	return t.Dscp
}

// GetDscpAppName retrieves the value of the leaf DscpAppName from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpAppName is set, it can
// safely use t.GetDscpAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpAppName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) GetDscpAppName() E_NokiaTypesRouter_DscpAppNameVprn {
	if t == nil || t.DscpAppName == 0 {
		return 0
	}
	return t.DscpAppName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-app-name": t.DscpAppName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap represents the /nokia-conf/configure/service/vprn/sgt-qos/dscp/dscp-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName           E_NokiaTypesQos_DscpName `path:"dscp-name" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName  `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap.
func (*NokiaConf_Configure_Service_Vprn_SgtQos_Dscp_DscpMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Snmp represents the /nokia-conf/configure/service/vprn/snmp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Snmp struct {
	Access    *bool                                                       `path:"access" module:"nokia-conf"`
	Community map[string]*NokiaConf_Configure_Service_Vprn_Snmp_Community `path:"community" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Snmp) IsYANGGoStruct() {}

// NewCommunity creates a new entry in the Community list of the
// NokiaConf_Configure_Service_Vprn_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) NewCommunity(CommunityString string) (*NokiaConf_Configure_Service_Vprn_Snmp_Community, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_Service_Vprn_Snmp_Community)
	}

	key := CommunityString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Community[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Community", key)
	}

	t.Community[key] = &NokiaConf_Configure_Service_Vprn_Snmp_Community{
		CommunityString: &CommunityString,
	}

	return t.Community[key], nil
}

// RenameCommunity renames an entry in the list Community within
// the NokiaConf_Configure_Service_Vprn_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) RenameCommunity(oldK, newK string) error {
	if _, ok := t.Community[newK]; ok {
		return fmt.Errorf("key %v already exists in Community", newK)
	}

	e, ok := t.Community[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Community", oldK)
	}
	e.CommunityString = &newK

	t.Community[newK] = e
	delete(t.Community, oldK)
	return nil
}

// GetOrCreateCommunity retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) GetOrCreateCommunity(CommunityString string) *NokiaConf_Configure_Service_Vprn_Snmp_Community {

	key := CommunityString

	if v, ok := t.Community[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunity(CommunityString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunity got unexpected error: %v", err))
	}
	return v
}

// GetCommunity retrieves the value with the specified key from
// the Community map field of NokiaConf_Configure_Service_Vprn_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) GetCommunity(CommunityString string) *NokiaConf_Configure_Service_Vprn_Snmp_Community {

	if t == nil {
		return nil
	}

	key := CommunityString

	if lm, ok := t.Community[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunity deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) DeleteCommunity(CommunityString string) {
	key := CommunityString

	delete(t.Community, key)
}

// AppendCommunity appends the supplied NokiaConf_Configure_Service_Vprn_Snmp_Community struct to the
// list Community of NokiaConf_Configure_Service_Vprn_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Snmp_Community already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) AppendCommunity(v *NokiaConf_Configure_Service_Vprn_Snmp_Community) error {
	if v.CommunityString == nil {
		return fmt.Errorf("invalid nil key received for CommunityString")
	}

	key := *v.CommunityString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_Service_Vprn_Snmp_Community)
	}

	if _, ok := t.Community[key]; ok {
		return fmt.Errorf("duplicate key for list Community %v", key)
	}

	t.Community[key] = v
	return nil
}

// GetAccess retrieves the value of the leaf Access from the NokiaConf_Configure_Service_Vprn_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Access is set, it can
// safely use t.GetAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Access == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) GetAccess() bool {
	if t == nil || t.Access == nil {
		return false
	}
	return *t.Access
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Access == nil {
		var v bool = false
		t.Access = &v
	}
	for _, e := range t.Community {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Snmp.
func (*NokiaConf_Configure_Service_Vprn_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Snmp_Community represents the /nokia-conf/configure/service/vprn/snmp/community YANG schema element.
type NokiaConf_Configure_Service_Vprn_Snmp_Community struct {
	AccessPermissions  E_NokiaConf_Configure_Service_Vprn_Snmp_Community_AccessPermissions `path:"access-permissions" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	CommunityString    *string                                                             `path:"community-string" module:"nokia-conf"`
	SourceAccessList   *string                                                             `path:"source-access-list" module:"nokia-conf"`
	Version            E_NokiaConf_Configure_Service_Vprn_Snmp_Community_Version           `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Snmp_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Snmp_Community) IsYANGGoStruct() {}

// GetAccessPermissions retrieves the value of the leaf AccessPermissions from the NokiaConf_Configure_Service_Vprn_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessPermissions is set, it can
// safely use t.GetAccessPermissions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessPermissions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) GetAccessPermissions() E_NokiaConf_Configure_Service_Vprn_Snmp_Community_AccessPermissions {
	if t == nil || t.AccessPermissions == 0 {
		return 0
	}
	return t.AccessPermissions
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunityString retrieves the value of the leaf CommunityString from the NokiaConf_Configure_Service_Vprn_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityString is set, it can
// safely use t.GetCommunityString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) GetCommunityString() string {
	if t == nil || t.CommunityString == nil {
		return ""
	}
	return *t.CommunityString
}

// GetSourceAccessList retrieves the value of the leaf SourceAccessList from the NokiaConf_Configure_Service_Vprn_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAccessList is set, it can
// safely use t.GetSourceAccessList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAccessList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) GetSourceAccessList() string {
	if t == nil || t.SourceAccessList == nil {
		return ""
	}
	return *t.SourceAccessList
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) GetVersion() E_NokiaConf_Configure_Service_Vprn_Snmp_Community_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Service_Vprn_Snmp_Community_Version_both
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Snmp_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Service_Vprn_Snmp_Community_Version_both
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Snmp_Community struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityString == nil {
		return nil, fmt.Errorf("nil value for key CommunityString")
	}

	return map[string]interface{}{
		"community-string": *t.CommunityString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Snmp_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Snmp_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Snmp_Community.
func (*NokiaConf_Configure_Service_Vprn_Snmp_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SourceAddress represents the /nokia-conf/configure/service/vprn/source-address YANG schema element.
type NokiaConf_Configure_Service_Vprn_SourceAddress struct {
	Ipv4 map[E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application]*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 map[E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application]*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SourceAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SourceAddress) IsYANGGoStruct() {}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Service_Vprn_SourceAddress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) NewIpv4(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application) (*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application]*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4{
		Application: Application,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Service_Vprn_SourceAddress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) RenameIpv4(oldK, newK E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Application = newK

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SourceAddress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) GetOrCreateIpv4(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application) *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 {

	key := Application

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Application)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Service_Vprn_SourceAddress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) GetIpv4(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application) *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 {

	if t == nil {
		return nil
	}

	key := Application

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SourceAddress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) DeleteIpv4(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application) {
	key := Application

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Service_Vprn_SourceAddress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) AppendIpv4(v *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) error {
	key := v.Application

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application]*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NokiaConf_Configure_Service_Vprn_SourceAddress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) NewIpv6(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application) (*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application]*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6{
		Application: Application,
	}

	return t.Ipv6[key], nil
}

// RenameIpv6 renames an entry in the list Ipv6 within
// the NokiaConf_Configure_Service_Vprn_SourceAddress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) RenameIpv6(oldK, newK E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application) error {
	if _, ok := t.Ipv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6", newK)
	}

	e, ok := t.Ipv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6", oldK)
	}
	e.Application = newK

	t.Ipv6[newK] = e
	delete(t.Ipv6, oldK)
	return nil
}

// GetOrCreateIpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SourceAddress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) GetOrCreateIpv6(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application) *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 {

	key := Application

	if v, ok := t.Ipv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6(Application)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6 got unexpected error: %v", err))
	}
	return v
}

// GetIpv6 retrieves the value with the specified key from
// the Ipv6 map field of NokiaConf_Configure_Service_Vprn_SourceAddress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) GetIpv6(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application) *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 {

	if t == nil {
		return nil
	}

	key := Application

	if lm, ok := t.Ipv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_SourceAddress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) DeleteIpv6(Application E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application) {
	key := Application

	delete(t.Ipv6, key)
}

// AppendIpv6 appends the supplied NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 struct to the
// list Ipv6 of NokiaConf_Configure_Service_Vprn_SourceAddress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) AppendIpv6(v *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) error {
	key := v.Application

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application]*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6)
	}

	if _, ok := t.Ipv6[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6 %v", key)
	}

	t.Ipv6[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SourceAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SourceAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SourceAddress.
func (*NokiaConf_Configure_Service_Vprn_SourceAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 represents the /nokia-conf/configure/service/vprn/source-address/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 struct {
	Address            *string                                                           `path:"address" module:"nokia-conf"`
	Application        E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string                                                           `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) GetApplication() E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4_Application {
	if t == nil || t.Application == 0 {
		return 0
	}
	return t.Application
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application": t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 represents the /nokia-conf/configure/service/vprn/source-address/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 struct {
	Address            *string                                                           `path:"address" module:"nokia-conf"`
	Application        E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) GetApplication() E_NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6_Application {
	if t == nil || t.Application == 0 {
		return 0
	}
	return t.Application
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application": t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_SourceAddress_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_SpokeSdp represents the /nokia-conf/configure/service/vprn/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vprn_SpokeSdp struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	SdpBindId          *string  `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_SpokeSdp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vprn_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_SpokeSdp.
func (*NokiaConf_Configure_Service_Vprn_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes represents the /nokia-conf/configure/service/vprn/static-routes YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldDown           *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown                                                          `path:"hold-down" module:"nokia-conf" yangPresence:"true"`
	Route              map[NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route `path:"route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key represents the key for list Route of element /nokia-conf/configure/service/vprn/static-routes.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key struct {
	IpPrefix  string                              `path:"ip-prefix"`
	RouteType E_NokiaTypesRouter_UnicastMulticast `path:"route-type"`
}

// NewRoute creates a new entry in the Route list of the
// NokiaConf_Configure_Service_Vprn_StaticRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) NewRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route)
	}

	key := NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route{
		IpPrefix:  &IpPrefix,
		RouteType: RouteType,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NokiaConf_Configure_Service_Vprn_StaticRoutes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) RenameRoute(oldK, newK NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.RouteType = newK.RouteType

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) GetOrCreateRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route {

	key := NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(IpPrefix, RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NokiaConf_Configure_Service_Vprn_StaticRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) GetRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) DeleteRoute(IpPrefix string, RouteType E_NokiaTypesRouter_UnicastMulticast) {
	key := NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct to the
// list Route of NokiaConf_Configure_Service_Vprn_StaticRoutes. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) AppendRoute(v *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	key := NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key{
		IpPrefix:  *v.IpPrefix,
		RouteType: v.RouteType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Key]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// GetOrCreateHoldDown retrieves the value of the HoldDown field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) GetOrCreateHoldDown() *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown {
	if t.HoldDown != nil {
		return t.HoldDown
	}
	t.HoldDown = &NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown{}
	return t.HoldDown
}

// GetHoldDown returns the value of the HoldDown struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes. If the receiver or the field HoldDown is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) GetHoldDown() *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown {
	if t != nil && t.HoldDown != nil {
		return t.HoldDown
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HoldDown.PopulateDefaults()
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown represents the /nokia-conf/configure/service/vprn/static-routes/hold-down YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown struct {
	Initial    *uint32 `path:"initial" module:"nokia-conf"`
	MaxValue   *uint32 `path:"max-value" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) IsYANGGoStruct() {}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 0
	}
	return *t.Initial
}

// GetMaxValue retrieves the value of the leaf MaxValue from the NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxValue is set, it can
// safely use t.GetMaxValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) GetMaxValue() uint32 {
	if t == nil || t.MaxValue == nil {
		return 0
	}
	return *t.MaxValue
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 0
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_HoldDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route represents the /nokia-conf/configure/service/vprn/static-routes/route YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BackupTag          *uint32                                                                     `path:"backup-tag" module:"nokia-conf"`
	Blackhole          *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole              `path:"blackhole" module:"nokia-conf" yangPresence:"true"`
	Community          []string                                                                    `path:"community" module:"nokia-conf"`
	Grt                *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt                    `path:"grt" module:"nokia-conf" yangPresence:"true"`
	Indirect           map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect    `path:"indirect" module:"nokia-conf"`
	Interface          map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface   `path:"interface" module:"nokia-conf"`
	IpPrefix           *string                                                                     `path:"ip-prefix" module:"nokia-conf"`
	IpsecTunnel        map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel `path:"ipsec-tunnel" module:"nokia-conf"`
	NextHop            map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop     `path:"next-hop" module:"nokia-conf"`
	RouteType          E_NokiaTypesRouter_UnicastMulticast                                         `path:"route-type" module:"nokia-conf"`
	Tag                *uint32                                                                     `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) IsYANGGoStruct() {}

// NewIndirect creates a new entry in the Indirect list of the
// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) NewIndirect(IpAddress string) (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Indirect == nil {
		t.Indirect = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Indirect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Indirect", key)
	}

	t.Indirect[key] = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect{
		IpAddress: &IpAddress,
	}

	return t.Indirect[key], nil
}

// RenameIndirect renames an entry in the list Indirect within
// the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) RenameIndirect(oldK, newK string) error {
	if _, ok := t.Indirect[newK]; ok {
		return fmt.Errorf("key %v already exists in Indirect", newK)
	}

	e, ok := t.Indirect[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Indirect", oldK)
	}
	e.IpAddress = &newK

	t.Indirect[newK] = e
	delete(t.Indirect, oldK)
	return nil
}

// GetOrCreateIndirect retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetOrCreateIndirect(IpAddress string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect {

	key := IpAddress

	if v, ok := t.Indirect[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIndirect(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIndirect got unexpected error: %v", err))
	}
	return v
}

// GetIndirect retrieves the value with the specified key from
// the Indirect map field of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetIndirect(IpAddress string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Indirect[key]; ok {
		return lm
	}
	return nil
}

// DeleteIndirect deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) DeleteIndirect(IpAddress string) {
	key := IpAddress

	delete(t.Indirect, key)
}

// AppendIndirect appends the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect struct to the
// list Indirect of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) AppendIndirect(v *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Indirect == nil {
		t.Indirect = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect)
	}

	if _, ok := t.Indirect[key]; ok {
		return fmt.Errorf("duplicate key for list Indirect %v", key)
	}

	t.Indirect[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) AppendInterface(v *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewIpsecTunnel creates a new entry in the IpsecTunnel list of the
// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) NewIpsecTunnel(IpsecTunnelName string) (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTunnel == nil {
		t.IpsecTunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel)
	}

	key := IpsecTunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecTunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecTunnel", key)
	}

	t.IpsecTunnel[key] = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel{
		IpsecTunnelName: &IpsecTunnelName,
	}

	return t.IpsecTunnel[key], nil
}

// RenameIpsecTunnel renames an entry in the list IpsecTunnel within
// the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) RenameIpsecTunnel(oldK, newK string) error {
	if _, ok := t.IpsecTunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecTunnel", newK)
	}

	e, ok := t.IpsecTunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecTunnel", oldK)
	}
	e.IpsecTunnelName = &newK

	t.IpsecTunnel[newK] = e
	delete(t.IpsecTunnel, oldK)
	return nil
}

// GetOrCreateIpsecTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetOrCreateIpsecTunnel(IpsecTunnelName string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel {

	key := IpsecTunnelName

	if v, ok := t.IpsecTunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecTunnel(IpsecTunnelName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecTunnel got unexpected error: %v", err))
	}
	return v
}

// GetIpsecTunnel retrieves the value with the specified key from
// the IpsecTunnel map field of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetIpsecTunnel(IpsecTunnelName string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel {

	if t == nil {
		return nil
	}

	key := IpsecTunnelName

	if lm, ok := t.IpsecTunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) DeleteIpsecTunnel(IpsecTunnelName string) {
	key := IpsecTunnelName

	delete(t.IpsecTunnel, key)
}

// AppendIpsecTunnel appends the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel struct to the
// list IpsecTunnel of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) AppendIpsecTunnel(v *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel) error {
	if v.IpsecTunnelName == nil {
		return fmt.Errorf("invalid nil key received for IpsecTunnelName")
	}

	key := *v.IpsecTunnelName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTunnel == nil {
		t.IpsecTunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_IpsecTunnel)
	}

	if _, ok := t.IpsecTunnel[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecTunnel %v", key)
	}

	t.IpsecTunnel[key] = v
	return nil
}

// NewNextHop creates a new entry in the NextHop list of the
// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) NewNextHop(IpAddress string) (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop{
		IpAddress: &IpAddress,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.IpAddress = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetOrCreateNextHop(IpAddress string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop {

	key := IpAddress

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetNextHop(IpAddress string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) DeleteNextHop(IpAddress string) {
	key := IpAddress

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop struct to the
// list NextHop of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) AppendNextHop(v *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetOrCreateBlackhole() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole{}
	return t.Blackhole
}

// GetOrCreateGrt retrieves the value of the Grt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetOrCreateGrt() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt {
	if t.Grt != nil {
		return t.Grt
	}
	t.Grt = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt{}
	return t.Grt
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetBlackhole() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetGrt returns the value of the Grt struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes_Route. If the receiver or the field Grt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetGrt() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt {
	if t != nil && t.Grt != nil {
		return t.Grt
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackupTag retrieves the value of the leaf BackupTag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupTag is set, it can
// safely use t.GetBackupTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetBackupTag() uint32 {
	if t == nil || t.BackupTag == nil {
		return 0
	}
	return *t.BackupTag
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetCommunity() []string {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetRouteType() E_NokiaTypesRouter_UnicastMulticast {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Blackhole.PopulateDefaults()
	t.Grt.PopulateDefaults()
	for _, e := range t.Indirect {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecTunnel {
		e.PopulateDefaults()
	}
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix":  *t.IpPrefix,
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole represents the /nokia-conf/configure/service/vprn/static-routes/route/blackhole YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole struct {
	AdminState         E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Community          *string                                                                   `path:"community" module:"nokia-conf"`
	Description        *string                                                                   `path:"description" module:"nokia-conf"`
	GenerateIcmp       *bool                                                                     `path:"generate-icmp" module:"nokia-conf"`
	Metric             *uint32                                                                   `path:"metric" module:"nokia-conf"`
	Preference         *uint32                                                                   `path:"preference" module:"nokia-conf"`
	PrefixList         *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList `path:"prefix-list" module:"nokia-conf"`
	Tag                *uint32                                                                   `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) IsYANGGoStruct() {}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetOrCreatePrefixList() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList{}
	return t.PrefixList
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetPrefixList() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList represents the /nokia-conf/configure/service/vprn/static-routes/route/blackhole/prefix-list YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList struct {
	Flag E_NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                         `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) IsYANGGoStruct() {}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) GetFlag() E_NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Blackhole_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt represents the /nokia-conf/configure/service/vprn/static-routes/route/grt YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	Metric             *uint32                     `path:"metric" module:"nokia-conf"`
	Preference         *uint32                     `path:"preference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Grt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect represents the /nokia-conf/configure/service/vprn/static-routes/route/indirect YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect struct {
	AdminState         E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Community          *string                                                                           `path:"community" module:"nokia-conf"`
	CpeCheck           map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description        *string                                                                           `path:"description" module:"nokia-conf"`
	DestinationClass   *uint32                                                                           `path:"destination-class" module:"nokia-conf"`
	IpAddress          *string                                                                           `path:"ip-address" module:"nokia-conf"`
	Metric             *uint32                                                                           `path:"metric" module:"nokia-conf"`
	Preference         *uint32                                                                           `path:"preference" module:"nokia-conf"`
	PrefixList         *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass        *uint32                                                                           `path:"source-class" module:"nokia-conf"`
	Tag                *uint32                                                                           `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) NewCpeCheck(Address string) (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetCpeCheck(Address string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) AppendCpeCheck(v *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetOrCreatePrefixList() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos{}
	return t.Qos
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetPrefixList() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetQos() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck represents the /nokia-conf/configure/service/vprn/static-routes/route/indirect/cpe-check YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DropCount          *uint32  `path:"drop-count" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
	Log                *bool    `path:"log" module:"nokia-conf"`
	PaddingSize        *uint32  `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList represents the /nokia-conf/configure/service/vprn/static-routes/route/indirect/prefix-list YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList struct {
	Flag E_NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                        `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) IsYANGGoStruct() {}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) GetFlag() E_NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos represents the /nokia-conf/configure/service/vprn/static-routes/route/indirect/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos struct {
	ForwardingClass E_NokiaTypesSros_FcName   `path:"forwarding-class" module:"nokia-conf"`
	Priority        E_NokiaTypesSros_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) GetForwardingClass() E_NokiaTypesSros_FcName {
	if t == nil || t.ForwardingClass == 0 {
		return 0
	}
	return t.ForwardingClass
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) GetPriority() E_NokiaTypesSros_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Indirect_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface represents the /nokia-conf/configure/service/vprn/static-routes/route/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface struct {
	AdminState          E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Community           *string                                                                            `path:"community" module:"nokia-conf"`
	CpeCheck            map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description         *string                                                                            `path:"description" module:"nokia-conf"`
	DestinationClass    *uint32                                                                            `path:"destination-class" module:"nokia-conf"`
	InterfaceName       *string                                                                            `path:"interface-name" module:"nokia-conf"`
	LoadBalancingWeight *uint32                                                                            `path:"load-balancing-weight" module:"nokia-conf"`
	Metric              *uint32                                                                            `path:"metric" module:"nokia-conf"`
	Preference          *uint32                                                                            `path:"preference" module:"nokia-conf"`
	PrefixList          *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos                 *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass         *uint32                                                                            `path:"source-class" module:"nokia-conf"`
	Tag                 *uint32                                                                            `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) NewCpeCheck(Address string) (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetCpeCheck(Address string) *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) AppendCpeCheck(v *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetOrCreatePrefixList() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_Qos{}
	return t.Qos
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetPrefixList() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetQos() *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck represents the /nokia-conf/configure/service/vprn/static-routes/route/interface/cpe-check YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DropCount          *uint32  `path:"drop-count" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
	Log                *bool    `path:"log" module:"nokia-conf"`
	PaddingSize        *uint32  `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList represents the /nokia-conf/configure/service/vprn/static-routes/route/interface/prefix-list YANG schema element.
type NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList struct {
	Flag E_NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                         `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) IsYANGGoStruct() {}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) GetFlag() E_NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList.
func (*NokiaConf_Configure_Service_Vprn_StaticRoutes_Route_Interface_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}
