/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group represents the /nokia-conf/configure/groups/group/qos/hs-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group struct {
	GroupId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union `path:"group-id" module:"nokia-conf"`
	Rate    NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_Rate_Union    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) GetGroupId() NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) GetRate() NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group_Rate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass represents the /nokia-conf/configure/groups/group/qos/hs-scheduler-policy/scheduling-class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass struct {
	ClassId NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union `path:"class-id" module:"nokia-conf"`
	Group   *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group        `path:"group" module:"nokia-conf" yangPresence:"true"`
	Rate    NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Union    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) IsYANGGoStruct() {}

// GetOrCreateGroup retrieves the value of the Group field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) GetOrCreateGroup() *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group {
	if t.Group != nil {
		return t.Group
	}
	t.Group = &NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group{}
	return t.Group
}

// GetGroup returns the value of the Group struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass. If the receiver or the field Group is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) GetGroup() *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group {
	if t != nil && t.Group != nil {
		return t.Group
	}
	return nil
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) GetClassId() NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) GetRate() NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	t.Group.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group represents the /nokia-conf/configure/groups/group/qos/hs-scheduler-policy/scheduling-class/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group struct {
	GroupId *int32 `path:"group-id" module:"nokia-conf"`
	Weight  *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) IsYANGGoStruct() {
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) GetGroupId() int32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group.
func (*NokiaConf_Configure_Groups_Group_Qos_HsSchedulerPolicy_SchedulingClass_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy represents the /nokia-conf/configure/groups/group/qos/hsmda-pool-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy struct {
	ClassTier           *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier `path:"class-tier" module:"nokia-conf"`
	Description         *string                                                         `path:"description" module:"nokia-conf"`
	HsmdaPoolPolicyName *string                                                         `path:"hsmda-pool-policy-name" module:"nokia-conf"`
	RootTier            *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier  `path:"root-tier" module:"nokia-conf"`
	SystemReserve       *float64                                                        `path:"system-reserve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) IsYANGGoStruct() {}

// GetOrCreateClassTier retrieves the value of the ClassTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) GetOrCreateClassTier() *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier {
	if t.ClassTier != nil {
		return t.ClassTier
	}
	t.ClassTier = &NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier{}
	return t.ClassTier
}

// GetOrCreateRootTier retrieves the value of the RootTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) GetOrCreateRootTier() *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier {
	if t.RootTier != nil {
		return t.RootTier
	}
	t.RootTier = &NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier{}
	return t.RootTier
}

// GetClassTier returns the value of the ClassTier struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy. If the receiver or the field ClassTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) GetClassTier() *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier {
	if t != nil && t.ClassTier != nil {
		return t.ClassTier
	}
	return nil
}

// GetRootTier returns the value of the RootTier struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy. If the receiver or the field RootTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) GetRootTier() *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier {
	if t != nil && t.RootTier != nil {
		return t.RootTier
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaPoolPolicyName retrieves the value of the leaf HsmdaPoolPolicyName from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaPoolPolicyName is set, it can
// safely use t.GetHsmdaPoolPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaPoolPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) GetHsmdaPoolPolicyName() string {
	if t == nil || t.HsmdaPoolPolicyName == nil {
		return ""
	}
	return *t.HsmdaPoolPolicyName
}

// GetSystemReserve retrieves the value of the leaf SystemReserve from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemReserve is set, it can
// safely use t.GetSystemReserve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemReserve == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) GetSystemReserve() float64 {
	if t == nil || t.SystemReserve == nil {
		return 10.00
	}
	return *t.SystemReserve
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SystemReserve == nil {
		var v float64 = 10.00
		t.SystemReserve = &v
	}
	t.ClassTier.PopulateDefaults()
	t.RootTier.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaPoolPolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaPoolPolicyName")
	}

	return map[string]interface{}{
		"hsmda-pool-policy-name": *t.HsmdaPoolPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier represents the /nokia-conf/configure/groups/group/qos/hsmda-pool-policy/class-tier YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier struct {
	ClassPool map[NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool `path:"class-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) IsYANGGoStruct() {}

// NewClassPool creates a new entry in the ClassPool list of the
// NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) NewClassPool(ClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool)
	}

	key := ClassPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClassPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClassPool", key)
	}

	t.ClassPool[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool{
		ClassPoolId: ClassPoolId,
	}

	return t.ClassPool[key], nil
}

// RenameClassPool renames an entry in the list ClassPool within
// the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) RenameClassPool(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union) error {
	if _, ok := t.ClassPool[newK]; ok {
		return fmt.Errorf("key %v already exists in ClassPool", newK)
	}

	e, ok := t.ClassPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClassPool", oldK)
	}
	e.ClassPoolId = newK

	t.ClassPool[newK] = e
	delete(t.ClassPool, oldK)
	return nil
}

// GetOrCreateClassPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) GetOrCreateClassPool(ClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool {

	key := ClassPoolId

	if v, ok := t.ClassPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassPool(ClassPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassPool got unexpected error: %v", err))
	}
	return v
}

// GetClassPool retrieves the value with the specified key from
// the ClassPool map field of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) GetClassPool(ClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool {

	if t == nil {
		return nil
	}

	key := ClassPoolId

	if lm, ok := t.ClassPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) DeleteClassPool(ClassPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union) {
	key := ClassPoolId

	delete(t.ClassPool, key)
}

// AppendClassPool appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool struct to the
// list ClassPool of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) AppendClassPool(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) error {
	key := v.ClassPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool)
	}

	if _, ok := t.ClassPool[key]; ok {
		return fmt.Errorf("duplicate key for list ClassPool %v", key)
	}

	t.ClassPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ClassPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool represents the /nokia-conf/configure/groups/group/qos/hsmda-pool-policy/class-tier/class-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool struct {
	AllocationPercent *float64                                                                                   `path:"allocation-percent" module:"nokia-conf"`
	ClassPoolId       NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union `path:"class-pool-id" module:"nokia-conf"`
	RootParent        *uint32                                                                                    `path:"root-parent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) IsYANGGoStruct() {}

// GetAllocationPercent retrieves the value of the leaf AllocationPercent from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationPercent is set, it can
// safely use t.GetAllocationPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetAllocationPercent() float64 {
	if t == nil || t.AllocationPercent == nil {
		return 0.0
	}
	return *t.AllocationPercent
}

// GetClassPoolId retrieves the value of the leaf ClassPoolId from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassPoolId is set, it can
// safely use t.GetClassPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetClassPoolId() NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool_ClassPoolId_Union {
	if t == nil || t.ClassPoolId == nil {
		return nil
	}
	return t.ClassPoolId
}

// GetRootParent retrieves the value of the leaf RootParent from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootParent is set, it can
// safely use t.GetRootParent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootParent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetRootParent() uint32 {
	if t == nil || t.RootParent == nil {
		return 0
	}
	return *t.RootParent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-pool-id": t.ClassPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier represents the /nokia-conf/configure/groups/group/qos/hsmda-pool-policy/root-tier YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier struct {
	RootPool map[NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool `path:"root-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) IsYANGGoStruct() {}

// NewRootPool creates a new entry in the RootPool list of the
// NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) NewRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool)
	}

	key := RootPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RootPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RootPool", key)
	}

	t.RootPool[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool{
		RootPoolId: RootPoolId,
	}

	return t.RootPool[key], nil
}

// RenameRootPool renames an entry in the list RootPool within
// the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) RenameRootPool(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union) error {
	if _, ok := t.RootPool[newK]; ok {
		return fmt.Errorf("key %v already exists in RootPool", newK)
	}

	e, ok := t.RootPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RootPool", oldK)
	}
	e.RootPoolId = newK

	t.RootPool[newK] = e
	delete(t.RootPool, oldK)
	return nil
}

// GetOrCreateRootPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) GetOrCreateRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool {

	key := RootPoolId

	if v, ok := t.RootPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRootPool(RootPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRootPool got unexpected error: %v", err))
	}
	return v
}

// GetRootPool retrieves the value with the specified key from
// the RootPool map field of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) GetRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool {

	if t == nil {
		return nil
	}

	key := RootPoolId

	if lm, ok := t.RootPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteRootPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) DeleteRootPool(RootPoolId NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union) {
	key := RootPoolId

	delete(t.RootPool, key)
}

// AppendRootPool appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool struct to the
// list RootPool of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) AppendRootPool(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) error {
	key := v.RootPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool)
	}

	if _, ok := t.RootPool[key]; ok {
		return fmt.Errorf("duplicate key for list RootPool %v", key)
	}

	t.RootPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RootPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool represents the /nokia-conf/configure/groups/group/qos/hsmda-pool-policy/root-tier/root-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool struct {
	AllocationWeight *uint32                                                                                 `path:"allocation-weight" module:"nokia-conf"`
	RootPoolId       NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union `path:"root-pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) IsYANGGoStruct() {}

// GetAllocationWeight retrieves the value of the leaf AllocationWeight from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationWeight is set, it can
// safely use t.GetAllocationWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) GetAllocationWeight() uint32 {
	if t == nil || t.AllocationWeight == nil {
		return 0
	}
	return *t.AllocationWeight
}

// GetRootPoolId retrieves the value of the leaf RootPoolId from the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPoolId is set, it can
// safely use t.GetRootPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) GetRootPoolId() NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool_RootPoolId_Union {
	if t == nil || t.RootPoolId == nil {
		return nil
	}
	return t.RootPoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllocationWeight == nil {
		var v uint32 = 0
		t.AllocationWeight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"root-pool-id": t.RootPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy represents the /nokia-conf/configure/groups/group/qos/hsmda-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy struct {
	BurstLimit               NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_BurstLimit_Union                                                                                             `path:"burst-limit" module:"nokia-conf"`
	Description              *string                                                                                                                                                                `path:"description" module:"nokia-conf"`
	Group                    map[NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group                     `path:"group" module:"nokia-conf"`
	HsmdaSchedulerPolicyName *string                                                                                                                                                                `path:"hsmda-scheduler-policy-name" module:"nokia-conf"`
	MaxRate                  NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_MaxRate_Union                                                                                                `path:"max-rate" module:"nokia-conf"`
	SchedulingClass          map[NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) NewGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group{
		GroupId: GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) RenameGroup(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetOrCreateGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) DeleteGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) NewSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass{
		ClassId: ClassId,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) RenameSchedulingClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassId = newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetOrCreateSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass {

	key := ClassId

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) DeleteSchedulingClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union) {
	key := ClassId

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) AppendSchedulingClass(v *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaSchedulerPolicyName retrieves the value of the leaf HsmdaSchedulerPolicyName from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaSchedulerPolicyName is set, it can
// safely use t.GetHsmdaSchedulerPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaSchedulerPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetHsmdaSchedulerPolicyName() string {
	if t == nil || t.HsmdaSchedulerPolicyName == nil {
		return ""
	}
	return *t.HsmdaSchedulerPolicyName
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_MaxRate_Enum_max
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_BurstLimit_Enum_auto
	}
	if t.MaxRate == nil {
		t.MaxRate = NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_MaxRate_Enum_max
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaSchedulerPolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaSchedulerPolicyName")
	}

	return map[string]interface{}{
		"hsmda-scheduler-policy-name": *t.HsmdaSchedulerPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group represents the /nokia-conf/configure/groups/group/qos/hsmda-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group struct {
	BurstLimit NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	GroupId    NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union    `path:"group-id" module:"nokia-conf"`
	Rate       NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_Rate_Union       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) GetGroupId() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) GetRate() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group_Rate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass represents the /nokia-conf/configure/groups/group/qos/hsmda-scheduler-policy/scheduling-class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass struct {
	BurstLimit NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	ClassId    NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union    `path:"class-id" module:"nokia-conf"`
	Group      *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group           `path:"group" module:"nokia-conf" yangPresence:"true"`
	Rate       NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Union       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) IsYANGGoStruct() {}

// GetOrCreateGroup retrieves the value of the Group field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetOrCreateGroup() *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group {
	if t.Group != nil {
		return t.Group
	}
	t.Group = &NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group{}
	return t.Group
}

// GetGroup returns the value of the Group struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass. If the receiver or the field Group is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetGroup() *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group {
	if t != nil && t.Group != nil {
		return t.Group
	}
	return nil
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetClassId() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetRate() NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	t.Group.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group represents the /nokia-conf/configure/groups/group/qos/hsmda-scheduler-policy/scheduling-class/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group struct {
	GroupId *uint32 `path:"group-id" module:"nokia-conf"`
	Weight  *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) IsYANGGoStruct() {
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy represents the /nokia-conf/configure/groups/group/qos/hsmda-slope-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy struct {
	Description          *string                                                          `path:"description" module:"nokia-conf"`
	HighSlope            *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope `path:"high-slope" module:"nokia-conf"`
	HsmdaSlopePolicyName *string                                                          `path:"hsmda-slope-policy-name" module:"nokia-conf"`
	LowSlope             *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope  `path:"low-slope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) IsYANGGoStruct() {}

// GetOrCreateHighSlope retrieves the value of the HighSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) GetOrCreateHighSlope() *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope {
	if t.HighSlope != nil {
		return t.HighSlope
	}
	t.HighSlope = &NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope{}
	return t.HighSlope
}

// GetOrCreateLowSlope retrieves the value of the LowSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) GetOrCreateLowSlope() *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope {
	if t.LowSlope != nil {
		return t.LowSlope
	}
	t.LowSlope = &NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope{}
	return t.LowSlope
}

// GetHighSlope returns the value of the HighSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy. If the receiver or the field HighSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) GetHighSlope() *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope {
	if t != nil && t.HighSlope != nil {
		return t.HighSlope
	}
	return nil
}

// GetLowSlope returns the value of the LowSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy. If the receiver or the field LowSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) GetLowSlope() *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope {
	if t != nil && t.LowSlope != nil {
		return t.LowSlope
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaSlopePolicyName retrieves the value of the leaf HsmdaSlopePolicyName from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaSlopePolicyName is set, it can
// safely use t.GetHsmdaSlopePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaSlopePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) GetHsmdaSlopePolicyName() string {
	if t == nil || t.HsmdaSlopePolicyName == nil {
		return ""
	}
	return *t.HsmdaSlopePolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HighSlope.PopulateDefaults()
	t.LowSlope.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaSlopePolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaSlopePolicyName")
	}

	return map[string]interface{}{
		"hsmda-slope-policy-name": *t.HsmdaSlopePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope represents the /nokia-conf/configure/groups/group/qos/hsmda-slope-policy/high-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxDepth   *float64                    `path:"max-depth" module:"nokia-conf"`
	MaxProb    *float64                    `path:"max-prob" module:"nokia-conf"`
	StartDepth *float64                    `path:"start-depth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxDepth retrieves the value of the leaf MaxDepth from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDepth is set, it can
// safely use t.GetMaxDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) GetMaxDepth() float64 {
	if t == nil || t.MaxDepth == nil {
		return 100.00
	}
	return *t.MaxDepth
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) GetMaxProb() float64 {
	if t == nil || t.MaxProb == nil {
		return 100.00
	}
	return *t.MaxProb
}

// GetStartDepth retrieves the value of the leaf StartDepth from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartDepth is set, it can
// safely use t.GetStartDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) GetStartDepth() float64 {
	if t == nil || t.StartDepth == nil {
		return 100.00
	}
	return *t.StartDepth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxDepth == nil {
		var v float64 = 100.00
		t.MaxDepth = &v
	}
	if t.MaxProb == nil {
		var v float64 = 100.00
		t.MaxProb = &v
	}
	if t.StartDepth == nil {
		var v float64 = 100.00
		t.StartDepth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_HighSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope represents the /nokia-conf/configure/groups/group/qos/hsmda-slope-policy/low-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxDepth   *float64                    `path:"max-depth" module:"nokia-conf"`
	MaxProb    *float64                    `path:"max-prob" module:"nokia-conf"`
	StartDepth *float64                    `path:"start-depth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxDepth retrieves the value of the leaf MaxDepth from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDepth is set, it can
// safely use t.GetMaxDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) GetMaxDepth() float64 {
	if t == nil || t.MaxDepth == nil {
		return 90.00
	}
	return *t.MaxDepth
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) GetMaxProb() float64 {
	if t == nil || t.MaxProb == nil {
		return 100.00
	}
	return *t.MaxProb
}

// GetStartDepth retrieves the value of the leaf StartDepth from the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartDepth is set, it can
// safely use t.GetStartDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) GetStartDepth() float64 {
	if t == nil || t.StartDepth == nil {
		return 90.00
	}
	return *t.StartDepth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxDepth == nil {
		var v float64 = 90.00
		t.MaxDepth = &v
	}
	if t.MaxProb == nil {
		var v float64 = 100.00
		t.MaxProb = &v
	}
	if t.StartDepth == nil {
		var v float64 = 90.00
		t.StartDepth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaSlopePolicy_LowSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy represents the /nokia-conf/configure/groups/group/qos/hsmda-wrr-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy struct {
	ClassAggWeight     *int32                                                              `path:"class-agg-weight" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	HsmdaWrrPolicyName *string                                                             `path:"hsmda-wrr-policy-name" module:"nokia-conf"`
	IncludeQueues      E_NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy_IncludeQueues `path:"include-queues" module:"nokia-conf"`
	ScheduleUsingClass *int32                                                              `path:"schedule-using-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) IsYANGGoStruct() {}

// GetClassAggWeight retrieves the value of the leaf ClassAggWeight from the NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassAggWeight is set, it can
// safely use t.GetClassAggWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassAggWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) GetClassAggWeight() int32 {
	if t == nil || t.ClassAggWeight == nil {
		return 1
	}
	return *t.ClassAggWeight
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaWrrPolicyName retrieves the value of the leaf HsmdaWrrPolicyName from the NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaWrrPolicyName is set, it can
// safely use t.GetHsmdaWrrPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaWrrPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) GetHsmdaWrrPolicyName() string {
	if t == nil || t.HsmdaWrrPolicyName == nil {
		return ""
	}
	return *t.HsmdaWrrPolicyName
}

// GetIncludeQueues retrieves the value of the leaf IncludeQueues from the NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeQueues is set, it can
// safely use t.GetIncludeQueues() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeQueues == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) GetIncludeQueues() E_NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy_IncludeQueues {
	if t == nil || t.IncludeQueues == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy_IncludeQueues_1_2
	}
	return t.IncludeQueues
}

// GetScheduleUsingClass retrieves the value of the leaf ScheduleUsingClass from the NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScheduleUsingClass is set, it can
// safely use t.GetScheduleUsingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScheduleUsingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) GetScheduleUsingClass() int32 {
	if t == nil || t.ScheduleUsingClass == nil {
		return 1
	}
	return *t.ScheduleUsingClass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClassAggWeight == nil {
		var v int32 = 1
		t.ClassAggWeight = &v
	}
	if t.IncludeQueues == 0 {
		t.IncludeQueues = NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy_IncludeQueues_1_2
	}
	if t.ScheduleUsingClass == nil {
		var v int32 = 1
		t.ScheduleUsingClass = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaWrrPolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaWrrPolicyName")
	}

	return map[string]interface{}{
		"hsmda-wrr-policy-name": *t.HsmdaWrrPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HsmdaWrrPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy represents the /nokia-conf/configure/groups/group/qos/hw-agg-shaper-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy struct {
	CongestionThreshold *uint32                                                                                                                                                                  `path:"congestion-threshold" module:"nokia-conf"`
	Description         *string                                                                                                                                                                  `path:"description" module:"nokia-conf"`
	Group               map[string]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group                                                                                        `path:"group" module:"nokia-conf"`
	MaxPercentRate      *float64                                                                                                                                                                 `path:"max-percent-rate" module:"nokia-conf"`
	MaxRate             NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_MaxRate_Union                                                                                            `path:"max-rate" module:"nokia-conf"`
	MonitorThreshold    *uint32                                                                                                                                                                  `path:"monitor-threshold" module:"nokia-conf"`
	Name                *string                                                                                                                                                                  `path:"name" module:"nokia-conf"`
	SchedClass          map[NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass `path:"sched-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) NewGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedClass creates a new entry in the SchedClass list of the
// NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) NewSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedClass", key)
	}

	t.SchedClass[key] = &NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass{
		ClassId: ClassId,
	}

	return t.SchedClass[key], nil
}

// RenameSchedClass renames an entry in the list SchedClass within
// the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) RenameSchedClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union) error {
	if _, ok := t.SchedClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedClass", newK)
	}

	e, ok := t.SchedClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedClass", oldK)
	}
	e.ClassId = newK

	t.SchedClass[newK] = e
	delete(t.SchedClass, oldK)
	return nil
}

// GetOrCreateSchedClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetOrCreateSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass {

	key := ClassId

	if v, ok := t.SchedClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedClass retrieves the value with the specified key from
// the SchedClass map field of NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) DeleteSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union) {
	key := ClassId

	delete(t.SchedClass, key)
}

// AppendSchedClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass struct to the
// list SchedClass of NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) AppendSchedClass(v *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass)
	}

	if _, ok := t.SchedClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedClass %v", key)
	}

	t.SchedClass[key] = v
	return nil
}

// GetCongestionThreshold retrieves the value of the leaf CongestionThreshold from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CongestionThreshold is set, it can
// safely use t.GetCongestionThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CongestionThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetCongestionThreshold() uint32 {
	if t == nil || t.CongestionThreshold == nil {
		return 90
	}
	return *t.CongestionThreshold
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxPercentRate retrieves the value of the leaf MaxPercentRate from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPercentRate is set, it can
// safely use t.GetMaxPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetMaxPercentRate() float64 {
	if t == nil || t.MaxPercentRate == nil {
		return 0.0
	}
	return *t.MaxPercentRate
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaTypesQos_ShaperMaxRate_Enum_max
	}
	return t.MaxRate
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CongestionThreshold == nil {
		var v uint32 = 90
		t.CongestionThreshold = &v
	}
	if t.MaxRate == nil {
		t.MaxRate = NokiaTypesQos_ShaperMaxRate_Enum_max
	}
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group represents the /nokia-conf/configure/groups/group/qos/hw-agg-shaper-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group.
func (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass represents the /nokia-conf/configure/groups/group/qos/hw-agg-shaper-scheduler-policy/sched-class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass struct {
	ClassId NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union `path:"class-id" module:"nokia-conf"`
	Group   *string                                                                                  `path:"group" module:"nokia-conf"`
	Weight  *int32                                                                                   `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) IsYANGGoStruct() {}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetClassId() NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass.
func (*NokiaConf_Configure_Groups_Group_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy represents the /nokia-conf/configure/groups/group/qos/ingress-classification-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct {
	AllowAttachment                 E_NokiaTypesQos_IngressClassPlcyProfAttach                                                                                                                             `path:"allow-attachment" module:"nokia-conf"`
	DefaultAction                   *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction                                                                                        `path:"default-action" module:"nokia-conf"`
	Description                     *string                                                                                                                                                                `path:"description" module:"nokia-conf"`
	Dot1P                           map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P    `path:"dot1p" module:"nokia-conf"`
	Dot1PFcMap                      *string                                                                                                                                                                `path:"dot1p-fc-map" module:"nokia-conf"`
	Dscp                            map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp        `path:"dscp" module:"nokia-conf"`
	DscpFcMap                       *string                                                                                                                                                                `path:"dscp-fc-map" module:"nokia-conf"`
	IngressClassificationPolicyName *string                                                                                                                                                                `path:"ingress-classification-policy-name" module:"nokia-conf"`
	LspExp                          map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp `path:"lsp-exp" module:"nokia-conf"`
	LspExpFcMap                     *string                                                                                                                                                                `path:"lsp-exp-fc-map" module:"nokia-conf"`
	Remark                          E_NokiaTypesQos_IngClassRemarkValue                                                                                                                                    `path:"remark" module:"nokia-conf"`
	Scope                           E_NokiaTypesQos_ItemScope                                                                                                                                              `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) NewDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P{
		Dot1PValue: Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) RenameDot1P(oldK, newK NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetOrCreateDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) DeleteDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) AppendDot1P(v *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) error {
	key := v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) NewDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union) (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) RenameDscp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetOrCreateDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) DeleteDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp struct to the
// list Dscp of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) AppendDscp(v *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) NewLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp{
		LspExpValue: LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) RenameLspExp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetOrCreateLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) DeleteLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp struct to the
// list LspExp of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) AppendLspExp(v *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) error {
	key := v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetAllowAttachment retrieves the value of the leaf AllowAttachment from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowAttachment is set, it can
// safely use t.GetAllowAttachment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowAttachment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetAllowAttachment() E_NokiaTypesQos_IngressClassPlcyProfAttach {
	if t == nil || t.AllowAttachment == 0 {
		return NokiaTypesQos_IngressClassPlcyProfAttach_any
	}
	return t.AllowAttachment
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDot1PFcMap retrieves the value of the leaf Dot1PFcMap from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PFcMap is set, it can
// safely use t.GetDot1PFcMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PFcMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetDot1PFcMap() string {
	if t == nil || t.Dot1PFcMap == nil {
		return ""
	}
	return *t.Dot1PFcMap
}

// GetDscpFcMap retrieves the value of the leaf DscpFcMap from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpFcMap is set, it can
// safely use t.GetDscpFcMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpFcMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetDscpFcMap() string {
	if t == nil || t.DscpFcMap == nil {
		return ""
	}
	return *t.DscpFcMap
}

// GetIngressClassificationPolicyName retrieves the value of the leaf IngressClassificationPolicyName from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressClassificationPolicyName is set, it can
// safely use t.GetIngressClassificationPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressClassificationPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetIngressClassificationPolicyName() string {
	if t == nil || t.IngressClassificationPolicyName == nil {
		return ""
	}
	return *t.IngressClassificationPolicyName
}

// GetLspExpFcMap retrieves the value of the leaf LspExpFcMap from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpFcMap is set, it can
// safely use t.GetLspExpFcMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpFcMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetLspExpFcMap() string {
	if t == nil || t.LspExpFcMap == nil {
		return ""
	}
	return *t.LspExpFcMap
}

// GetRemark retrieves the value of the leaf Remark from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remark is set, it can
// safely use t.GetRemark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetRemark() E_NokiaTypesQos_IngClassRemarkValue {
	if t == nil || t.Remark == 0 {
		return NokiaTypesQos_IngClassRemarkValue_any
	}
	return t.Remark
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowAttachment == 0 {
		t.AllowAttachment = NokiaTypesQos_IngressClassPlcyProfAttach_any
	}
	if t.Remark == 0 {
		t.Remark = NokiaTypesQos_IngClassRemarkValue_any
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IngressClassificationPolicyName == nil {
		return nil, fmt.Errorf("nil value for key IngressClassificationPolicyName")
	}

	return map[string]interface{}{
		"ingress-classification-policy-name": *t.IngressClassificationPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction represents the /nokia-conf/configure/groups/group/qos/ingress-classification-policy/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P represents the /nokia-conf/configure/groups/group/qos/ingress-classification-policy/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P struct {
	Dot1PValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union `path:"dot1p-value" module:"nokia-conf"`
	Fc         E_NokiaTypesSros_FcName                                                                 `path:"fc" module:"nokia-conf"`
	Profile    E_NokiaTypesQos_ProfileDe                                                               `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) IsYANGGoStruct() {}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) GetDot1PValue() NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P_Dot1PValue_Union {
	if t == nil || t.Dot1PValue == nil {
		return nil
	}
	return t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-value": t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp represents the /nokia-conf/configure/groups/group/qos/ingress-classification-policy/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp struct {
	DscpName NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union `path:"dscp-name" module:"nokia-conf"`
	Fc       E_NokiaTypesSros_FcName                                                              `path:"fc" module:"nokia-conf"`
	Profile  E_NokiaTypesQos_Profile                                                              `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) IsYANGGoStruct() {}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) GetDscpName() NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp_DscpName_Union {
	if t == nil || t.DscpName == nil {
		return nil
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp represents the /nokia-conf/configure/groups/group/qos/ingress-classification-policy/lsp-exp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp struct {
	Fc          E_NokiaTypesSros_FcName                                                                   `path:"fc" module:"nokia-conf"`
	LspExpValue NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union `path:"lsp-exp-value" module:"nokia-conf"`
	Profile     E_NokiaTypesQos_Profile                                                                   `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) GetLspExpValue() NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp_LspExpValue_Union {
	if t == nil || t.LspExpValue == nil {
		return nil
	}
	return t.LspExpValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"lsp-exp-value": t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp.
func (*NokiaConf_Configure_Groups_Group_Qos_IngressClassificationPolicy_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap represents the /nokia-conf/configure/groups/group/qos/lsp-exp-fc-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap struct {
	DefaultAction   *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction                                                                        `path:"default-action" module:"nokia-conf"`
	LspExp          map[NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp `path:"lsp-exp" module:"nokia-conf"`
	LspExpFcMapName *string                                                                                                                                `path:"lsp-exp-fc-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) IsYANGGoStruct() {}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) NewLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp{
		LspExpValue: LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) RenameLspExp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) GetOrCreateLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) GetLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) DeleteLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp struct to the
// list LspExp of NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) AppendLspExp(v *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) error {
	key := v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) GetDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetLspExpFcMapName retrieves the value of the leaf LspExpFcMapName from the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpFcMapName is set, it can
// safely use t.GetLspExpFcMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpFcMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) GetLspExpFcMapName() string {
	if t == nil || t.LspExpFcMapName == nil {
		return ""
	}
	return *t.LspExpFcMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspExpFcMapName == nil {
		return nil, fmt.Errorf("nil value for key LspExpFcMapName")
	}

	return map[string]interface{}{
		"lsp-exp-fc-map-name": *t.LspExpFcMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap.
func (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction represents the /nokia-conf/configure/groups/group/qos/lsp-exp-fc-map/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp represents the /nokia-conf/configure/groups/group/qos/lsp-exp-fc-map/lsp-exp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp struct {
	Fc          E_NokiaTypesSros_FcName                                                   `path:"fc" module:"nokia-conf"`
	LspExpValue NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union `path:"lsp-exp-value" module:"nokia-conf"`
	Profile     E_NokiaTypesQos_Profile                                                   `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) GetLspExpValue() NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp_LspExpValue_Union {
	if t == nil || t.LspExpValue == nil {
		return nil
	}
	return t.LspExpValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_in
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_in
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"lsp-exp-value": t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp.
func (*NokiaConf_Configure_Groups_Group_Qos_LspExpFcMap_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList represents the /nokia-conf/configure/groups/group/qos/match-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList struct {
	IpPrefixList   map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList   `path:"ip-prefix-list" module:"nokia-conf"`
	Ipv6PrefixList map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList `path:"ipv6-prefix-list" module:"nokia-conf"`
	PortList       map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList       `path:"port-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList) IsYANGGoStruct() {}

// NewIpPrefixList creates a new entry in the IpPrefixList list of the
// NokiaConf_Configure_Groups_Group_Qos_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) NewIpPrefixList(PrefixListName string) (*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList)
	}

	key := PrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpPrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpPrefixList", key)
	}

	t.IpPrefixList[key] = &NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList{
		PrefixListName: &PrefixListName,
	}

	return t.IpPrefixList[key], nil
}

// RenameIpPrefixList renames an entry in the list IpPrefixList within
// the NokiaConf_Configure_Groups_Group_Qos_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) RenameIpPrefixList(oldK, newK string) error {
	if _, ok := t.IpPrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in IpPrefixList", newK)
	}

	e, ok := t.IpPrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpPrefixList", oldK)
	}
	e.PrefixListName = &newK

	t.IpPrefixList[newK] = e
	delete(t.IpPrefixList, oldK)
	return nil
}

// GetOrCreateIpPrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) GetOrCreateIpPrefixList(PrefixListName string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList {

	key := PrefixListName

	if v, ok := t.IpPrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpPrefixList(PrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpPrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpPrefixList retrieves the value with the specified key from
// the IpPrefixList map field of NokiaConf_Configure_Groups_Group_Qos_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) GetIpPrefixList(PrefixListName string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList {

	if t == nil {
		return nil
	}

	key := PrefixListName

	if lm, ok := t.IpPrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpPrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) DeleteIpPrefixList(PrefixListName string) {
	key := PrefixListName

	delete(t.IpPrefixList, key)
}

// AppendIpPrefixList appends the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList struct to the
// list IpPrefixList of NokiaConf_Configure_Groups_Group_Qos_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) AppendIpPrefixList(v *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) error {
	if v.PrefixListName == nil {
		return fmt.Errorf("invalid nil key received for PrefixListName")
	}

	key := *v.PrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList)
	}

	if _, ok := t.IpPrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list IpPrefixList %v", key)
	}

	t.IpPrefixList[key] = v
	return nil
}

// NewIpv6PrefixList creates a new entry in the Ipv6PrefixList list of the
// NokiaConf_Configure_Groups_Group_Qos_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) NewIpv6PrefixList(PrefixListName string) (*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixList == nil {
		t.Ipv6PrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList)
	}

	key := PrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6PrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6PrefixList", key)
	}

	t.Ipv6PrefixList[key] = &NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList{
		PrefixListName: &PrefixListName,
	}

	return t.Ipv6PrefixList[key], nil
}

// RenameIpv6PrefixList renames an entry in the list Ipv6PrefixList within
// the NokiaConf_Configure_Groups_Group_Qos_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) RenameIpv6PrefixList(oldK, newK string) error {
	if _, ok := t.Ipv6PrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6PrefixList", newK)
	}

	e, ok := t.Ipv6PrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6PrefixList", oldK)
	}
	e.PrefixListName = &newK

	t.Ipv6PrefixList[newK] = e
	delete(t.Ipv6PrefixList, oldK)
	return nil
}

// GetOrCreateIpv6PrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) GetOrCreateIpv6PrefixList(PrefixListName string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList {

	key := PrefixListName

	if v, ok := t.Ipv6PrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6PrefixList(PrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6PrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpv6PrefixList retrieves the value with the specified key from
// the Ipv6PrefixList map field of NokiaConf_Configure_Groups_Group_Qos_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) GetIpv6PrefixList(PrefixListName string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList {

	if t == nil {
		return nil
	}

	key := PrefixListName

	if lm, ok := t.Ipv6PrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6PrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) DeleteIpv6PrefixList(PrefixListName string) {
	key := PrefixListName

	delete(t.Ipv6PrefixList, key)
}

// AppendIpv6PrefixList appends the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList struct to the
// list Ipv6PrefixList of NokiaConf_Configure_Groups_Group_Qos_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) AppendIpv6PrefixList(v *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) error {
	if v.PrefixListName == nil {
		return fmt.Errorf("invalid nil key received for PrefixListName")
	}

	key := *v.PrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixList == nil {
		t.Ipv6PrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList)
	}

	if _, ok := t.Ipv6PrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6PrefixList %v", key)
	}

	t.Ipv6PrefixList[key] = v
	return nil
}

// NewPortList creates a new entry in the PortList list of the
// NokiaConf_Configure_Groups_Group_Qos_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) NewPortList(PortListName string) (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList)
	}

	key := PortListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortList", key)
	}

	t.PortList[key] = &NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList{
		PortListName: &PortListName,
	}

	return t.PortList[key], nil
}

// RenamePortList renames an entry in the list PortList within
// the NokiaConf_Configure_Groups_Group_Qos_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) RenamePortList(oldK, newK string) error {
	if _, ok := t.PortList[newK]; ok {
		return fmt.Errorf("key %v already exists in PortList", newK)
	}

	e, ok := t.PortList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortList", oldK)
	}
	e.PortListName = &newK

	t.PortList[newK] = e
	delete(t.PortList, oldK)
	return nil
}

// GetOrCreatePortList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) GetOrCreatePortList(PortListName string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList {

	key := PortListName

	if v, ok := t.PortList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortList(PortListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortList got unexpected error: %v", err))
	}
	return v
}

// GetPortList retrieves the value with the specified key from
// the PortList map field of NokiaConf_Configure_Groups_Group_Qos_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) GetPortList(PortListName string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList {

	if t == nil {
		return nil
	}

	key := PortListName

	if lm, ok := t.PortList[key]; ok {
		return lm
	}
	return nil
}

// DeletePortList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) DeletePortList(PortListName string) {
	key := PortListName

	delete(t.PortList, key)
}

// AppendPortList appends the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList struct to the
// list PortList of NokiaConf_Configure_Groups_Group_Qos_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) AppendPortList(v *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) error {
	if v.PortListName == nil {
		return fmt.Errorf("invalid nil key received for PortListName")
	}

	key := *v.PortListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList)
	}

	if _, ok := t.PortList[key]; ok {
		return fmt.Errorf("duplicate key for list PortList %v", key)
	}

	t.PortList[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpPrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6PrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.PortList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList represents the /nokia-conf/configure/groups/group/qos/match-list/ip-prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList struct {
	Description    *string                                                                        `path:"description" module:"nokia-conf"`
	Prefix         map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix `path:"prefix" module:"nokia-conf"`
	PrefixListName *string                                                                        `path:"prefix-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixListName retrieves the value of the leaf PrefixListName from the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixListName is set, it can
// safely use t.GetPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) GetPrefixListName() string {
	if t == nil || t.PrefixListName == nil {
		return ""
	}
	return *t.PrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixListName == nil {
		return nil, fmt.Errorf("nil value for key PrefixListName")
	}

	return map[string]interface{}{
		"prefix-list-name": *t.PrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix represents the /nokia-conf/configure/groups/group/qos/match-list/ip-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_IpPrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList represents the /nokia-conf/configure/groups/group/qos/match-list/ipv6-prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList struct {
	Description    *string                                                                          `path:"description" module:"nokia-conf"`
	Prefix         map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix `path:"prefix" module:"nokia-conf"`
	PrefixListName *string                                                                          `path:"prefix-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixListName retrieves the value of the leaf PrefixListName from the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixListName is set, it can
// safely use t.GetPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) GetPrefixListName() string {
	if t == nil || t.PrefixListName == nil {
		return ""
	}
	return *t.PrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixListName == nil {
		return nil, fmt.Errorf("nil value for key PrefixListName")
	}

	return map[string]interface{}{
		"prefix-list-name": *t.PrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix represents the /nokia-conf/configure/groups/group/qos/match-list/ipv6-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_Ipv6PrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList represents the /nokia-conf/configure/groups/group/qos/match-list/port-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList struct {
	Description  *string                                                                                                                                    `path:"description" module:"nokia-conf"`
	Port         map[NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port `path:"port" module:"nokia-conf"`
	PortListName *string                                                                                                                                    `path:"port-list-name" module:"nokia-conf"`
	Range        map[NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range       `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/qos/match-list/port-list.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key struct {
	Start NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_End_Union   `path:"end"`
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) NewPort(Value NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union) (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port{
		Value: Value,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) RenamePort(oldK, newK NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.Value = newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) GetOrCreatePort(Value NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union) *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port {

	key := Value

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) GetPort(Value NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union) *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) DeletePort(Value NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union) {
	key := Value

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) AppendPort(v *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) error {
	key := v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) NewRange(Start NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_End_Union) (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range)
	}

	key := NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range{
		Start: Start,
		End:   End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) GetOrCreateRange(Start NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_End_Union) *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range {

	key := NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) GetRange(Start NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_End_Union) *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) DeleteRange(Start NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_End_Union) {
	key := NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) AppendRange(v *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) error {
	key := NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Key]*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortListName retrieves the value of the leaf PortListName from the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortListName is set, it can
// safely use t.GetPortListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) GetPortListName() string {
	if t == nil || t.PortListName == nil {
		return ""
	}
	return *t.PortListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortListName == nil {
		return nil, fmt.Errorf("nil value for key PortListName")
	}

	return map[string]interface{}{
		"port-list-name": *t.PortListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port represents the /nokia-conf/configure/groups/group/qos/match-list/port-list/port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port struct {
	Value NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) GetValue() NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range represents the /nokia-conf/configure/groups/group/qos/match-list/port-list/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range struct {
	End   NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) GetEnd() NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) GetStart() NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_MatchList_PortList_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress represents the /nokia-conf/configure/groups/group/qos/mc-fr-profile-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress struct {
	Class               map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class `path:"class" module:"nokia-conf"`
	Description         *string                                                                                                                                      `path:"description" module:"nokia-conf"`
	McFrEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union                                                             `path:"mc-fr-egress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) NewClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class{
		ClassId: ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) RenameClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) GetOrCreateClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) GetClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) DeleteClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class struct to the
// list Class of NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) AppendClass(v *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcFrEgressProfIndex retrieves the value of the leaf McFrEgressProfIndex from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McFrEgressProfIndex is set, it can
// safely use t.GetMcFrEgressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McFrEgressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) GetMcFrEgressProfIndex() NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_McFrEgressProfIndex_Union {
	if t == nil || t.McFrEgressProfIndex == nil {
		return nil
	}
	return t.McFrEgressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mc-fr-egress-prof-index": t.McFrEgressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class represents the /nokia-conf/configure/groups/group/qos/mc-fr-profile-egress/class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class struct {
	ClassId      NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union `path:"class-id" module:"nokia-conf"`
	MaxQueueSize *uint32                                                                    `path:"max-queue-size" module:"nokia-conf"`
	Mir          *uint32                                                                    `path:"mir" module:"nokia-conf"`
	Weight       *uint32                                                                    `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) IsYANGGoStruct() {}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) GetClassId() NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetMaxQueueSize retrieves the value of the leaf MaxQueueSize from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueSize is set, it can
// safely use t.GetMaxQueueSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) GetMaxQueueSize() uint32 {
	if t == nil || t.MaxQueueSize == nil {
		return 0
	}
	return *t.MaxQueueSize
}

// GetMir retrieves the value of the leaf Mir from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mir is set, it can
// safely use t.GetMir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) GetMir() uint32 {
	if t == nil || t.Mir == nil {
		return 0
	}
	return *t.Mir
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileEgress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress represents the /nokia-conf/configure/groups/group/qos/mc-fr-profile-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress struct {
	Class                map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class `path:"class" module:"nokia-conf"`
	Description          *string                                                                                                                                        `path:"description" module:"nokia-conf"`
	McFrIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union                                                             `path:"mc-fr-ingress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) NewClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class{
		ClassId: ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) RenameClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) GetOrCreateClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) GetClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) DeleteClass(ClassId NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class struct to the
// list Class of NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) AppendClass(v *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcFrIngressProfIndex retrieves the value of the leaf McFrIngressProfIndex from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McFrIngressProfIndex is set, it can
// safely use t.GetMcFrIngressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McFrIngressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) GetMcFrIngressProfIndex() NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_McFrIngressProfIndex_Union {
	if t == nil || t.McFrIngressProfIndex == nil {
		return nil
	}
	return t.McFrIngressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mc-fr-ingress-prof-index": t.McFrIngressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class represents the /nokia-conf/configure/groups/group/qos/mc-fr-profile-ingress/class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class struct {
	ClassId           NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union `path:"class-id" module:"nokia-conf"`
	ReassemblyTimeout *uint32                                                                     `path:"reassembly-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) IsYANGGoStruct() {}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) GetClassId() NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 0
	}
	return *t.ReassemblyTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class.
func (*NokiaConf_Configure_Groups_Group_Qos_McFrProfileIngress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MdAutoId represents the /nokia-conf/configure/groups/group/qos/md-auto-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MdAutoId struct {
	QosPolicyIdRange *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange `path:"qos-policy-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MdAutoId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MdAutoId) IsYANGGoStruct() {}

// GetOrCreateQosPolicyIdRange retrieves the value of the QosPolicyIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId) GetOrCreateQosPolicyIdRange() *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange {
	if t.QosPolicyIdRange != nil {
		return t.QosPolicyIdRange
	}
	t.QosPolicyIdRange = &NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange{}
	return t.QosPolicyIdRange
}

// GetQosPolicyIdRange returns the value of the QosPolicyIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_MdAutoId. If the receiver or the field QosPolicyIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId) GetQosPolicyIdRange() *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange {
	if t != nil && t.QosPolicyIdRange != nil {
		return t.QosPolicyIdRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MdAutoId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.QosPolicyIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MdAutoId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MdAutoId.
func (*NokiaConf_Configure_Groups_Group_Qos_MdAutoId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange represents the /nokia-conf/configure/groups/group/qos/md-auto-id/qos-policy-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange.
func (*NokiaConf_Configure_Groups_Group_Qos_MdAutoId_QosPolicyIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress represents the /nokia-conf/configure/groups/group/qos/mlppp-profile-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress struct {
	Class                  map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class `path:"class" module:"nokia-conf"`
	Description            *string                                                                                                                                        `path:"description" module:"nokia-conf"`
	Fc                     map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc        `path:"fc" module:"nokia-conf"`
	McMlpppEgressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union                                                           `path:"mc-mlppp-egress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) NewClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class{
		ClassId: ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) RenameClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) GetOrCreateClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) GetClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) DeleteClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class struct to the
// list Class of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) AppendClass(v *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcMlpppEgressProfIndex retrieves the value of the leaf McMlpppEgressProfIndex from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McMlpppEgressProfIndex is set, it can
// safely use t.GetMcMlpppEgressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McMlpppEgressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) GetMcMlpppEgressProfIndex() NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_McMlpppEgressProfIndex_Union {
	if t == nil || t.McMlpppEgressProfIndex == nil {
		return nil
	}
	return t.McMlpppEgressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mc-mlppp-egress-prof-index": t.McMlpppEgressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class represents the /nokia-conf/configure/groups/group/qos/mlppp-profile-egress/class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class struct {
	ClassId      NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union `path:"class-id" module:"nokia-conf"`
	MaxQueueSize *uint32                                                                     `path:"max-queue-size" module:"nokia-conf"`
	Mir          *uint32                                                                     `path:"mir" module:"nokia-conf"`
	Weight       *uint32                                                                     `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) IsYANGGoStruct() {}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) GetClassId() NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetMaxQueueSize retrieves the value of the leaf MaxQueueSize from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueSize is set, it can
// safely use t.GetMaxQueueSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) GetMaxQueueSize() uint32 {
	if t == nil || t.MaxQueueSize == nil {
		return 0
	}
	return *t.MaxQueueSize
}

// GetMir retrieves the value of the leaf Mir from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mir is set, it can
// safely use t.GetMir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) GetMir() uint32 {
	if t == nil || t.Mir == nil {
		return 0
	}
	return *t.Mir
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc represents the /nokia-conf/configure/groups/group/qos/mlppp-profile-egress/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc struct {
	FcName     NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	MlpppClass *uint32                                                                 `path:"mlppp-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetMlpppClass retrieves the value of the leaf MlpppClass from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MlpppClass is set, it can
// safely use t.GetMlpppClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MlpppClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) GetMlpppClass() uint32 {
	if t == nil || t.MlpppClass == nil {
		return 0
	}
	return *t.MlpppClass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileEgress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress represents the /nokia-conf/configure/groups/group/qos/mlppp-profile-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress struct {
	Class                   map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class `path:"class" module:"nokia-conf"`
	Description             *string                                                                                                                                          `path:"description" module:"nokia-conf"`
	McMlpppIngressProfIndex NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union                                                           `path:"mc-mlppp-ingress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) NewClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class{
		ClassId: ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) RenameClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) GetOrCreateClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) GetClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) DeleteClass(ClassId NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class struct to the
// list Class of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) AppendClass(v *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcMlpppIngressProfIndex retrieves the value of the leaf McMlpppIngressProfIndex from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McMlpppIngressProfIndex is set, it can
// safely use t.GetMcMlpppIngressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McMlpppIngressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) GetMcMlpppIngressProfIndex() NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_McMlpppIngressProfIndex_Union {
	if t == nil || t.McMlpppIngressProfIndex == nil {
		return nil
	}
	return t.McMlpppIngressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mc-mlppp-ingress-prof-index": t.McMlpppIngressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class represents the /nokia-conf/configure/groups/group/qos/mlppp-profile-ingress/class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class struct {
	ClassId           NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union `path:"class-id" module:"nokia-conf"`
	ReassemblyTimeout *uint32                                                                      `path:"reassembly-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) IsYANGGoStruct() {}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) GetClassId() NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 0
	}
	return *t.ReassemblyTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class.
func (*NokiaConf_Configure_Groups_Group_Qos_MlpppProfileIngress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network represents the /nokia-conf/configure/groups/group/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network struct {
	Description       *string                                               `path:"description" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_Qos_Network_Egress  `path:"egress" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress `path:"ingress" module:"nokia-conf"`
	NetworkPolicyName *string                                               `path:"network-policy-name" module:"nokia-conf"`
	PolicyId          *uint32                                               `path:"policy-id" module:"nokia-conf"`
	Scope             E_NokiaTypesQos_ItemScope                             `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetEgress() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetIngress() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetNetworkPolicyName retrieves the value of the leaf NetworkPolicyName from the NokiaConf_Configure_Groups_Group_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkPolicyName is set, it can
// safely use t.GetNetworkPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetNetworkPolicyName() string {
	if t == nil || t.NetworkPolicyName == nil {
		return ""
	}
	return *t.NetworkPolicyName
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkPolicyName == nil {
		return nil, fmt.Errorf("nil value for key NetworkPolicyName")
	}

	return map[string]interface{}{
		"network-policy-name": *t.NetworkPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkIngress represents the /nokia-conf/configure/groups/group/qos/network-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkIngress struct {
	Description                 *string                                                                                                                                      `path:"description" module:"nokia-conf"`
	Fc                          map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc                                                                           `path:"fc" module:"nokia-conf"`
	IngressClassificationPolicy *string                                                                                                                                      `path:"ingress-classification-policy" module:"nokia-conf"`
	NetworkIngressPolicyName    *string                                                                                                                                      `path:"network-ingress-policy-name" module:"nokia-conf"`
	Policer                     map[NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer `path:"policer" module:"nokia-conf"`
	PolicerAllocation           E_NokiaTypesQos_NetworkIngressPolicerMode                                                                                                    `path:"policer-allocation" module:"nokia-conf"`
	Scope                       E_NokiaTypesQos_ItemScope                                                                                                                    `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_NetworkIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) NewFc(FcName string) (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc{
		FcName: &FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) RenameFc(oldK, newK string) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = &newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetOrCreateFc(FcName string) *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetFc(FcName string) *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) DeleteFc(FcName string) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) error {
	if v.FcName == nil {
		return fmt.Errorf("invalid nil key received for FcName")
	}

	key := *v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Qos_NetworkIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIngressClassificationPolicy retrieves the value of the leaf IngressClassificationPolicy from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressClassificationPolicy is set, it can
// safely use t.GetIngressClassificationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressClassificationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetIngressClassificationPolicy() string {
	if t == nil || t.IngressClassificationPolicy == nil {
		return ""
	}
	return *t.IngressClassificationPolicy
}

// GetNetworkIngressPolicyName retrieves the value of the leaf NetworkIngressPolicyName from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkIngressPolicyName is set, it can
// safely use t.GetNetworkIngressPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkIngressPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetNetworkIngressPolicyName() string {
	if t == nil || t.NetworkIngressPolicyName == nil {
		return ""
	}
	return *t.NetworkIngressPolicyName
}

// GetPolicerAllocation retrieves the value of the leaf PolicerAllocation from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerAllocation is set, it can
// safely use t.GetPolicerAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetPolicerAllocation() E_NokiaTypesQos_NetworkIngressPolicerMode {
	if t == nil || t.PolicerAllocation == 0 {
		return NokiaTypesQos_NetworkIngressPolicerMode_none
	}
	return t.PolicerAllocation
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PolicerAllocation == 0 {
		t.PolicerAllocation = NokiaTypesQos_NetworkIngressPolicerMode_none
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkIngressPolicyName == nil {
		return nil, fmt.Errorf("nil value for key NetworkIngressPolicyName")
	}

	return map[string]interface{}{
		"network-ingress-policy-name": *t.NetworkIngressPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc represents the /nokia-conf/configure/groups/group/qos/network-ingress/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc struct {
	FcName           *string `path:"fc-name" module:"nokia-conf"`
	MulticastPolicer *int32  `path:"multicast-policer" module:"nokia-conf"`
	Policer          *int32  `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) GetFcName() string {
	if t == nil || t.FcName == nil {
		return ""
	}
	return *t.FcName
}

// GetMulticastPolicer retrieves the value of the leaf MulticastPolicer from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastPolicer is set, it can
// safely use t.GetMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) GetMulticastPolicer() int32 {
	if t == nil || t.MulticastPolicer == nil {
		return 0
	}
	return *t.MulticastPolicer
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcName == nil {
		return nil, fmt.Errorf("nil value for key FcName")
	}

	return map[string]interface{}{
		"fc-name": *t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer represents the /nokia-conf/configure/groups/group/qos/network-ingress/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	Cbs            NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs            NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PolicerId      NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate           *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode       E_NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_StatMode      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) GetStatMode() E_NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Cbs_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Mbs_Enum_auto
	}
	t.AdaptationRule.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/network-ingress/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate represents the /nokia-conf/configure/groups/group/qos/network-ingress/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionUint32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate_Pir_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionUint32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate_Pir_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkIngress_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue represents the /nokia-conf/configure/groups/group/qos/network-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct {
	Description        *string                                                                                                                                      `path:"description" module:"nokia-conf"`
	EgressHsmda        *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda                                                                               `path:"egress-hsmda" module:"nokia-conf"`
	Fc                 map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc                  `path:"fc" module:"nokia-conf"`
	HsAttachmentPolicy *string                                                                                                                                      `path:"hs-attachment-policy" module:"nokia-conf"`
	HsWrrGroup         map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	NetworkQueuePolicy *string                                                                                                                                      `path:"network-queue-policy" module:"nokia-conf"`
	Queue              map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue           `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) NewHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup{
		GroupId: GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) RenameHsWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetOrCreateHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) DeleteHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) AppendHsWrrGroup(v *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateEgressHsmda retrieves the value of the EgressHsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetOrCreateEgressHsmda() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda {
	if t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	t.EgressHsmda = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda{}
	return t.EgressHsmda
}

// GetEgressHsmda returns the value of the EgressHsmda struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue. If the receiver or the field EgressHsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetEgressHsmda() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda {
	if t != nil && t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsAttachmentPolicy retrieves the value of the leaf HsAttachmentPolicy from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAttachmentPolicy is set, it can
// safely use t.GetHsAttachmentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAttachmentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetHsAttachmentPolicy() string {
	if t == nil || t.HsAttachmentPolicy == nil {
		return ""
	}
	return *t.HsAttachmentPolicy
}

// GetNetworkQueuePolicy retrieves the value of the leaf NetworkQueuePolicy from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkQueuePolicy is set, it can
// safely use t.GetNetworkQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkQueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) GetNetworkQueuePolicy() string {
	if t == nil || t.NetworkQueuePolicy == nil {
		return ""
	}
	return *t.NetworkQueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressHsmda.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkQueuePolicy == nil {
		return nil, fmt.Errorf("nil value for key NetworkQueuePolicy")
	}

	return map[string]interface{}{
		"network-queue-policy": *t.NetworkQueuePolicy,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda represents the /nokia-conf/configure/groups/group/qos/network-queue/egress-hsmda YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda struct {
	PacketByteOffset *int32                                                                                                                                                     `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue `path:"queue" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                                    `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue represents the /nokia-conf/configure/groups/group/qos/network-queue/egress-hsmda/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	BurstLimit     NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Mbs            NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	PercentRate    *float64                                                                             `path:"percent-rate" module:"nokia-conf"`
	QueueId        NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union    `path:"queue-id" module:"nokia-conf"`
	SlopePolicy    *string                                                                              `path:"slope-policy" module:"nokia-conf"`
	WrrWeight      *uint32                                                                              `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100.00
	}
	return *t.PercentRate
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) GetWrrWeight() uint32 {
	if t == nil || t.WrrWeight == nil {
		return 1
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Enum_auto
	}
	if t.PercentRate == nil {
		var v float64 = 100.00
		t.PercentRate = &v
	}
	if t.WrrWeight == nil {
		var v uint32 = 1
		t.WrrWeight = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/network-queue/egress-hsmda/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc represents the /nokia-conf/configure/groups/group/qos/network-queue/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc struct {
	EgressHsmda    *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda `path:"egress-hsmda" module:"nokia-conf"`
	FcName         NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	MulticastQueue *int32                                                            `path:"multicast-queue" module:"nokia-conf"`
	Queue          *int32                                                            `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) IsYANGGoStruct() {}

// GetOrCreateEgressHsmda retrieves the value of the EgressHsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) GetOrCreateEgressHsmda() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda {
	if t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	t.EgressHsmda = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda{}
	return t.EgressHsmda
}

// GetEgressHsmda returns the value of the EgressHsmda struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc. If the receiver or the field EgressHsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) GetEgressHsmda() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda {
	if t != nil && t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetMulticastQueue retrieves the value of the leaf MulticastQueue from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastQueue is set, it can
// safely use t.GetMulticastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) GetMulticastQueue() int32 {
	if t == nil || t.MulticastQueue == nil {
		return 9
	}
	return *t.MulticastQueue
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 1
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MulticastQueue == nil {
		var v int32 = 9
		t.MulticastQueue = &v
	}
	if t.Queue == nil {
		var v int32 = 1
		t.Queue = &v
	}
	t.EgressHsmda.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda represents the /nokia-conf/configure/groups/group/qos/network-queue/fc/egress-hsmda YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda struct {
	Queue *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Fc_EgressHsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup represents the /nokia-conf/configure/groups/group/qos/network-queue/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	GroupId        NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union   `path:"group-id" module:"nokia-conf"`
	HsClassWeight  *uint32                                                                      `path:"hs-class-weight" module:"nokia-conf"`
	Rate           *uint32                                                                      `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) GetGroupId() NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 100
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.Rate == nil {
		var v uint32 = 100
		t.Rate = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/network-queue/hs-wrr-group/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue represents the /nokia-conf/configure/groups/group/qos/network-queue/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                `path:"avg-frame-overhead" module:"nokia-conf"`
	Cbs                *float64                                                                `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail       `path:"drop-tail" module:"nokia-conf"`
	HsAltPortClassPool *bool                                                                   `path:"hs-alt-port-class-pool" module:"nokia-conf"`
	HsClassWeight      *uint32                                                                 `path:"hs-class-weight" module:"nokia-conf"`
	HsMbs              *float64                                                                `path:"hs-mbs" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue    `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *uint32                                                                 `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                *float64                                                                `path:"mbs" module:"nokia-conf"`
	Multipoint         *bool                                                                   `path:"multipoint" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent     `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	QueueId            NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union   `path:"queue-id" module:"nokia-conf"`
	QueueType          E_NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueType     `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate           `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetOrCreatePortParent() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetPortParent() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.00
	}
	return *t.AvgFrameOverhead
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetCbs() float64 {
	if t == nil || t.Cbs == nil {
		return 1.00
	}
	return *t.Cbs
}

// GetHsAltPortClassPool retrieves the value of the leaf HsAltPortClassPool from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAltPortClassPool is set, it can
// safely use t.GetHsAltPortClassPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAltPortClassPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetHsAltPortClassPool() bool {
	if t == nil || t.HsAltPortClassPool == nil {
		return false
	}
	return *t.HsAltPortClassPool
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetHsMbs retrieves the value of the leaf HsMbs from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsMbs is set, it can
// safely use t.GetHsMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetHsMbs() float64 {
	if t == nil || t.HsMbs == nil {
		return 100.00
	}
	return *t.HsMbs
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetHsWrrWeight() uint32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetMbs() float64 {
	if t == nil || t.Mbs == nil {
		return 0.0
	}
	return *t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) GetQueueType() E_NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueType_auto_expedited
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AvgFrameOverhead == nil {
		var v float64 = 0.00
		t.AvgFrameOverhead = &v
	}
	if t.Cbs == nil {
		var v float64 = 1.00
		t.Cbs = &v
	}
	if t.HsAltPortClassPool == nil {
		var v bool = false
		t.HsAltPortClassPool = &v
	}
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.HsMbs == nil {
		var v float64 = 100.00
		t.HsMbs = &v
	}
	if t.HsWrrWeight == nil {
		var v uint32 = 1
		t.HsWrrWeight = &v
	}
	if t.Multipoint == nil {
		var v bool = false
		t.Multipoint = &v
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_QueueType_auto_expedited
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/network-queue/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Fir E_NokiaTypesQos_AdaptationRule `path:"fir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) GetFir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Fir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Fir == 0 {
		t.Fir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail represents the /nokia-conf/configure/groups/group/qos/network-queue/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/qos/network-queue/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/qos/network-queue/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent represents the /nokia-conf/configure/groups/group/qos/network-queue/queue/port-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate represents the /nokia-conf/configure/groups/group/qos/network-queue/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate struct {
	Cir *int32 `path:"cir" module:"nokia-conf"`
	Fir *int32 `path:"fir" module:"nokia-conf"`
	Pir *int32 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) GetCir() int32 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) GetFir() int32 {
	if t == nil || t.Fir == nil {
		return 0
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) GetPir() int32 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v int32 = 0
		t.Cir = &v
	}
	if t.Fir == nil {
		var v int32 = 0
		t.Fir = &v
	}
	if t.Pir == nil {
		var v int32 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_NetworkQueue_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress represents the /nokia-conf/configure/groups/group/qos/network/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress struct {
	Dscp          map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp  `path:"dscp" module:"nokia-conf"`
	Fc            map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc        `path:"fc" module:"nokia-conf"`
	IpCriteria    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria                                                                        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria  *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria                                                                      `path:"ipv6-criteria" module:"nokia-conf"`
	Prec          map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec `path:"prec" module:"nokia-conf"`
	RemarkTrusted *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted                                                                     `path:"remark-trusted" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress) IsYANGGoStruct() {}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) NewDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) RenameDscp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetOrCreateDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) DeleteDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) AppendDscp(v *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewPrec creates a new entry in the Prec list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) NewPrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec)
	}

	key := PrecValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prec", key)
	}

	t.Prec[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec{
		PrecValue: PrecValue,
	}

	return t.Prec[key], nil
}

// RenamePrec renames an entry in the list Prec within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) RenamePrec(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union) error {
	if _, ok := t.Prec[newK]; ok {
		return fmt.Errorf("key %v already exists in Prec", newK)
	}

	e, ok := t.Prec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prec", oldK)
	}
	e.PrecValue = newK

	t.Prec[newK] = e
	delete(t.Prec, oldK)
	return nil
}

// GetOrCreatePrec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetOrCreatePrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec {

	key := PrecValue

	if v, ok := t.Prec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrec(PrecValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrec got unexpected error: %v", err))
	}
	return v
}

// GetPrec retrieves the value with the specified key from
// the Prec map field of NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetPrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec {

	if t == nil {
		return nil
	}

	key := PrecValue

	if lm, ok := t.Prec[key]; ok {
		return lm
	}
	return nil
}

// DeletePrec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) DeletePrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union) {
	key := PrecValue

	delete(t.Prec, key)
}

// AppendPrec appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec struct to the
// list Prec of NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) AppendPrec(v *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) error {
	key := v.PrecValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec)
	}

	if _, ok := t.Prec[key]; ok {
		return fmt.Errorf("duplicate key for list Prec %v", key)
	}

	t.Prec[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetOrCreateIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetOrCreateRemarkTrusted retrieves the value of the RemarkTrusted field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetOrCreateRemarkTrusted() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted {
	if t.RemarkTrusted != nil {
		return t.RemarkTrusted
	}
	t.RemarkTrusted = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted{}
	return t.RemarkTrusted
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetRemarkTrusted returns the value of the RemarkTrusted struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress. If the receiver or the field RemarkTrusted is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) GetRemarkTrusted() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted {
	if t != nil && t.RemarkTrusted != nil {
		return t.RemarkTrusted
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	t.RemarkTrusted.PopulateDefaults()
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Prec {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp represents the /nokia-conf/configure/groups/group/qos/network/egress/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp struct {
	DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union `path:"dscp-name" module:"nokia-conf"`
	Fc       E_NokiaTypesSros_FcName                                                 `path:"fc" module:"nokia-conf"`
	Profile  E_NokiaTypesQos_EgressProfile                                           `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) IsYANGGoStruct() {}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) GetDscpName() NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp_DscpName_Union {
	if t == nil || t.DscpName == nil {
		return nil
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc represents the /nokia-conf/configure/groups/group/qos/network/egress/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc struct {
	DeMark            *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark            `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	Dot1PInProfile    *int32                                                                    `path:"dot1p-in-profile" module:"nokia-conf"`
	Dot1POutProfile   *int32                                                                    `path:"dot1p-out-profile" module:"nokia-conf"`
	DscpInProfile     E_NokiaTypesQos_DscpName                                                  `path:"dscp-in-profile" module:"nokia-conf"`
	DscpOutProfile    E_NokiaTypesQos_DscpName                                                  `path:"dscp-out-profile" module:"nokia-conf"`
	FcName            NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union       `path:"fc-name" module:"nokia-conf"`
	LspExpInProfile   *int32                                                                    `path:"lsp-exp-in-profile" module:"nokia-conf"`
	LspExpOutProfile  *int32                                                                    `path:"lsp-exp-out-profile" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetDeMark() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetDot1PInProfile retrieves the value of the leaf Dot1PInProfile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PInProfile is set, it can
// safely use t.GetDot1PInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetDot1PInProfile() int32 {
	if t == nil || t.Dot1PInProfile == nil {
		return 0
	}
	return *t.Dot1PInProfile
}

// GetDot1POutProfile retrieves the value of the leaf Dot1POutProfile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1POutProfile is set, it can
// safely use t.GetDot1POutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1POutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetDot1POutProfile() int32 {
	if t == nil || t.Dot1POutProfile == nil {
		return 0
	}
	return *t.Dot1POutProfile
}

// GetDscpInProfile retrieves the value of the leaf DscpInProfile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpInProfile is set, it can
// safely use t.GetDscpInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetDscpInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpInProfile == 0 {
		return 0
	}
	return t.DscpInProfile
}

// GetDscpOutProfile retrieves the value of the leaf DscpOutProfile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpOutProfile is set, it can
// safely use t.GetDscpOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpOutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetDscpOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpOutProfile == 0 {
		return 0
	}
	return t.DscpOutProfile
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetLspExpInProfile retrieves the value of the leaf LspExpInProfile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpInProfile is set, it can
// safely use t.GetLspExpInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetLspExpInProfile() int32 {
	if t == nil || t.LspExpInProfile == nil {
		return 0
	}
	return *t.LspExpInProfile
}

// GetLspExpOutProfile retrieves the value of the leaf LspExpOutProfile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpOutProfile is set, it can
// safely use t.GetLspExpOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpOutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) GetLspExpOutProfile() int32 {
	if t == nil || t.LspExpOutProfile == nil {
		return 0
	}
	return *t.LspExpOutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark represents the /nokia-conf/configure/groups/group/qos/network/egress/fc/de-mark YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup represents the /nokia-conf/configure/groups/group/qos/network/egress/fc/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup struct {
	Policer *int32 `path:"policer" module:"nokia-conf"`
	Queue   *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) IsYANGGoStruct() {}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Fc_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                            `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action struct {
	Fc                E_NokiaTypesSros_FcName                                                                        `path:"fc" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
	Profile           E_NokiaTypesQos_EgressProfile                                                                  `path:"profile" module:"nokia-conf"`
	Type              E_NokiaTypesQos_CriteriaActionType                                                             `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/action/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup struct {
	Policer *int32 `path:"policer" module:"nokia-conf"`
	Queue   *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                                  `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	IcmpType *int32                                                                                    `path:"icmp-type" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetIcmpType retrieves the value of the leaf IcmpType from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpType is set, it can
// safely use t.GetIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetIcmpType() int32 {
	if t == nil || t.IcmpType == nil {
		return 0
	}
	return *t.IcmpType
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                                    `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                    `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                    `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                   `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                                    `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                    `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                    `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                   `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/network/egress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                              `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action struct {
	Fc                E_NokiaTypesSros_FcName                                                                          `path:"fc" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
	Profile           E_NokiaTypesQos_EgressProfile                                                                    `path:"profile" module:"nokia-conf"`
	Type              E_NokiaTypesQos_CriteriaActionType                                                               `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/action/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup struct {
	Policer *int32 `path:"policer" module:"nokia-conf"`
	Queue   *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                                      `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Fragment   E_NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	IcmpType   *int32                                                                                        `path:"icmp-type" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetIcmpType retrieves the value of the leaf IcmpType from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpType is set, it can
// safely use t.GetIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetIcmpType() int32 {
	if t == nil || t.IcmpType == nil {
		return 0
	}
	return *t.IcmpType
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                                      `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                      `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                      `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                     `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                                      `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                      `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                      `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                     `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/network/egress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec represents the /nokia-conf/configure/groups/group/qos/network/egress/prec YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec struct {
	Fc        E_NokiaTypesSros_FcName                                                  `path:"fc" module:"nokia-conf"`
	PrecValue NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union `path:"prec-value" module:"nokia-conf"`
	Profile   E_NokiaTypesQos_EgressProfile                                            `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPrecValue retrieves the value of the leaf PrecValue from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrecValue is set, it can
// safely use t.GetPrecValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrecValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) GetPrecValue() NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec_PrecValue_Union {
	if t == nil || t.PrecValue == nil {
		return nil
	}
	return t.PrecValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prec-value": t.PrecValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted represents the /nokia-conf/configure/groups/group/qos/network/egress/remark-trusted YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted struct {
	ForceEgressMarking *bool `path:"force-egress-marking" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted) IsYANGGoStruct() {}

// GetForceEgressMarking retrieves the value of the leaf ForceEgressMarking from the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceEgressMarking is set, it can
// safely use t.GetForceEgressMarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceEgressMarking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted) GetForceEgressMarking() bool {
	if t == nil || t.ForceEgressMarking == nil {
		return false
	}
	return *t.ForceEgressMarking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceEgressMarking == nil {
		var v bool = false
		t.ForceEgressMarking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Egress_RemarkTrusted) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress represents the /nokia-conf/configure/groups/group/qos/network/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct {
	DefaultAction *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction                                                                            `path:"default-action" module:"nokia-conf"`
	Dot1P         map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P    `path:"dot1p" module:"nokia-conf"`
	Dscp          map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp        `path:"dscp" module:"nokia-conf"`
	Fc            map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc              `path:"fc" module:"nokia-conf"`
	IpCriteria    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria                                                                               `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria  *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria                                                                             `path:"ipv6-criteria" module:"nokia-conf"`
	LerUseDscp    *bool                                                                                                                                          `path:"ler-use-dscp" module:"nokia-conf"`
	LspExp        map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp `path:"lsp-exp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) NewDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P{
		Dot1PValue: Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) RenameDot1P(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetOrCreateDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) DeleteDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) AppendDot1P(v *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) error {
	key := v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) NewDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) RenameDscp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetOrCreateDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) DeleteDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) AppendDscp(v *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) NewLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp{
		LspExpValue: LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) RenameLspExp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetOrCreateLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) DeleteLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp struct to the
// list LspExp of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) AppendLspExp(v *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) error {
	key := v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction{}
	return t.DefaultAction
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetOrCreateIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetDefaultAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetLerUseDscp retrieves the value of the leaf LerUseDscp from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LerUseDscp is set, it can
// safely use t.GetLerUseDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LerUseDscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) GetLerUseDscp() bool {
	if t == nil || t.LerUseDscp == nil {
		return false
	}
	return *t.LerUseDscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LerUseDscp == nil {
		var v bool = false
		t.LerUseDscp = &v
	}
	t.DefaultAction.PopulateDefaults()
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction represents the /nokia-conf/configure/groups/group/qos/network/ingress/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P represents the /nokia-conf/configure/groups/group/qos/network/ingress/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P struct {
	Dot1PValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union `path:"dot1p-value" module:"nokia-conf"`
	Fc         E_NokiaTypesSros_FcName                                                     `path:"fc" module:"nokia-conf"`
	Profile    E_NokiaTypesQos_ProfileDe                                                   `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) IsYANGGoStruct() {}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) GetDot1PValue() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P_Dot1PValue_Union {
	if t == nil || t.Dot1PValue == nil {
		return nil
	}
	return t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-value": t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp represents the /nokia-conf/configure/groups/group/qos/network/ingress/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp struct {
	DscpName NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union `path:"dscp-name" module:"nokia-conf"`
	Fc       E_NokiaTypesSros_FcName                                                  `path:"fc" module:"nokia-conf"`
	Profile  E_NokiaTypesQos_Profile                                                  `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) IsYANGGoStruct() {}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) GetDscpName() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp_DscpName_Union {
	if t == nil || t.DscpName == nil {
		return nil
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc represents the /nokia-conf/configure/groups/group/qos/network/ingress/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc struct {
	FcName          NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union     `path:"fc-name" module:"nokia-conf"`
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup represents the /nokia-conf/configure/groups/group/qos/network/ingress/fc/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup struct {
	BroadcastPolicer *int32 `path:"broadcast-policer" module:"nokia-conf"`
	MulticastPolicer *int32 `path:"multicast-policer" module:"nokia-conf"`
	Policer          *int32 `path:"policer" module:"nokia-conf"`
	UnknownPolicer   *int32 `path:"unknown-policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) IsYANGGoStruct() {}

// GetBroadcastPolicer retrieves the value of the leaf BroadcastPolicer from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastPolicer is set, it can
// safely use t.GetBroadcastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) GetBroadcastPolicer() int32 {
	if t == nil || t.BroadcastPolicer == nil {
		return 0
	}
	return *t.BroadcastPolicer
}

// GetMulticastPolicer retrieves the value of the leaf MulticastPolicer from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastPolicer is set, it can
// safely use t.GetMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) GetMulticastPolicer() int32 {
	if t == nil || t.MulticastPolicer == nil {
		return 0
	}
	return *t.MulticastPolicer
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetUnknownPolicer retrieves the value of the leaf UnknownPolicer from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownPolicer is set, it can
// safely use t.GetUnknownPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) GetUnknownPolicer() int32 {
	if t == nil || t.UnknownPolicer == nil {
		return 0
	}
	return *t.UnknownPolicer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Fc_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                             `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action struct {
	Fc      E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile            `path:"profile" module:"nokia-conf"`
	Type    E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                                   `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                                     `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                     `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                     `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                    `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                                     `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                     `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                     `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                    `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/network/ingress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                               `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action struct {
	Fc      E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile            `path:"profile" module:"nokia-conf"`
	Type    E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                                       `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Fragment   E_NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                                       `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                       `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                       `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                      `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                                       `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                       `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                       `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                      `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/network/ingress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp represents the /nokia-conf/configure/groups/group/qos/network/ingress/lsp-exp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp struct {
	Fc          E_NokiaTypesSros_FcName                                                       `path:"fc" module:"nokia-conf"`
	LspExpValue NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union `path:"lsp-exp-value" module:"nokia-conf"`
	Profile     E_NokiaTypesQos_Profile                                                       `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) GetLspExpValue() NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp_LspExpValue_Union {
	if t == nil || t.LspExpValue == nil {
		return nil
	}
	return t.LspExpValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"lsp-exp-value": t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp.
func (*NokiaConf_Configure_Groups_Group_Qos_Network_Ingress_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset represents the /nokia-conf/configure/groups/group/qos/packet-byte-offset YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset.
func (*NokiaConf_Configure_Groups_Group_Qos_PacketByteOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy struct {
	Description              *string                                                                                                                                         `path:"description" module:"nokia-conf"`
	PolicerControlPolicyName *string                                                                                                                                         `path:"policer-control-policy-name" module:"nokia-conf"`
	Root                     *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root                                                                                 `path:"root" module:"nokia-conf"`
	Tier                     map[NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier `path:"tier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// NewTier creates a new entry in the Tier list of the
// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) NewTier(TierId NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union) (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier)
	}

	key := TierId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tier", key)
	}

	t.Tier[key] = &NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier{
		TierId: TierId,
	}

	return t.Tier[key], nil
}

// RenameTier renames an entry in the list Tier within
// the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) RenameTier(oldK, newK NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union) error {
	if _, ok := t.Tier[newK]; ok {
		return fmt.Errorf("key %v already exists in Tier", newK)
	}

	e, ok := t.Tier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tier", oldK)
	}
	e.TierId = newK

	t.Tier[newK] = e
	delete(t.Tier, oldK)
	return nil
}

// GetOrCreateTier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) GetOrCreateTier(TierId NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier {

	key := TierId

	if v, ok := t.Tier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTier(TierId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTier got unexpected error: %v", err))
	}
	return v
}

// GetTier retrieves the value with the specified key from
// the Tier map field of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) GetTier(TierId NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier {

	if t == nil {
		return nil
	}

	key := TierId

	if lm, ok := t.Tier[key]; ok {
		return lm
	}
	return nil
}

// DeleteTier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) DeleteTier(TierId NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union) {
	key := TierId

	delete(t.Tier, key)
}

// AppendTier appends the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier struct to the
// list Tier of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) AppendTier(v *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) error {
	key := v.TierId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier)
	}

	if _, ok := t.Tier[key]; ok {
		return fmt.Errorf("duplicate key for list Tier %v", key)
	}

	t.Tier[key] = v
	return nil
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) GetRoot() *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicerControlPolicyName retrieves the value of the leaf PolicerControlPolicyName from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicyName is set, it can
// safely use t.GetPolicerControlPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) GetPolicerControlPolicyName() string {
	if t == nil || t.PolicerControlPolicyName == nil {
		return ""
	}
	return *t.PolicerControlPolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
	for _, e := range t.Tier {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerControlPolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicerControlPolicyName")
	}

	return map[string]interface{}{
		"policer-control-policy-name": *t.PolicerControlPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root represents the /nokia-conf/configure/groups/group/qos/policer-control-policy/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root struct {
	MaxPercentRate        *float64                                                                              `path:"max-percent-rate" module:"nokia-conf"`
	MaxRate               NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
	ProfilePreferred      *bool                                                                                 `path:"profile-preferred" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) IsYANGGoStruct() {}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxPercentRate retrieves the value of the leaf MaxPercentRate from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPercentRate is set, it can
// safely use t.GetMaxPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) GetMaxPercentRate() float64 {
	if t == nil || t.MaxPercentRate == nil {
		return 0.0
	}
	return *t.MaxPercentRate
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaTypesQos_MaxRate_Enum_max
	}
	return t.MaxRate
}

// GetProfilePreferred retrieves the value of the leaf ProfilePreferred from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfilePreferred is set, it can
// safely use t.GetProfilePreferred() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfilePreferred == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) GetProfilePreferred() bool {
	if t == nil || t.ProfilePreferred == nil {
		return false
	}
	return *t.ProfilePreferred
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRate == nil {
		t.MaxRate = NokiaTypesQos_MaxRate_Enum_max
	}
	if t.ProfilePreferred == nil {
		var v bool = false
		t.ProfilePreferred = &v
	}
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/qos/policer-control-policy/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                       `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Enum_auto
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinThreshSeparation == nil {
		t.MinThreshSeparation = NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Enum_auto
	}
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/qos/policer-control-policy/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority struct {
	FixedMbs        *bool                                                                                                               `path:"fixed-mbs" module:"nokia-conf"`
	MbsContribution NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetFixedMbs retrieves the value of the leaf FixedMbs from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FixedMbs is set, it can
// safely use t.GetFixedMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FixedMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetFixedMbs() bool {
	if t == nil || t.FixedMbs == nil {
		return false
	}
	return *t.FixedMbs
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Enum_auto
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FixedMbs == nil {
		var v bool = false
		t.FixedMbs = &v
	}
	if t.MbsContribution == nil {
		t.MbsContribution = NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Enum_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier represents the /nokia-conf/configure/groups/group/qos/policer-control-policy/tier YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier struct {
	Arbiter map[string]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter `path:"arbiter" module:"nokia-conf"`
	TierId  NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union        `path:"tier-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) IsYANGGoStruct() {}

// NewArbiter creates a new entry in the Arbiter list of the
// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) NewArbiter(ArbiterName string) (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Arbiter == nil {
		t.Arbiter = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter)
	}

	key := ArbiterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Arbiter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Arbiter", key)
	}

	t.Arbiter[key] = &NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter{
		ArbiterName: &ArbiterName,
	}

	return t.Arbiter[key], nil
}

// RenameArbiter renames an entry in the list Arbiter within
// the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) RenameArbiter(oldK, newK string) error {
	if _, ok := t.Arbiter[newK]; ok {
		return fmt.Errorf("key %v already exists in Arbiter", newK)
	}

	e, ok := t.Arbiter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Arbiter", oldK)
	}
	e.ArbiterName = &newK

	t.Arbiter[newK] = e
	delete(t.Arbiter, oldK)
	return nil
}

// GetOrCreateArbiter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) GetOrCreateArbiter(ArbiterName string) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter {

	key := ArbiterName

	if v, ok := t.Arbiter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArbiter(ArbiterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArbiter got unexpected error: %v", err))
	}
	return v
}

// GetArbiter retrieves the value with the specified key from
// the Arbiter map field of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) GetArbiter(ArbiterName string) *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter {

	if t == nil {
		return nil
	}

	key := ArbiterName

	if lm, ok := t.Arbiter[key]; ok {
		return lm
	}
	return nil
}

// DeleteArbiter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) DeleteArbiter(ArbiterName string) {
	key := ArbiterName

	delete(t.Arbiter, key)
}

// AppendArbiter appends the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter struct to the
// list Arbiter of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) AppendArbiter(v *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) error {
	if v.ArbiterName == nil {
		return fmt.Errorf("invalid nil key received for ArbiterName")
	}

	key := *v.ArbiterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Arbiter == nil {
		t.Arbiter = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter)
	}

	if _, ok := t.Arbiter[key]; ok {
		return fmt.Errorf("duplicate key for list Arbiter %v", key)
	}

	t.Arbiter[key] = v
	return nil
}

// GetTierId retrieves the value of the leaf TierId from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TierId is set, it can
// safely use t.GetTierId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TierId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) GetTierId() NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_TierId_Union {
	if t == nil || t.TierId == nil {
		return nil
	}
	return t.TierId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Arbiter {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tier-id": t.TierId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter represents the /nokia-conf/configure/groups/group/qos/policer-control-policy/tier/arbiter YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter struct {
	ArbiterName   *string                                                                                `path:"arbiter-name" module:"nokia-conf"`
	ArbiterParent *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent  `path:"arbiter-parent" module:"nokia-conf"`
	Description   *string                                                                                `path:"description" module:"nokia-conf"`
	PercentRate   *float64                                                                               `path:"percent-rate" module:"nokia-conf"`
	Rate          NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_Rate_Union      `path:"rate" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) IsYANGGoStruct() {}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) GetOrCreateArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent{}
	return t.ArbiterParent
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) GetArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) GetRate() NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_MaxRate_Enum_max
	}
	return t.Rate
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_MaxRate_Enum_max
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate_local_limit
	}
	t.ArbiterParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ArbiterName == nil {
		return nil, fmt.Errorf("nil value for key ArbiterName")
	}

	return map[string]interface{}{
		"arbiter-name": *t.ArbiterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent represents the /nokia-conf/configure/groups/group/qos/policer-control-policy/tier/arbiter/arbiter-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent.
func (*NokiaConf_Configure_Groups_Group_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy represents the /nokia-conf/configure/groups/group/qos/port-qos-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct {
	Description       *string                                                                                                                                             `path:"description" module:"nokia-conf"`
	Fc                map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc                       `path:"fc" module:"nokia-conf"`
	PacketByteOffset  *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset                                                                                `path:"packet-byte-offset" module:"nokia-conf"`
	PortQosPolicyName *string                                                                                                                                             `path:"port-qos-policy-name" module:"nokia-conf"`
	Queue             map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue                `path:"queue" module:"nokia-conf"`
	Scope             E_NokiaTypesQos_ItemScope                                                                                                                           `path:"scope" module:"nokia-conf"`
	WrrWeights        map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights `path:"wrr-weights" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewWrrWeights creates a new entry in the WrrWeights list of the
// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) NewWrrWeights(WrrWeightsId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union) (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrWeights == nil {
		t.WrrWeights = make(map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights)
	}

	key := WrrWeightsId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WrrWeights[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WrrWeights", key)
	}

	t.WrrWeights[key] = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights{
		WrrWeightsId: WrrWeightsId,
	}

	return t.WrrWeights[key], nil
}

// RenameWrrWeights renames an entry in the list WrrWeights within
// the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) RenameWrrWeights(oldK, newK NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union) error {
	if _, ok := t.WrrWeights[newK]; ok {
		return fmt.Errorf("key %v already exists in WrrWeights", newK)
	}

	e, ok := t.WrrWeights[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WrrWeights", oldK)
	}
	e.WrrWeightsId = newK

	t.WrrWeights[newK] = e
	delete(t.WrrWeights, oldK)
	return nil
}

// GetOrCreateWrrWeights retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetOrCreateWrrWeights(WrrWeightsId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights {

	key := WrrWeightsId

	if v, ok := t.WrrWeights[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWrrWeights(WrrWeightsId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWrrWeights got unexpected error: %v", err))
	}
	return v
}

// GetWrrWeights retrieves the value with the specified key from
// the WrrWeights map field of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetWrrWeights(WrrWeightsId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union) *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights {

	if t == nil {
		return nil
	}

	key := WrrWeightsId

	if lm, ok := t.WrrWeights[key]; ok {
		return lm
	}
	return nil
}

// DeleteWrrWeights deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) DeleteWrrWeights(WrrWeightsId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union) {
	key := WrrWeightsId

	delete(t.WrrWeights, key)
}

// AppendWrrWeights appends the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights struct to the
// list WrrWeights of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) AppendWrrWeights(v *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) error {
	key := v.WrrWeightsId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrWeights == nil {
		t.WrrWeights = make(map[NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights)
	}

	if _, ok := t.WrrWeights[key]; ok {
		return fmt.Errorf("duplicate key for list WrrWeights %v", key)
	}

	t.WrrWeights[key] = v
	return nil
}

// GetOrCreatePacketByteOffset retrieves the value of the PacketByteOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetOrCreatePacketByteOffset() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset {
	if t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	t.PacketByteOffset = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset{}
	return t.PacketByteOffset
}

// GetPacketByteOffset returns the value of the PacketByteOffset struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy. If the receiver or the field PacketByteOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetPacketByteOffset() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset {
	if t != nil && t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortQosPolicyName retrieves the value of the leaf PortQosPolicyName from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortQosPolicyName is set, it can
// safely use t.GetPortQosPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortQosPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetPortQosPolicyName() string {
	if t == nil || t.PortQosPolicyName == nil {
		return ""
	}
	return *t.PortQosPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.PacketByteOffset.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.WrrWeights {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortQosPolicyName == nil {
		return nil, fmt.Errorf("nil value for key PortQosPolicyName")
	}

	return map[string]interface{}{
		"port-qos-policy-name": *t.PortQosPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc struct {
	FcName NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	Queue  *int32                                                             `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/packet-byte-offset YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset struct {
	Add      *int32 `path:"add" module:"nokia-conf"`
	Subtract *int32 `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) GetAdd() int32 {
	if t == nil || t.Add == nil {
		return 0
	}
	return *t.Add
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) GetSubtract() int32 {
	if t == nil || t.Subtract == nil {
		return 0
	}
	return *t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_PacketByteOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	QueueId        NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union   `path:"queue-id" module:"nokia-conf"`
	QueueMgmt      *string                                                                  `path:"queue-mgmt" module:"nokia-conf"`
	SchedulerMode  *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode  `path:"scheduler-mode" module:"nokia-conf"`
	WrrWeights     *uint32                                                                  `path:"wrr-weights" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateSchedulerMode retrieves the value of the SchedulerMode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) GetOrCreateSchedulerMode() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode {
	if t.SchedulerMode != nil {
		return t.SchedulerMode
	}
	t.SchedulerMode = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode{}
	return t.SchedulerMode
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetSchedulerMode returns the value of the SchedulerMode struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue. If the receiver or the field SchedulerMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) GetSchedulerMode() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode {
	if t != nil && t.SchedulerMode != nil {
		return t.SchedulerMode
	}
	return nil
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueMgmt retrieves the value of the leaf QueueMgmt from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMgmt is set, it can
// safely use t.GetQueueMgmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMgmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) GetQueueMgmt() string {
	if t == nil || t.QueueMgmt == nil {
		return ""
	}
	return *t.QueueMgmt
}

// GetWrrWeights retrieves the value of the leaf WrrWeights from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeights is set, it can
// safely use t.GetWrrWeights() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeights == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) GetWrrWeights() uint32 {
	if t == nil || t.WrrWeights == nil {
		return 0
	}
	return *t.WrrWeights
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdaptationRule.PopulateDefaults()
	t.SchedulerMode.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/queue/scheduler-mode YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode struct {
	Wfq *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq `path:"wfq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) IsYANGGoStruct() {}

// GetOrCreateWfq retrieves the value of the Wfq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) GetOrCreateWfq() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq {
	if t.Wfq != nil {
		return t.Wfq
	}
	t.Wfq = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq{}
	return t.Wfq
}

// GetWfq returns the value of the Wfq struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode. If the receiver or the field Wfq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) GetWfq() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq {
	if t != nil && t.Wfq != nil {
		return t.Wfq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Wfq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/queue/scheduler-mode/wfq YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq struct {
	PercentRate *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight   *uint32                                                                                 `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/queue/scheduler-mode/wfq/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights represents the /nokia-conf/configure/groups/group/qos/port-qos-policy/wrr-weights YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights struct {
	McWeight     *uint32                                                                          `path:"mc-weight" module:"nokia-conf"`
	UcWeight     *uint32                                                                          `path:"uc-weight" module:"nokia-conf"`
	WrrWeightsId NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union `path:"wrr-weights-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) IsYANGGoStruct() {}

// GetMcWeight retrieves the value of the leaf McWeight from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McWeight is set, it can
// safely use t.GetMcWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) GetMcWeight() uint32 {
	if t == nil || t.McWeight == nil {
		return 1
	}
	return *t.McWeight
}

// GetUcWeight retrieves the value of the leaf UcWeight from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UcWeight is set, it can
// safely use t.GetUcWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UcWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) GetUcWeight() uint32 {
	if t == nil || t.UcWeight == nil {
		return 1
	}
	return *t.UcWeight
}

// GetWrrWeightsId retrieves the value of the leaf WrrWeightsId from the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeightsId is set, it can
// safely use t.GetWrrWeightsId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeightsId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) GetWrrWeightsId() NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights_WrrWeightsId_Union {
	if t == nil || t.WrrWeightsId == nil {
		return nil
	}
	return t.WrrWeightsId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.McWeight == nil {
		var v uint32 = 1
		t.McWeight = &v
	}
	if t.UcWeight == nil {
		var v uint32 = 1
		t.UcWeight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"wrr-weights-id": t.WrrWeightsId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights.
func (*NokiaConf_Configure_Groups_Group_Qos_PortQosPolicy_WrrWeights) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy struct {
	Description       *string                                                                                                                                          `path:"description" module:"nokia-conf"`
	DistLagRateShared *bool                                                                                                                                            `path:"dist-lag-rate-shared" module:"nokia-conf"`
	Group             map[string]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group                                                                       `path:"group" module:"nokia-conf"`
	HqosAlgorithm     E_NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_HqosAlgorithm                                                                         `path:"hqos-algorithm" module:"nokia-conf"`
	Level             map[NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level `path:"level" module:"nokia-conf"`
	MaxPercentRate    *float64                                                                                                                                         `path:"max-percent-rate" module:"nokia-conf"`
	MaxRate           NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_MaxRate_Union                                                                           `path:"max-rate" module:"nokia-conf"`
	MonitorThreshold  *uint32                                                                                                                                          `path:"monitor-threshold" module:"nokia-conf"`
	Name              *string                                                                                                                                          `path:"name" module:"nokia-conf"`
	OrphanOverrides   *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides                                                                        `path:"orphan-overrides" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) NewGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) NewLevel(LevelId NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union) (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level{
		LevelId: LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetOrCreateLevel(LevelId NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetLevel(LevelId NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) DeleteLevel(LevelId NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) AppendLevel(v *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) error {
	key := v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateOrphanOverrides retrieves the value of the OrphanOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetOrCreateOrphanOverrides() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides {
	if t.OrphanOverrides != nil {
		return t.OrphanOverrides
	}
	t.OrphanOverrides = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides{}
	return t.OrphanOverrides
}

// GetOrphanOverrides returns the value of the OrphanOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy. If the receiver or the field OrphanOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetOrphanOverrides() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides {
	if t != nil && t.OrphanOverrides != nil {
		return t.OrphanOverrides
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistLagRateShared retrieves the value of the leaf DistLagRateShared from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistLagRateShared is set, it can
// safely use t.GetDistLagRateShared() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistLagRateShared == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetDistLagRateShared() bool {
	if t == nil || t.DistLagRateShared == nil {
		return false
	}
	return *t.DistLagRateShared
}

// GetHqosAlgorithm retrieves the value of the leaf HqosAlgorithm from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HqosAlgorithm is set, it can
// safely use t.GetHqosAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HqosAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetHqosAlgorithm() E_NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_HqosAlgorithm {
	if t == nil || t.HqosAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_HqosAlgorithm_default
	}
	return t.HqosAlgorithm
}

// GetMaxPercentRate retrieves the value of the leaf MaxPercentRate from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPercentRate is set, it can
// safely use t.GetMaxPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetMaxPercentRate() float64 {
	if t == nil || t.MaxPercentRate == nil {
		return 0.0
	}
	return *t.MaxPercentRate
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaTypesQos_MaxRate_Enum_max
	}
	return t.MaxRate
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DistLagRateShared == nil {
		var v bool = false
		t.DistLagRateShared = &v
	}
	if t.HqosAlgorithm == 0 {
		t.HqosAlgorithm = NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_HqosAlgorithm_default
	}
	if t.MaxRate == nil {
		t.MaxRate = NokiaTypesQos_MaxRate_Enum_max
	}
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	t.OrphanOverrides.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group struct {
	GroupName        *string                                                                     `path:"group-name" module:"nokia-conf"`
	MonitorThreshold *uint32                                                                     `path:"monitor-threshold" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate `path:"percent-rate" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) GetRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy/group/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100.00
		t.Cir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy/group/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Group_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level struct {
	Group            *string                                                                      `path:"group" module:"nokia-conf"`
	LevelId          NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union `path:"level-id" module:"nokia-conf"`
	MonitorThreshold *uint32                                                                      `path:"monitor-threshold" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate  `path:"percent-rate" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate         `path:"rate" module:"nokia-conf"`
	Weight           *int32                                                                       `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetRate() *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetLevelId() NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_LevelId_Union {
	if t == nil || t.LevelId == nil {
		return nil
	}
	return t.LevelId
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-id": t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy/level/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100.00
		t.Cir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy/level/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides represents the /nokia-conf/configure/groups/group/qos/port-scheduler-policy/orphan-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 0
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides.
func (*NokiaConf_Configure_Groups_Group_Qos_PortSchedulerPolicy_OrphanOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping represents the /nokia-conf/configure/groups/group/qos/post-policer-mapping YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping struct {
	Description *string                                                                                                                        `path:"description" module:"nokia-conf"`
	Fc          map[NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key]*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc `path:"fc" module:"nokia-conf"`
	Name        *string                                                                                                                        `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key represents the key for list Fc of element /nokia-conf/configure/groups/group/qos/post-policer-mapping.
type NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key struct {
	FcName  NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_FcName_Union  `path:"fc-name"`
	Profile NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Profile_Union `path:"profile"`
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_FcName_Union, Profile NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Profile_Union) (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key]*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc)
	}

	key := NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc{
		FcName:  FcName,
		Profile: Profile,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK.FcName
	e.Profile = newK.Profile

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_FcName_Union, Profile NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Profile_Union) *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc {

	key := NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName, Profile)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_FcName_Union, Profile NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Profile_Union) *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_FcName_Union, Profile NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Profile_Union) {
	key := NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) error {
	key := NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key{
		FcName:  v.FcName,
		Profile: v.Profile,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Key]*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping.
func (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc represents the /nokia-conf/configure/groups/group/qos/post-policer-mapping/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc struct {
	FcName  NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_FcName_Union  `path:"fc-name" module:"nokia-conf"`
	MapsTo  *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo       `path:"maps-to" module:"nokia-conf"`
	Profile NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Profile_Union `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) IsYANGGoStruct() {}

// GetOrCreateMapsTo retrieves the value of the MapsTo field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) GetOrCreateMapsTo() *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo {
	if t.MapsTo != nil {
		return t.MapsTo
	}
	t.MapsTo = &NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo{}
	return t.MapsTo
}

// GetMapsTo returns the value of the MapsTo struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc. If the receiver or the field MapsTo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) GetMapsTo() *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo {
	if t != nil && t.MapsTo != nil {
		return t.MapsTo
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) GetProfile() NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_Profile_Union {
	if t == nil || t.Profile == nil {
		return nil
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MapsTo.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
		"profile": t.Profile,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo represents the /nokia-conf/configure/groups/group/qos/post-policer-mapping/fc/maps-to YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo struct {
	Fc      E_NokiaTypesSros_FcName       `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_EgressProfile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo.
func (*NokiaConf_Configure_Groups_Group_Qos_PostPolicerMapping_Fc_MapsTo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList represents the /nokia-conf/configure/groups/group/qos/queue-group-redirect-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList struct {
	Match map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match `path:"match" module:"nokia-conf"`
	Name  *string                                                                                                                                                   `path:"name" module:"nokia-conf"`
	Type  E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Type                                                                                        `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) IsYANGGoStruct() {}

// NewMatch creates a new entry in the Match list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) NewMatch(FieldValue NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match)
	}

	key := FieldValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Match[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Match", key)
	}

	t.Match[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match{
		FieldValue: FieldValue,
	}

	return t.Match[key], nil
}

// RenameMatch renames an entry in the list Match within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) RenameMatch(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union) error {
	if _, ok := t.Match[newK]; ok {
		return fmt.Errorf("key %v already exists in Match", newK)
	}

	e, ok := t.Match[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Match", oldK)
	}
	e.FieldValue = newK

	t.Match[newK] = e
	delete(t.Match, oldK)
	return nil
}

// GetOrCreateMatch retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) GetOrCreateMatch(FieldValue NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match {

	key := FieldValue

	if v, ok := t.Match[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMatch(FieldValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMatch got unexpected error: %v", err))
	}
	return v
}

// GetMatch retrieves the value with the specified key from
// the Match map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) GetMatch(FieldValue NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match {

	if t == nil {
		return nil
	}

	key := FieldValue

	if lm, ok := t.Match[key]; ok {
		return lm
	}
	return nil
}

// DeleteMatch deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) DeleteMatch(FieldValue NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union) {
	key := FieldValue

	delete(t.Match, key)
}

// AppendMatch appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match struct to the
// list Match of NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) AppendMatch(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) error {
	key := v.FieldValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match)
	}

	if _, ok := t.Match[key]; ok {
		return fmt.Errorf("duplicate key for list Match %v", key)
	}

	t.Match[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) GetType() E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Type_vxlan_vni
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Type_vxlan_vni
	}
	for _, e := range t.Match {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match represents the /nokia-conf/configure/groups/group/qos/queue-group-redirect-list/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match struct {
	FieldValue NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union `path:"field-value" module:"nokia-conf"`
	Instance   *uint32                                                                            `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) IsYANGGoStruct() {}

// GetFieldValue retrieves the value of the leaf FieldValue from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldValue is set, it can
// safely use t.GetFieldValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) GetFieldValue() NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match_FieldValue_Union {
	if t == nil || t.FieldValue == nil {
		return nil
	}
	return t.FieldValue
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"field-value": t.FieldValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupRedirectList_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates represents the /nokia-conf/configure/groups/group/qos/queue-group-templates YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates struct {
	Egress  *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress  `path:"egress" module:"nokia-conf" yangPresence:"true"`
	Ingress *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress `path:"ingress" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) GetEgress() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) GetIngress() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress struct {
	QueueGroup map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) IsYANGGoStruct() {}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) NewQueueGroup(EgressQueueGroupName string) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup)
	}

	key := EgressQueueGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup{
		EgressQueueGroupName: &EgressQueueGroupName,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) RenameQueueGroup(oldK, newK string) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.EgressQueueGroupName = &newK

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) GetOrCreateQueueGroup(EgressQueueGroupName string) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup {

	key := EgressQueueGroupName

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(EgressQueueGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) GetQueueGroup(EgressQueueGroupName string) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup {

	if t == nil {
		return nil
	}

	key := EgressQueueGroupName

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) DeleteQueueGroup(EgressQueueGroupName string) {
	key := EgressQueueGroupName

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) AppendQueueGroup(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) error {
	if v.EgressQueueGroupName == nil {
		return fmt.Errorf("invalid nil key received for EgressQueueGroupName")
	}

	key := *v.EgressQueueGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct {
	Description          *string                                                                                                                                                                                        `path:"description" module:"nokia-conf"`
	EgressQueueGroupName *string                                                                                                                                                                                        `path:"egress-queue-group-name" module:"nokia-conf"`
	Fc                   map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc                  `path:"fc" module:"nokia-conf"`
	HsAttachmentPolicy   *string                                                                                                                                                                                        `path:"hs-attachment-policy" module:"nokia-conf"`
	HsWrrGroup           map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues          *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues                                                                                                        `path:"hsmda-queues" module:"nokia-conf"`
	Policer              map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer     `path:"policer" module:"nokia-conf"`
	Queue                map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue           `path:"queue" module:"nokia-conf"`
	QueuesHqosManageable *bool                                                                                                                                                                                          `path:"queues-hqos-manageable" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) NewHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup{
		GroupId: GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) RenameHsWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) DeleteHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendHsWrrGroup(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetHsmdaQueues() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressQueueGroupName retrieves the value of the leaf EgressQueueGroupName from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressQueueGroupName is set, it can
// safely use t.GetEgressQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressQueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetEgressQueueGroupName() string {
	if t == nil || t.EgressQueueGroupName == nil {
		return ""
	}
	return *t.EgressQueueGroupName
}

// GetHsAttachmentPolicy retrieves the value of the leaf HsAttachmentPolicy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAttachmentPolicy is set, it can
// safely use t.GetHsAttachmentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAttachmentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetHsAttachmentPolicy() string {
	if t == nil || t.HsAttachmentPolicy == nil {
		return ""
	}
	return *t.HsAttachmentPolicy
}

// GetQueuesHqosManageable retrieves the value of the leaf QueuesHqosManageable from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuesHqosManageable is set, it can
// safely use t.GetQueuesHqosManageable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuesHqosManageable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) GetQueuesHqosManageable() bool {
	if t == nil || t.QueuesHqosManageable == nil {
		return true
	}
	return *t.QueuesHqosManageable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QueuesHqosManageable == nil {
		var v bool = true
		t.QueuesHqosManageable = &v
	}
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EgressQueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key EgressQueueGroupName")
	}

	return map[string]interface{}{
		"egress-queue-group-name": *t.EgressQueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc struct {
	FcName NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	Queue  *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) IsYANGGoStruct() {
}

// GetOrCreateQueue retrieves the value of the Queue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetOrCreateQueue() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue {
	if t.Queue != nil {
		return t.Queue
	}
	t.Queue = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue{}
	return t.Queue
}

// GetQueue returns the value of the Queue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc. If the receiver or the field Queue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetQueue() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue {
	if t != nil && t.Queue != nil {
		return t.Queue
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Queue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/fc/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue struct {
	None    YANGEmpty `path:"none" module:"nokia-conf"`
	QueueId *int32    `path:"queue-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) IsYANGGoStruct() {
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	GroupId        NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union   `path:"group-id" module:"nokia-conf"`
	HsClassWeight  *uint32                                                                                               `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate    *float64                                                                                              `path:"percent-rate" module:"nokia-conf"`
	Rate           NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Union      `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetGroupId() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetRate() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/hs-wrr-group/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/hsmda-queues YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues struct {
	LowBurstMaxClass *uint32                                                                                                                                                                                                      `path:"low-burst-max-class" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                                                                                                                       `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                                                                                      `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 8
	}
	return *t.LowBurstMaxClass
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 8
		t.LowBurstMaxClass = &v
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	BurstLimit     NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Mbs            NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	QueueId        NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union    `path:"queue-id" module:"nokia-conf"`
	Rate           NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Rate_Union       `path:"rate" module:"nokia-conf"`
	SlopePolicy    *string                                                                                                       `path:"slope-policy" module:"nokia-conf"`
	WrrWeight      *uint32                                                                                                       `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetWrrWeight() uint32 {
	if t == nil || t.WrrWeight == nil {
		return 1
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	if t.WrrWeight == nil {
		var v uint32 = 1
		t.WrrWeight = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/hsmda-queues/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer struct {
	AdaptationRule   *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy  *string                                                                                               `path:"adv-config-policy" module:"nokia-conf"`
	ArbiterParent    *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description      *string                                                                                               `path:"description" module:"nokia-conf"`
	ExceedPir        *bool                                                                                                 `path:"exceed-pir" module:"nokia-conf"`
	HighPrioOnly     NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union    `path:"policer-id" module:"nokia-conf"`
	ProfileCapped    *bool                                                                                                 `path:"profile-capped" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate              `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_EgressPolicerStatMode                                                                 `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExceedPir retrieves the value of the leaf ExceedPir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedPir is set, it can
// safely use t.GetExceedPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetExceedPir() bool {
	if t == nil || t.ExceedPir == nil {
		return false
	}
	return *t.ExceedPir
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetHighPrioOnly() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.ExceedPir == nil {
		var v bool = false
		t.ExceedPir = &v
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate struct {
	Cir           *float64                                                                                                       `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                                                       `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate_local_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                                                           `path:"adv-config-policy" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Union        `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail        `path:"drop-tail" module:"nokia-conf"`
	DynamicMbs         *bool                                                                                             `path:"dynamic-mbs" module:"nokia-conf"`
	HsAltPortClassPool *bool                                                                                             `path:"hs-alt-port-class-pool" module:"nokia-conf"`
	HsClassWeight      *uint32                                                                                           `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue     `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *uint32                                                                                           `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                            `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent      `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	QueueDelay         *uint32                                                                                           `path:"queue-delay" module:"nokia-conf"`
	QueueId            NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union    `path:"queue-id" module:"nokia-conf"`
	QueueType          E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueType      `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
	WredQueue          *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue       `path:"wred-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreatePortParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetOrCreateWredQueue retrieves the value of the WredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateWredQueue() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue {
	if t.WredQueue != nil {
		return t.WredQueue
	}
	t.WredQueue = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue{}
	return t.WredQueue
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetPortParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetWredQueue returns the value of the WredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field WredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetWredQueue() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue {
	if t != nil && t.WredQueue != nil {
		return t.WredQueue
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetDynamicMbs retrieves the value of the leaf DynamicMbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicMbs is set, it can
// safely use t.GetDynamicMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetDynamicMbs() bool {
	if t == nil || t.DynamicMbs == nil {
		return false
	}
	return *t.DynamicMbs
}

// GetHsAltPortClassPool retrieves the value of the leaf HsAltPortClassPool from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAltPortClassPool is set, it can
// safely use t.GetHsAltPortClassPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAltPortClassPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsAltPortClassPool() bool {
	if t == nil || t.HsAltPortClassPool == nil {
		return false
	}
	return *t.HsAltPortClassPool
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsWrrWeight() uint32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueDelay retrieves the value of the leaf QueueDelay from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueDelay is set, it can
// safely use t.GetQueueDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetQueueDelay() uint32 {
	if t == nil || t.QueueDelay == nil {
		return 0
	}
	return *t.QueueDelay
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetQueueType() E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueType_best_effort
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Enum_auto
	}
	if t.DynamicMbs == nil {
		var v bool = false
		t.DynamicMbs = &v
	}
	if t.HsAltPortClassPool == nil {
		var v bool = false
		t.HsAltPortClassPool = &v
	}
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.HsWrrWeight == nil {
		var v uint32 = 1
		t.HsWrrWeight = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueType_best_effort
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
	t.WredQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail struct {
	Exceed   *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed   `path:"exceed" module:"nokia-conf"`
	High     *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High     `path:"high" module:"nokia-conf"`
	Highplus *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus `path:"highplus" module:"nokia-conf"`
	Low      *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low      `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateExceed retrieves the value of the Exceed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateExceed() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed {
	if t.Exceed != nil {
		return t.Exceed
	}
	t.Exceed = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed{}
	return t.Exceed
}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateHigh() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High{}
	return t.High
}

// GetOrCreateHighplus retrieves the value of the Highplus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateHighplus() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus {
	if t.Highplus != nil {
		return t.Highplus
	}
	t.Highplus = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus{}
	return t.Highplus
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low{}
	return t.Low
}

// GetExceed returns the value of the Exceed struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field Exceed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetExceed() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed {
	if t != nil && t.Exceed != nil {
		return t.Exceed
	}
	return nil
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetHigh() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// GetHighplus returns the value of the Highplus struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field Highplus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetHighplus() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus {
	if t != nil && t.Highplus != nil {
		return t.Highplus
	}
	return nil
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exceed.PopulateDefaults()
	t.High.PopulateDefaults()
	t.Highplus.PopulateDefaults()
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/drop-tail/exceed YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/drop-tail/high YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/drop-tail/highplus YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate struct {
	Cir           *float64                                                                                                     `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                                                     `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/port-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/egress/queue-group/queue/wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue struct {
	Mode   E_NokiaTypesQos_WredQueueMode       `path:"mode" module:"nokia-conf"`
	Policy *string                             `path:"policy" module:"nokia-conf"`
	Usage  E_NokiaTypesQos_WredQueueSlopeUsage `path:"usage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) GetMode() E_NokiaTypesQos_WredQueueMode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUsage retrieves the value of the leaf Usage from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Usage is set, it can
// safely use t.GetUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Usage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) GetUsage() E_NokiaTypesQos_WredQueueSlopeUsage {
	if t == nil || t.Usage == 0 {
		return 0
	}
	return t.Usage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress struct {
	QueueGroup map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) IsYANGGoStruct() {}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) NewQueueGroup(IngressQueueGroupName string) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup)
	}

	key := IngressQueueGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup{
		IngressQueueGroupName: &IngressQueueGroupName,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) RenameQueueGroup(oldK, newK string) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.IngressQueueGroupName = &newK

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) GetOrCreateQueueGroup(IngressQueueGroupName string) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup {

	key := IngressQueueGroupName

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(IngressQueueGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) GetQueueGroup(IngressQueueGroupName string) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup {

	if t == nil {
		return nil
	}

	key := IngressQueueGroupName

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) DeleteQueueGroup(IngressQueueGroupName string) {
	key := IngressQueueGroupName

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) AppendQueueGroup(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) error {
	if v.IngressQueueGroupName == nil {
		return fmt.Errorf("invalid nil key received for IngressQueueGroupName")
	}

	key := *v.IngressQueueGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup struct {
	Description           *string                                                                                                                                                                                      `path:"description" module:"nokia-conf"`
	IngressQueueGroupName *string                                                                                                                                                                                      `path:"ingress-queue-group-name" module:"nokia-conf"`
	Policer               map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer `path:"policer" module:"nokia-conf"`
	Queue                 map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIngressQueueGroupName retrieves the value of the leaf IngressQueueGroupName from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressQueueGroupName is set, it can
// safely use t.GetIngressQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressQueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetIngressQueueGroupName() string {
	if t == nil || t.IngressQueueGroupName == nil {
		return ""
	}
	return *t.IngressQueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IngressQueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key IngressQueueGroupName")
	}

	return map[string]interface{}{
		"ingress-queue-group-name": *t.IngressQueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer struct {
	AdaptationRule   *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy  *string                                                                                                `path:"adv-config-policy" module:"nokia-conf"`
	ArbiterParent    *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description      *string                                                                                                `path:"description" module:"nokia-conf"`
	HighPrioOnly     NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                 `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union    `path:"policer-id" module:"nokia-conf"`
	ProfileCapped    *bool                                                                                                  `path:"profile-capped" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate              `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                                 `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetHighPrioOnly() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue struct {
	AdaptationRule   *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy  *string                                                                                            `path:"adv-config-policy" module:"nokia-conf"`
	BurstLimit       NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Union        `path:"cbs" module:"nokia-conf"`
	CirNonProfiling  *bool                                                                                              `path:"cir-non-profiling" module:"nokia-conf"`
	DropTail         *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail        `path:"drop-tail" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	Multipoint       *bool                                                                                              `path:"multipoint" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                             `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	QueueId          NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union    `path:"queue-id" module:"nokia-conf"`
	QueueMode        E_NokiaTypesQos_QueueMode                                                                          `path:"queue-mode" module:"nokia-conf"`
	QueueType        E_NokiaTypesQos_QueueGroupQueueType                                                                `path:"queue-type" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerParent  *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent `path:"scheduler-parent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetCirNonProfiling retrieves the value of the leaf CirNonProfiling from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirNonProfiling is set, it can
// safely use t.GetCirNonProfiling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirNonProfiling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetCirNonProfiling() bool {
	if t == nil || t.CirNonProfiling == nil {
		return false
	}
	return *t.CirNonProfiling
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueMode retrieves the value of the leaf QueueMode from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMode is set, it can
// safely use t.GetQueueMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetQueueMode() E_NokiaTypesQos_QueueMode {
	if t == nil || t.QueueMode == 0 {
		return NokiaTypesQos_QueueMode_priority
	}
	return t.QueueMode
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetQueueType() E_NokiaTypesQos_QueueGroupQueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaTypesQos_QueueGroupQueueType_best_effort
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Enum_auto
	}
	if t.CirNonProfiling == nil {
		var v bool = false
		t.CirNonProfiling = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Enum_auto
	}
	if t.Multipoint == nil {
		var v bool = false
		t.Multipoint = &v
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.QueueMode == 0 {
		t.QueueMode = NokiaTypesQos_QueueMode_priority
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaTypesQos_QueueGroupQueueType_best_effort
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Fir E_NokiaTypesQos_AdaptationRule `path:"fir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) GetFir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Fir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Fir == 0 {
		t.Fir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate struct {
	Cir           *float64                                                                                                      `path:"cir" module:"nokia-conf"`
	Fir           *float64                                                                                                      `path:"fir" module:"nokia-conf"`
	Pir           *float64                                                                                                      `path:"pir" module:"nokia-conf"`
	Police        YANGEmpty                                                                                                     `path:"police" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetFir() float64 {
	if t == nil || t.Fir == nil {
		return 0.00
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Fir == nil {
		var v float64 = 0.00
		t.Fir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate struct {
	Cir    NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Fir    NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Fir_Union `path:"fir" module:"nokia-conf"`
	Pir    NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
	Police YANGEmpty                                                                                        `path:"police" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetFir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Fir_Union {
	if t == nil || t.Fir == nil {
		return UnionInt32(0)
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRate_Enum_max
	}
	return t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Fir == nil {
		t.Fir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent represents the /nokia-conf/configure/groups/group/qos/queue-group-templates/ingress/queue-group/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy represents the /nokia-conf/configure/groups/group/qos/queue-mgmt-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy struct {
	Description         *string                                                             `path:"description" module:"nokia-conf"`
	ExceedSlope         *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope   `path:"exceed-slope" module:"nokia-conf"`
	HighSlope           *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope     `path:"high-slope" module:"nokia-conf"`
	HighplusSlope       *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope `path:"highplus-slope" module:"nokia-conf"`
	LowSlope            *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope      `path:"low-slope" module:"nokia-conf"`
	Mbs                 NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_Mbs_Union      `path:"mbs" module:"nokia-conf"`
	PortSpeed           *uint32                                                             `path:"port-speed" module:"nokia-conf"`
	QueueMgmtPolicyName *string                                                             `path:"queue-mgmt-policy-name" module:"nokia-conf"`
	Scope               E_NokiaTypesQos_ItemScope                                           `path:"scope" module:"nokia-conf"`
	TimeAverageFactor   *uint32                                                             `path:"time-average-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) IsYANGGoStruct() {}

// GetOrCreateExceedSlope retrieves the value of the ExceedSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetOrCreateExceedSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope {
	if t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	t.ExceedSlope = &NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope{}
	return t.ExceedSlope
}

// GetOrCreateHighSlope retrieves the value of the HighSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetOrCreateHighSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope {
	if t.HighSlope != nil {
		return t.HighSlope
	}
	t.HighSlope = &NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope{}
	return t.HighSlope
}

// GetOrCreateHighplusSlope retrieves the value of the HighplusSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetOrCreateHighplusSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope {
	if t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	t.HighplusSlope = &NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope{}
	return t.HighplusSlope
}

// GetOrCreateLowSlope retrieves the value of the LowSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetOrCreateLowSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope {
	if t.LowSlope != nil {
		return t.LowSlope
	}
	t.LowSlope = &NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope{}
	return t.LowSlope
}

// GetExceedSlope returns the value of the ExceedSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy. If the receiver or the field ExceedSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetExceedSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope {
	if t != nil && t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	return nil
}

// GetHighSlope returns the value of the HighSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy. If the receiver or the field HighSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetHighSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope {
	if t != nil && t.HighSlope != nil {
		return t.HighSlope
	}
	return nil
}

// GetHighplusSlope returns the value of the HighplusSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy. If the receiver or the field HighplusSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetHighplusSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope {
	if t != nil && t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	return nil
}

// GetLowSlope returns the value of the LowSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy. If the receiver or the field LowSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetLowSlope() *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope {
	if t != nil && t.LowSlope != nil {
		return t.LowSlope
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetMbs() NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return UnionInt32(6250)
	}
	return t.Mbs
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSpeed is set, it can
// safely use t.GetPortSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSpeed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetPortSpeed() uint32 {
	if t == nil || t.PortSpeed == nil {
		return 100
	}
	return *t.PortSpeed
}

// GetQueueMgmtPolicyName retrieves the value of the leaf QueueMgmtPolicyName from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMgmtPolicyName is set, it can
// safely use t.GetQueueMgmtPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMgmtPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetQueueMgmtPolicyName() string {
	if t == nil || t.QueueMgmtPolicyName == nil {
		return ""
	}
	return *t.QueueMgmtPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// GetTimeAverageFactor retrieves the value of the leaf TimeAverageFactor from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeAverageFactor is set, it can
// safely use t.GetTimeAverageFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeAverageFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) GetTimeAverageFactor() uint32 {
	if t == nil || t.TimeAverageFactor == nil {
		return 7
	}
	return *t.TimeAverageFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mbs == nil {
		t.Mbs = UnionInt32(6250)
	}
	if t.PortSpeed == nil {
		var v uint32 = 100
		t.PortSpeed = &v
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	if t.TimeAverageFactor == nil {
		var v uint32 = 7
		t.TimeAverageFactor = &v
	}
	t.ExceedSlope.PopulateDefaults()
	t.HighSlope.PopulateDefaults()
	t.HighplusSlope.PopulateDefaults()
	t.LowSlope.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueMgmtPolicyName == nil {
		return nil, fmt.Errorf("nil value for key QueueMgmtPolicyName")
	}

	return map[string]interface{}{
		"queue-mgmt-policy-name": *t.QueueMgmtPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope represents the /nokia-conf/configure/groups/group/qos/queue-mgmt-policy/exceed-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 55
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 30
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 55
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 30
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_ExceedSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope represents the /nokia-conf/configure/groups/group/qos/queue-mgmt-policy/high-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 90
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 70
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 90
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 70
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope represents the /nokia-conf/configure/groups/group/qos/queue-mgmt-policy/highplus-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 100
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 85
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 100
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 85
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_HighplusSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope represents the /nokia-conf/configure/groups/group/qos/queue-mgmt-policy/low-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 75
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 50
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 75
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 50
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_QueueMgmtPolicy_LowSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress represents the /nokia-conf/configure/groups/group/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress struct {
	Description            *string                                                                                                                                `path:"description" module:"nokia-conf"`
	Dot1P                  map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P        `path:"dot1p" module:"nokia-conf"`
	Dscp                   map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp            `path:"dscp" module:"nokia-conf"`
	EthernetCtag           *bool                                                                                                                                  `path:"ethernet-ctag" module:"nokia-conf"`
	Fc                     map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc                  `path:"fc" module:"nokia-conf"`
	HsAttachmentPolicy     *string                                                                                                                                `path:"hs-attachment-policy" module:"nokia-conf"`
	HsWrrGroup             map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues            *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues                                                                            `path:"hsmda-queues" module:"nokia-conf"`
	IpCriteria             *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria                                                                             `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria           *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria                                                                           `path:"ipv6-criteria" module:"nokia-conf"`
	ParentLocation         E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_ParentLocation                                                                        `path:"parent-location" module:"nokia-conf"`
	Policer                map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer     `path:"policer" module:"nokia-conf"`
	PolicersHqosManageable *bool                                                                                                                                  `path:"policers-hqos-manageable" module:"nokia-conf"`
	PolicyId               *uint32                                                                                                                                `path:"policy-id" module:"nokia-conf"`
	PostPolicerMapping     *string                                                                                                                                `path:"post-policer-mapping" module:"nokia-conf"`
	Prec                   map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec           `path:"prec" module:"nokia-conf"`
	Queue                  map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue           `path:"queue" module:"nokia-conf"`
	SapEgressPolicyName    *string                                                                                                                                `path:"sap-egress-policy-name" module:"nokia-conf"`
	SchedClassElevation    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation                                                                    `path:"sched-class-elevation" module:"nokia-conf"`
	Scope                  E_NokiaTypesQos_ItemScope                                                                                                              `path:"scope" module:"nokia-conf"`
	SubscriberMgmt         *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt                                                                         `path:"subscriber-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) NewDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P{
		Dot1PValue: Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) RenameDot1P(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) DeleteDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) AppendDot1P(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) error {
	key := v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) NewDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) RenameDscp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) DeleteDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) AppendDscp(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) NewHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup{
		GroupId: GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) RenameHsWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) DeleteHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) AppendHsWrrGroup(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewPrec creates a new entry in the Prec list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) NewPrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec)
	}

	key := PrecValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prec", key)
	}

	t.Prec[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec{
		PrecValue: PrecValue,
	}

	return t.Prec[key], nil
}

// RenamePrec renames an entry in the list Prec within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) RenamePrec(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union) error {
	if _, ok := t.Prec[newK]; ok {
		return fmt.Errorf("key %v already exists in Prec", newK)
	}

	e, ok := t.Prec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prec", oldK)
	}
	e.PrecValue = newK

	t.Prec[newK] = e
	delete(t.Prec, oldK)
	return nil
}

// GetOrCreatePrec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreatePrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec {

	key := PrecValue

	if v, ok := t.Prec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrec(PrecValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrec got unexpected error: %v", err))
	}
	return v
}

// GetPrec retrieves the value with the specified key from
// the Prec map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetPrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec {

	if t == nil {
		return nil
	}

	key := PrecValue

	if lm, ok := t.Prec[key]; ok {
		return lm
	}
	return nil
}

// DeletePrec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) DeletePrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union) {
	key := PrecValue

	delete(t.Prec, key)
}

// AppendPrec appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec struct to the
// list Prec of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) AppendPrec(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) error {
	key := v.PrecValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec)
	}

	if _, ok := t.Prec[key]; ok {
		return fmt.Errorf("duplicate key for list Prec %v", key)
	}

	t.Prec[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetOrCreateSchedClassElevation retrieves the value of the SchedClassElevation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateSchedClassElevation() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation {
	if t.SchedClassElevation != nil {
		return t.SchedClassElevation
	}
	t.SchedClassElevation = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation{}
	return t.SchedClassElevation
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetHsmdaQueues() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetSchedClassElevation returns the value of the SchedClassElevation struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver or the field SchedClassElevation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetSchedClassElevation() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation {
	if t != nil && t.SchedClassElevation != nil {
		return t.SchedClassElevation
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEthernetCtag retrieves the value of the leaf EthernetCtag from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetCtag is set, it can
// safely use t.GetEthernetCtag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetCtag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetEthernetCtag() bool {
	if t == nil || t.EthernetCtag == nil {
		return false
	}
	return *t.EthernetCtag
}

// GetHsAttachmentPolicy retrieves the value of the leaf HsAttachmentPolicy from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAttachmentPolicy is set, it can
// safely use t.GetHsAttachmentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAttachmentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetHsAttachmentPolicy() string {
	if t == nil || t.HsAttachmentPolicy == nil {
		return ""
	}
	return *t.HsAttachmentPolicy
}

// GetParentLocation retrieves the value of the leaf ParentLocation from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParentLocation is set, it can
// safely use t.GetParentLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParentLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetParentLocation() E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_ParentLocation {
	if t == nil || t.ParentLocation == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_ParentLocation_auto
	}
	return t.ParentLocation
}

// GetPolicersHqosManageable retrieves the value of the leaf PolicersHqosManageable from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicersHqosManageable is set, it can
// safely use t.GetPolicersHqosManageable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicersHqosManageable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetPolicersHqosManageable() bool {
	if t == nil || t.PolicersHqosManageable == nil {
		return false
	}
	return *t.PolicersHqosManageable
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// GetPostPolicerMapping retrieves the value of the leaf PostPolicerMapping from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicerMapping is set, it can
// safely use t.GetPostPolicerMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicerMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetPostPolicerMapping() string {
	if t == nil || t.PostPolicerMapping == nil {
		return ""
	}
	return *t.PostPolicerMapping
}

// GetSapEgressPolicyName retrieves the value of the leaf SapEgressPolicyName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapEgressPolicyName is set, it can
// safely use t.GetSapEgressPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapEgressPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetSapEgressPolicyName() string {
	if t == nil || t.SapEgressPolicyName == nil {
		return ""
	}
	return *t.SapEgressPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EthernetCtag == nil {
		var v bool = false
		t.EthernetCtag = &v
	}
	if t.ParentLocation == 0 {
		t.ParentLocation = NokiaConf_Configure_Groups_Group_Qos_SapEgress_ParentLocation_auto
	}
	if t.PolicersHqosManageable == nil {
		var v bool = false
		t.PolicersHqosManageable = &v
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.HsmdaQueues.PopulateDefaults()
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	t.SchedClassElevation.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Prec {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapEgressPolicyName == nil {
		return nil, fmt.Errorf("nil value for key SapEgressPolicyName")
	}

	return map[string]interface{}{
		"sap-egress-policy-name": *t.SapEgressPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P represents the /nokia-conf/configure/groups/group/qos/sap-egress/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P struct {
	Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union `path:"dot1p-value" module:"nokia-conf"`
	Fc         E_NokiaTypesSros_FcName                                               `path:"fc" module:"nokia-conf"`
	Profile    E_NokiaTypesQos_EgressProfileDe                                       `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) IsYANGGoStruct() {}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) GetDot1PValue() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P_Dot1PValue_Union {
	if t == nil || t.Dot1PValue == nil {
		return nil
	}
	return t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) GetProfile() E_NokiaTypesQos_EgressProfileDe {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-value": t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp represents the /nokia-conf/configure/groups/group/qos/sap-egress/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp struct {
	DscpName             NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union `path:"dscp-name" module:"nokia-conf"`
	Fc                   E_NokiaTypesSros_FcName                                            `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride *uint32                                                            `path:"hsmda-counter-override" module:"nokia-conf"`
	Profile              E_NokiaTypesQos_EgressProfile                                      `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) IsYANGGoStruct() {}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) GetDscpName() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp_DscpName_Union {
	if t == nil || t.DscpName == nil {
		return nil
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc struct {
	DeMark                 *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark                 `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	DeMarkInner            *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner            `path:"de-mark-inner" module:"nokia-conf" yangPresence:"true"`
	DeMarkOuter            *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter            `path:"de-mark-outer" module:"nokia-conf" yangPresence:"true"`
	Dot1P                  *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P                  `path:"dot1p" module:"nokia-conf"`
	Dot1PInner             *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner             `path:"dot1p-inner" module:"nokia-conf"`
	Dot1POuter             *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter             `path:"dot1p-outer" module:"nokia-conf"`
	Dscp                   *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp                   `path:"dscp" module:"nokia-conf"`
	FcName                 NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union            `path:"fc-name" module:"nokia-conf"`
	Hsmda                  *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda                  `path:"hsmda" module:"nokia-conf"`
	Policer                *int32                                                                    `path:"policer" module:"nokia-conf"`
	PortRedirectGroupQueue *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue `path:"port-redirect-group-queue" module:"nokia-conf" yangPresence:"true"`
	Prec                   *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec                   `path:"prec" module:"nokia-conf"`
	Queue                  *int32                                                                    `path:"queue" module:"nokia-conf"`
	QueueGroupQueue        *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue        `path:"queue-group-queue" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreateDeMarkInner retrieves the value of the DeMarkInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateDeMarkInner() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner {
	if t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	t.DeMarkInner = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner{}
	return t.DeMarkInner
}

// GetOrCreateDeMarkOuter retrieves the value of the DeMarkOuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateDeMarkOuter() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter {
	if t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	t.DeMarkOuter = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter{}
	return t.DeMarkOuter
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateDot1P() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDot1PInner retrieves the value of the Dot1PInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateDot1PInner() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner {
	if t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	t.Dot1PInner = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner{}
	return t.Dot1PInner
}

// GetOrCreateDot1POuter retrieves the value of the Dot1POuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateDot1POuter() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter {
	if t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	t.Dot1POuter = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter{}
	return t.Dot1POuter
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateDscp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp{}
	return t.Dscp
}

// GetOrCreateHsmda retrieves the value of the Hsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateHsmda() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda {
	if t.Hsmda != nil {
		return t.Hsmda
	}
	t.Hsmda = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda{}
	return t.Hsmda
}

// GetOrCreatePortRedirectGroupQueue retrieves the value of the PortRedirectGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreatePortRedirectGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue {
	if t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	t.PortRedirectGroupQueue = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue{}
	return t.PortRedirectGroupQueue
}

// GetOrCreatePrec retrieves the value of the Prec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreatePrec() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec {
	if t.Prec != nil {
		return t.Prec
	}
	t.Prec = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec{}
	return t.Prec
}

// GetOrCreateQueueGroupQueue retrieves the value of the QueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetOrCreateQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue {
	if t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	t.QueueGroupQueue = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue{}
	return t.QueueGroupQueue
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetDeMark() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetDeMarkInner returns the value of the DeMarkInner struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field DeMarkInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetDeMarkInner() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner {
	if t != nil && t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	return nil
}

// GetDeMarkOuter returns the value of the DeMarkOuter struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field DeMarkOuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetDeMarkOuter() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter {
	if t != nil && t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetDot1P() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDot1PInner returns the value of the Dot1PInner struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field Dot1PInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetDot1PInner() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner {
	if t != nil && t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	return nil
}

// GetDot1POuter returns the value of the Dot1POuter struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field Dot1POuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetDot1POuter() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter {
	if t != nil && t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetDscp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetHsmda returns the value of the Hsmda struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field Hsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetHsmda() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda {
	if t != nil && t.Hsmda != nil {
		return t.Hsmda
	}
	return nil
}

// GetPortRedirectGroupQueue returns the value of the PortRedirectGroupQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field PortRedirectGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetPortRedirectGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue {
	if t != nil && t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	return nil
}

// GetPrec returns the value of the Prec struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field Prec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetPrec() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec {
	if t != nil && t.Prec != nil {
		return t.Prec
	}
	return nil
}

// GetQueueGroupQueue returns the value of the QueueGroupQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc. If the receiver or the field QueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue {
	if t != nil && t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	return nil
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.DeMarkInner.PopulateDefaults()
	t.DeMarkOuter.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.Dot1PInner.PopulateDefaults()
	t.Dot1POuter.PopulateDefaults()
	t.Dscp.PopulateDefaults()
	t.Hsmda.PopulateDefaults()
	t.PortRedirectGroupQueue.PopulateDefaults()
	t.Prec.PopulateDefaults()
	t.QueueGroupQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/de-mark YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/de-mark-inner YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/de-mark-outer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_DeMarkOuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P struct {
	ExceedProfile *int32 `path:"exceed-profile" module:"nokia-conf"`
	InProfile     *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile    *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) GetExceedProfile() int32 {
	if t == nil || t.ExceedProfile == nil {
		return 0
	}
	return *t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/dot1p-inner YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1PInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/dot1p-outer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter struct {
	ExceedProfile *int32 `path:"exceed-profile" module:"nokia-conf"`
	InProfile     *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile    *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) GetExceedProfile() int32 {
	if t == nil || t.ExceedProfile == nil {
		return 0
	}
	return *t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dot1POuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp struct {
	ExceedProfile E_NokiaTypesQos_DscpName `path:"exceed-profile" module:"nokia-conf"`
	InProfile     E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	OutProfile    E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) GetExceedProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.ExceedProfile == 0 {
		return 0
	}
	return t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/hsmda YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda struct {
	PortRedirectGroupQueue *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue `path:"port-redirect-group-queue" module:"nokia-conf" yangPresence:"true"`
	Queue                  *int32                                                                          `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroupQueue retrieves the value of the PortRedirectGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) GetOrCreatePortRedirectGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue {
	if t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	t.PortRedirectGroupQueue = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue{}
	return t.PortRedirectGroupQueue
}

// GetPortRedirectGroupQueue returns the value of the PortRedirectGroupQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda. If the receiver or the field PortRedirectGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) GetPortRedirectGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue {
	if t != nil && t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	return nil
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroupQueue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/hsmda/port-redirect-group-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue struct {
	Queue *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) IsYANGGoStruct() {
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/port-redirect-group-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue struct {
	Queue *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_PortRedirectGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/prec YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec struct {
	ExceedProfile *int32 `path:"exceed-profile" module:"nokia-conf"`
	InProfile     *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile    *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) GetExceedProfile() int32 {
	if t == nil || t.ExceedProfile == nil {
		return 0
	}
	return *t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue represents the /nokia-conf/configure/groups/group/qos/sap-egress/fc/queue-group-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue struct {
	Instance       *uint32 `path:"instance" module:"nokia-conf"`
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) IsYANGGoStruct() {}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Fc_QueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup represents the /nokia-conf/configure/groups/group/qos/sap-egress/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	GroupId        NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union   `path:"group-id" module:"nokia-conf"`
	HsClassWeight  *uint32                                                                   `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate    *float64                                                                  `path:"percent-rate" module:"nokia-conf"`
	Rate           NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_Rate_Union      `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) GetGroupId() NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) GetRate() NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_Rate_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/sap-egress/hs-wrr-group/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule) IsYANGGoStruct() {}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsWrrGroup_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues represents the /nokia-conf/configure/groups/group/qos/sap-egress/hsmda-queues YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues struct {
	LowBurstMaxClass *uint32                                                                                                                                              `path:"low-burst-max-class" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                                                               `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                              `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 8
	}
	return *t.LowBurstMaxClass
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 8
		t.LowBurstMaxClass = &v
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue represents the /nokia-conf/configure/groups/group/qos/sap-egress/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue struct {
	AdaptationRule *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	BurstLimit     NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Mbs            NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	QueueId        NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union    `path:"queue-id" module:"nokia-conf"`
	Rate           NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_Rate_Union       `path:"rate" module:"nokia-conf"`
	SlopePolicy    *string                                                                           `path:"slope-policy" module:"nokia-conf"`
	WrrWeight      *uint32                                                                           `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) GetWrrWeight() uint32 {
	if t == nil || t.WrrWeight == nil {
		return 1
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	if t.WrrWeight == nil {
		var v uint32 = 1
		t.WrrWeight = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/sap-egress/hsmda-queues/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                       `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action struct {
	Fc                     E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride   *uint32                            `path:"hsmda-counter-override" module:"nokia-conf"`
	Policer                *int32                             `path:"policer" module:"nokia-conf"`
	PortRedirectGroupQueue *bool                              `path:"port-redirect-group-queue" module:"nokia-conf"`
	Profile                E_NokiaTypesQos_EgressProfile      `path:"profile" module:"nokia-conf"`
	Queue                  *int32                             `path:"queue" module:"nokia-conf"`
	Type                   E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
	UseFcMappedQueue       *bool                              `path:"use-fc-mapped-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPortRedirectGroupQueue retrieves the value of the leaf PortRedirectGroupQueue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirectGroupQueue is set, it can
// safely use t.GetPortRedirectGroupQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirectGroupQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetPortRedirectGroupQueue() bool {
	if t == nil || t.PortRedirectGroupQueue == nil {
		return false
	}
	return *t.PortRedirectGroupQueue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// GetUseFcMappedQueue retrieves the value of the leaf UseFcMappedQueue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseFcMappedQueue is set, it can
// safely use t.GetUseFcMappedQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseFcMappedQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) GetUseFcMappedQueue() bool {
	if t == nil || t.UseFcMappedQueue == nil {
		return false
	}
	return *t.UseFcMappedQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirectGroupQueue == nil {
		var v bool = false
		t.PortRedirectGroupQueue = &v
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	if t.UseFcMappedQueue == nil {
		var v bool = false
		t.UseFcMappedQueue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                             `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                               `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                               `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                               `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                               `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                               `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                               `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-egress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                         `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action struct {
	Fc                     E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride   *uint32                            `path:"hsmda-counter-override" module:"nokia-conf"`
	Policer                *int32                             `path:"policer" module:"nokia-conf"`
	PortRedirectGroupQueue *bool                              `path:"port-redirect-group-queue" module:"nokia-conf"`
	Profile                E_NokiaTypesQos_EgressProfile      `path:"profile" module:"nokia-conf"`
	Queue                  *int32                             `path:"queue" module:"nokia-conf"`
	Type                   E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
	UseFcMappedQueue       *bool                              `path:"use-fc-mapped-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPortRedirectGroupQueue retrieves the value of the leaf PortRedirectGroupQueue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirectGroupQueue is set, it can
// safely use t.GetPortRedirectGroupQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirectGroupQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetPortRedirectGroupQueue() bool {
	if t == nil || t.PortRedirectGroupQueue == nil {
		return false
	}
	return *t.PortRedirectGroupQueue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// GetUseFcMappedQueue retrieves the value of the leaf UseFcMappedQueue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseFcMappedQueue is set, it can
// safely use t.GetUseFcMappedQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseFcMappedQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetUseFcMappedQueue() bool {
	if t == nil || t.UseFcMappedQueue == nil {
		return false
	}
	return *t.UseFcMappedQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirectGroupQueue == nil {
		var v bool = false
		t.PortRedirectGroupQueue = &v
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	if t.UseFcMappedQueue == nil {
		var v bool = false
		t.UseFcMappedQueue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                                 `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                                 `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                 `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                 `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                                 `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                 `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                 `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-egress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer represents the /nokia-conf/configure/groups/group/qos/sap-egress/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer struct {
	AdaptationRule     *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                                   `path:"adv-config-policy" module:"nokia-conf"`
	ArbiterParent      *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description        *string                                                                   `path:"description" module:"nokia-conf"`
	DscpPrecRemarking  *bool                                                                     `path:"dscp-prec-remarking" module:"nokia-conf"`
	ExceedPir          *bool                                                                     `path:"exceed-pir" module:"nokia-conf"`
	HighPrioOnly       NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId          NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union    `path:"policer-id" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent        `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	ProfileCapped      *bool                                                                     `path:"profile-capped" module:"nokia-conf"`
	ProfileOutPreserve *bool                                                                     `path:"profile-out-preserve" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate              `path:"rate" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent   `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetOrCreatePortParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetOrCreateSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetPortParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDscpPrecRemarking retrieves the value of the leaf DscpPrecRemarking from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpPrecRemarking is set, it can
// safely use t.GetDscpPrecRemarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpPrecRemarking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetDscpPrecRemarking() bool {
	if t == nil || t.DscpPrecRemarking == nil {
		return false
	}
	return *t.DscpPrecRemarking
}

// GetExceedPir retrieves the value of the leaf ExceedPir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedPir is set, it can
// safely use t.GetExceedPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetExceedPir() bool {
	if t == nil || t.ExceedPir == nil {
		return false
	}
	return *t.ExceedPir
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetHighPrioOnly() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetProfileOutPreserve retrieves the value of the leaf ProfileOutPreserve from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileOutPreserve is set, it can
// safely use t.GetProfileOutPreserve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileOutPreserve == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetProfileOutPreserve() bool {
	if t == nil || t.ProfileOutPreserve == nil {
		return false
	}
	return *t.ProfileOutPreserve
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.DscpPrecRemarking == nil {
		var v bool = false
		t.DscpPrecRemarking = &v
	}
	if t.ExceedPir == nil {
		var v bool = false
		t.ExceedPir = &v
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	if t.ProfileOutPreserve == nil {
		var v bool = false
		t.ProfileOutPreserve = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/sap-egress/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent represents the /nokia-conf/configure/groups/group/qos/sap-egress/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) IsYANGGoStruct() {}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate represents the /nokia-conf/configure/groups/group/qos/sap-egress/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate struct {
	Cir           *float64                                                                           `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                           `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate_ReferenceRate_local_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent represents the /nokia-conf/configure/groups/group/qos/sap-egress/policer/port-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate represents the /nokia-conf/configure/groups/group/qos/sap-egress/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent represents the /nokia-conf/configure/groups/group/qos/sap-egress/policer/scheduler-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Policer_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec represents the /nokia-conf/configure/groups/group/qos/sap-egress/prec YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec struct {
	Fc                   E_NokiaTypesSros_FcName                                             `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride *uint32                                                             `path:"hsmda-counter-override" module:"nokia-conf"`
	PrecValue            NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union `path:"prec-value" module:"nokia-conf"`
	Profile              E_NokiaTypesQos_EgressProfile                                       `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetPrecValue retrieves the value of the leaf PrecValue from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrecValue is set, it can
// safely use t.GetPrecValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrecValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) GetPrecValue() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec_PrecValue_Union {
	if t == nil || t.PrecValue == nil {
		return nil
	}
	return t.PrecValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prec-value": t.PrecValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule     `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                                  `path:"adv-config-policy" module:"nokia-conf"`
	AggShaperWeight    *int32                                                                   `path:"agg-shaper-weight" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                 `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_BurstLimit_Union    `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Cbs_Union           `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail           `path:"drop-tail" module:"nokia-conf"`
	FirBurstLimit      NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_FirBurstLimit_Union `path:"fir-burst-limit" module:"nokia-conf"`
	HsAltPortClassPool *bool                                                                    `path:"hs-alt-port-class-pool" module:"nokia-conf"`
	HsClassWeight      *uint32                                                                  `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue        `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *uint32                                                                  `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Mbs_Union           `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                   `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent         `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	QueueId            NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union       `path:"queue-id" module:"nokia-conf"`
	QueueType          E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueType         `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate               `path:"rate" module:"nokia-conf"`
	SchedClass         NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedClass_Union    `path:"sched-class" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent    `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
	WredQueue          *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue          `path:"wred-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreatePortParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetOrCreateWredQueue retrieves the value of the WredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetOrCreateWredQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue {
	if t.WredQueue != nil {
		return t.WredQueue
	}
	t.WredQueue = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue{}
	return t.WredQueue
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetPortParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetWredQueue returns the value of the WredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue. If the receiver or the field WredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetWredQueue() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue {
	if t != nil && t.WredQueue != nil {
		return t.WredQueue
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetAggShaperWeight retrieves the value of the leaf AggShaperWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggShaperWeight is set, it can
// safely use t.GetAggShaperWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggShaperWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetAggShaperWeight() int32 {
	if t == nil || t.AggShaperWeight == nil {
		return 1
	}
	return *t.AggShaperWeight
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.00
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetFirBurstLimit retrieves the value of the leaf FirBurstLimit from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirBurstLimit is set, it can
// safely use t.GetFirBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirBurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetFirBurstLimit() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_FirBurstLimit_Union {
	if t == nil || t.FirBurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_FirBurstLimit_Enum_auto
	}
	return t.FirBurstLimit
}

// GetHsAltPortClassPool retrieves the value of the leaf HsAltPortClassPool from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAltPortClassPool is set, it can
// safely use t.GetHsAltPortClassPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAltPortClassPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetHsAltPortClassPool() bool {
	if t == nil || t.HsAltPortClassPool == nil {
		return false
	}
	return *t.HsAltPortClassPool
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetHsWrrWeight() uint32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetQueueType() E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueType_auto_expedited
	}
	return t.QueueType
}

// GetSchedClass retrieves the value of the leaf SchedClass from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClass is set, it can
// safely use t.GetSchedClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) GetSchedClass() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedClass_Union {
	if t == nil || t.SchedClass == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedClass_Enum_auto
	}
	return t.SchedClass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AggShaperWeight == nil {
		var v int32 = 1
		t.AggShaperWeight = &v
	}
	if t.AvgFrameOverhead == nil {
		var v float64 = 0.00
		t.AvgFrameOverhead = &v
	}
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Cbs_Enum_auto
	}
	if t.FirBurstLimit == nil {
		t.FirBurstLimit = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_FirBurstLimit_Enum_auto
	}
	if t.HsAltPortClassPool == nil {
		var v bool = false
		t.HsAltPortClassPool = &v
	}
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.HsWrrWeight == nil {
		var v uint32 = 1
		t.HsWrrWeight = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Mbs_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_QueueType_auto_expedited
	}
	if t.SchedClass == nil {
		t.SchedClass = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedClass_Enum_auto
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
	t.WredQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail struct {
	Exceed   *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed   `path:"exceed" module:"nokia-conf"`
	High     *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High     `path:"high" module:"nokia-conf"`
	Highplus *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus `path:"highplus" module:"nokia-conf"`
	Low      *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low      `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateExceed retrieves the value of the Exceed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetOrCreateExceed() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed {
	if t.Exceed != nil {
		return t.Exceed
	}
	t.Exceed = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed{}
	return t.Exceed
}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetOrCreateHigh() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High{}
	return t.High
}

// GetOrCreateHighplus retrieves the value of the Highplus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetOrCreateHighplus() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus {
	if t.Highplus != nil {
		return t.Highplus
	}
	t.Highplus = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus{}
	return t.Highplus
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low{}
	return t.Low
}

// GetExceed returns the value of the Exceed struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail. If the receiver or the field Exceed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetExceed() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed {
	if t != nil && t.Exceed != nil {
		return t.Exceed
	}
	return nil
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetHigh() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// GetHighplus returns the value of the Highplus struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail. If the receiver or the field Highplus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetHighplus() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus {
	if t != nil && t.Highplus != nil {
		return t.Highplus
	}
	return nil
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exceed.PopulateDefaults()
	t.High.PopulateDefaults()
	t.Highplus.PopulateDefaults()
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/drop-tail/exceed YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Exceed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/drop-tail/high YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/drop-tail/highplus YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Highplus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate struct {
	Cir           *float64                                                                         `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                         `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/port-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue represents the /nokia-conf/configure/groups/group/qos/sap-egress/queue/wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue struct {
	Mode   E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue_Mode `path:"mode" module:"nokia-conf"`
	Policy *string                                                               `path:"policy" module:"nokia-conf"`
	Usage  E_NokiaTypesQos_WredQueueSlopeUsage                                   `path:"usage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) GetMode() E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUsage retrieves the value of the leaf Usage from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Usage is set, it can
// safely use t.GetUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Usage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) GetUsage() E_NokiaTypesQos_WredQueueSlopeUsage {
	if t == nil || t.Usage == 0 {
		return 0
	}
	return t.Usage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_Queue_WredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation represents the /nokia-conf/configure/groups/group/qos/sap-egress/sched-class-elevation YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation struct {
	SchedClass map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass `path:"sched-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) IsYANGGoStruct() {}

// NewSchedClass creates a new entry in the SchedClass list of the
// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) NewSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedClass", key)
	}

	t.SchedClass[key] = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass{
		ClassId: ClassId,
	}

	return t.SchedClass[key], nil
}

// RenameSchedClass renames an entry in the list SchedClass within
// the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) RenameSchedClass(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union) error {
	if _, ok := t.SchedClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedClass", newK)
	}

	e, ok := t.SchedClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedClass", oldK)
	}
	e.ClassId = newK

	t.SchedClass[newK] = e
	delete(t.SchedClass, oldK)
	return nil
}

// GetOrCreateSchedClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) GetOrCreateSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass {

	key := ClassId

	if v, ok := t.SchedClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedClass retrieves the value with the specified key from
// the SchedClass map field of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) GetSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) DeleteSchedClass(ClassId NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union) {
	key := ClassId

	delete(t.SchedClass, key)
}

// AppendSchedClass appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass struct to the
// list SchedClass of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) AppendSchedClass(v *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) error {
	key := v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass)
	}

	if _, ok := t.SchedClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedClass %v", key)
	}

	t.SchedClass[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SchedClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass represents the /nokia-conf/configure/groups/group/qos/sap-egress/sched-class-elevation/sched-class YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass struct {
	ClassId NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union `path:"class-id" module:"nokia-conf"`
	Weight  *uint32                                                                                     `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) IsYANGGoStruct() {
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) GetClassId() NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass_ClassId_Union {
	if t == nil || t.ClassId == nil {
		return nil
	}
	return t.ClassId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v uint32 = 1
		t.Weight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"class-id": t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SchedClassElevation_SchedClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt represents the /nokia-conf/configure/groups/group/qos/sap-egress/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt struct {
	DynamicPolicer *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer `path:"dynamic-policer" module:"nokia-conf"`
	PccRuleEntry   *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry   `path:"pcc-rule-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateDynamicPolicer retrieves the value of the DynamicPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) GetOrCreateDynamicPolicer() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer {
	if t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	t.DynamicPolicer = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer{}
	return t.DynamicPolicer
}

// GetOrCreatePccRuleEntry retrieves the value of the PccRuleEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) GetOrCreatePccRuleEntry() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry {
	if t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	t.PccRuleEntry = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry{}
	return t.PccRuleEntry
}

// GetDynamicPolicer returns the value of the DynamicPolicer struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt. If the receiver or the field DynamicPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) GetDynamicPolicer() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer {
	if t != nil && t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	return nil
}

// GetPccRuleEntry returns the value of the PccRuleEntry struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt. If the receiver or the field PccRuleEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) GetPccRuleEntry() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry {
	if t != nil && t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicPolicer.PopulateDefaults()
	t.PccRuleEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer represents the /nokia-conf/configure/groups/group/qos/sap-egress/subscriber-mgmt/dynamic-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer struct {
	ArbiterParent    *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent  `path:"arbiter-parent" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                       `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerIdRange   *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange `path:"policer-id-range" module:"nokia-conf" yangPresence:"true"`
	StatMode         E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) IsYANGGoStruct() {
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetOrCreateArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePolicerIdRange retrieves the value of the PolicerIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetOrCreatePolicerIdRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	t.PolicerIdRange = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange{}
	return t.PolicerIdRange
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPolicerIdRange returns the value of the PolicerIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer. If the receiver or the field PolicerIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetPolicerIdRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t != nil && t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetCbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetMbs() NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetStatMode() E_NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode_minimal
	}
	t.ArbiterParent.PopulateDefaults()
	t.PolicerIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent represents the /nokia-conf/configure/groups/group/qos/sap-egress/subscriber-mgmt/dynamic-policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange represents the /nokia-conf/configure/groups/group/qos/sap-egress/subscriber-mgmt/dynamic-policer/policer-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry represents the /nokia-conf/configure/groups/group/qos/sap-egress/subscriber-mgmt/pcc-rule-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry struct {
	Range *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range represents the /nokia-conf/configure/groups/group/qos/sap-egress/subscriber-mgmt/pcc-rule-entry/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress represents the /nokia-conf/configure/groups/group/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress struct {
	DefaultFc                   *string                                                                                                                              `path:"default-fc" module:"nokia-conf"`
	DefaultPriority             E_NokiaTypesQos_DefaultPriority                                                                                                      `path:"default-priority" module:"nokia-conf"`
	Description                 *string                                                                                                                              `path:"description" module:"nokia-conf"`
	Dot1P                       map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P    `path:"dot1p" module:"nokia-conf"`
	Dscp                        map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp        `path:"dscp" module:"nokia-conf"`
	Fc                          map[string]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc                                                                       `path:"fc" module:"nokia-conf"`
	IngressClassificationPolicy *string                                                                                                                              `path:"ingress-classification-policy" module:"nokia-conf"`
	IpCriteria                  *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria                                                                          `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria                *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria                                                                        `path:"ipv6-criteria" module:"nokia-conf"`
	LspExp                      map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp `path:"lsp-exp" module:"nokia-conf"`
	MacCriteria                 *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria                                                                         `path:"mac-criteria" module:"nokia-conf"`
	Policer                     map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer `path:"policer" module:"nokia-conf"`
	PolicerAllocation           E_NokiaTypesQos_SapIngressPolicerAlloc                                                                                               `path:"policer-allocation" module:"nokia-conf"`
	PolicersHqosManageable      *bool                                                                                                                                `path:"policers-hqos-manageable" module:"nokia-conf"`
	PolicyId                    *uint32                                                                                                                              `path:"policy-id" module:"nokia-conf"`
	Prec                        map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec       `path:"prec" module:"nokia-conf"`
	Queue                       map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue       `path:"queue" module:"nokia-conf"`
	SapIngressPolicyName        *string                                                                                                                              `path:"sap-ingress-policy-name" module:"nokia-conf"`
	Scope                       E_NokiaTypesQos_ItemScope                                                                                                            `path:"scope" module:"nokia-conf"`
	SubscriberMgmt              *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt                                                                      `path:"subscriber-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) NewDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P{
		Dot1PValue: Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) RenameDot1P(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) DeleteDot1P(Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) AppendDot1P(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) error {
	key := v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) NewDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) RenameDscp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) DeleteDscp(DscpName NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) AppendDscp(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) NewFc(FcName string) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc{
		FcName: &FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) RenameFc(oldK, newK string) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = &newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateFc(FcName string) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetFc(FcName string) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) DeleteFc(FcName string) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) error {
	if v.FcName == nil {
		return fmt.Errorf("invalid nil key received for FcName")
	}

	key := *v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) NewLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp{
		LspExpValue: LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) RenameLspExp(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) DeleteLspExp(LspExpValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp struct to the
// list LspExp of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) AppendLspExp(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) error {
	key := v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewPrec creates a new entry in the Prec list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) NewPrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec)
	}

	key := PrecValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prec", key)
	}

	t.Prec[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec{
		PrecValue: PrecValue,
	}

	return t.Prec[key], nil
}

// RenamePrec renames an entry in the list Prec within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) RenamePrec(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union) error {
	if _, ok := t.Prec[newK]; ok {
		return fmt.Errorf("key %v already exists in Prec", newK)
	}

	e, ok := t.Prec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prec", oldK)
	}
	e.PrecValue = newK

	t.Prec[newK] = e
	delete(t.Prec, oldK)
	return nil
}

// GetOrCreatePrec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreatePrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec {

	key := PrecValue

	if v, ok := t.Prec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrec(PrecValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrec got unexpected error: %v", err))
	}
	return v
}

// GetPrec retrieves the value with the specified key from
// the Prec map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetPrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec {

	if t == nil {
		return nil
	}

	key := PrecValue

	if lm, ok := t.Prec[key]; ok {
		return lm
	}
	return nil
}

// DeletePrec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) DeletePrec(PrecValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union) {
	key := PrecValue

	delete(t.Prec, key)
}

// AppendPrec appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec struct to the
// list Prec of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) AppendPrec(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) error {
	key := v.PrecValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec)
	}

	if _, ok := t.Prec[key]; ok {
		return fmt.Errorf("duplicate key for list Prec %v", key)
	}

	t.Prec[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetOrCreateMacCriteria retrieves the value of the MacCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateMacCriteria() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria {
	if t.MacCriteria != nil {
		return t.MacCriteria
	}
	t.MacCriteria = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria{}
	return t.MacCriteria
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetIpCriteria() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetIpv6Criteria() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetMacCriteria returns the value of the MacCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver or the field MacCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetMacCriteria() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria {
	if t != nil && t.MacCriteria != nil {
		return t.MacCriteria
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetDefaultFc retrieves the value of the leaf DefaultFc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultFc is set, it can
// safely use t.GetDefaultFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultFc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetDefaultFc() string {
	if t == nil || t.DefaultFc == nil {
		return ""
	}
	return *t.DefaultFc
}

// GetDefaultPriority retrieves the value of the leaf DefaultPriority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPriority is set, it can
// safely use t.GetDefaultPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetDefaultPriority() E_NokiaTypesQos_DefaultPriority {
	if t == nil || t.DefaultPriority == 0 {
		return NokiaTypesQos_DefaultPriority_low
	}
	return t.DefaultPriority
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIngressClassificationPolicy retrieves the value of the leaf IngressClassificationPolicy from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressClassificationPolicy is set, it can
// safely use t.GetIngressClassificationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressClassificationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetIngressClassificationPolicy() string {
	if t == nil || t.IngressClassificationPolicy == nil {
		return ""
	}
	return *t.IngressClassificationPolicy
}

// GetPolicerAllocation retrieves the value of the leaf PolicerAllocation from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerAllocation is set, it can
// safely use t.GetPolicerAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetPolicerAllocation() E_NokiaTypesQos_SapIngressPolicerAlloc {
	if t == nil || t.PolicerAllocation == 0 {
		return NokiaTypesQos_SapIngressPolicerAlloc_none
	}
	return t.PolicerAllocation
}

// GetPolicersHqosManageable retrieves the value of the leaf PolicersHqosManageable from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicersHqosManageable is set, it can
// safely use t.GetPolicersHqosManageable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicersHqosManageable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetPolicersHqosManageable() bool {
	if t == nil || t.PolicersHqosManageable == nil {
		return false
	}
	return *t.PolicersHqosManageable
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// GetSapIngressPolicyName retrieves the value of the leaf SapIngressPolicyName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapIngressPolicyName is set, it can
// safely use t.GetSapIngressPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapIngressPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetSapIngressPolicyName() string {
	if t == nil || t.SapIngressPolicyName == nil {
		return ""
	}
	return *t.SapIngressPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultPriority == 0 {
		t.DefaultPriority = NokiaTypesQos_DefaultPriority_low
	}
	if t.PolicerAllocation == 0 {
		t.PolicerAllocation = NokiaTypesQos_SapIngressPolicerAlloc_none
	}
	if t.PolicersHqosManageable == nil {
		var v bool = false
		t.PolicersHqosManageable = &v
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	t.MacCriteria.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Prec {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapIngressPolicyName == nil {
		return nil, fmt.Errorf("nil value for key SapIngressPolicyName")
	}

	return map[string]interface{}{
		"sap-ingress-policy-name": *t.SapIngressPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P represents the /nokia-conf/configure/groups/group/qos/sap-ingress/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P struct {
	Dot1PValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union `path:"dot1p-value" module:"nokia-conf"`
	Fc         *string                                                                `path:"fc" module:"nokia-conf"`
	Priority   E_NokiaTypesQos_Priority                                               `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) IsYANGGoStruct() {}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) GetDot1PValue() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P_Dot1PValue_Union {
	if t == nil || t.Dot1PValue == nil {
		return nil
	}
	return t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-value": t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp represents the /nokia-conf/configure/groups/group/qos/sap-ingress/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp struct {
	DscpName NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union `path:"dscp-name" module:"nokia-conf"`
	Fc       *string                                                             `path:"fc" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority                                            `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) IsYANGGoStruct() {}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) GetDscpName() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp_DscpName_Union {
	if t == nil || t.DscpName == nil {
		return nil
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc represents the /nokia-conf/configure/groups/group/qos/sap-ingress/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc struct {
	BroadcastPolicer                *int32                                                                       `path:"broadcast-policer" module:"nokia-conf"`
	BroadcastQueue                  *int32                                                                       `path:"broadcast-queue" module:"nokia-conf"`
	BroadcastQueueGroupQueue        *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue `path:"broadcast-queue-group-queue" module:"nokia-conf" yangPresence:"true"`
	De_1OutProfile                  *bool                                                                        `path:"de-1-out-profile" module:"nokia-conf"`
	EgressFc                        E_NokiaTypesSros_FcName                                                      `path:"egress-fc" module:"nokia-conf"`
	FcName                          *string                                                                      `path:"fc-name" module:"nokia-conf"`
	FpRedirectGroupBroadcastPolicer YANGEmpty                                                                    `path:"fp-redirect-group-broadcast-policer" module:"nokia-conf"`
	FpRedirectGroupMulticastPolicer YANGEmpty                                                                    `path:"fp-redirect-group-multicast-policer" module:"nokia-conf"`
	FpRedirectGroupPolicer          YANGEmpty                                                                    `path:"fp-redirect-group-policer" module:"nokia-conf"`
	FpRedirectGroupUnknownPolicer   YANGEmpty                                                                    `path:"fp-redirect-group-unknown-policer" module:"nokia-conf"`
	InRemark                        *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark                 `path:"in-remark" module:"nokia-conf"`
	MulticastPolicer                *int32                                                                       `path:"multicast-policer" module:"nokia-conf"`
	MulticastQueue                  *int32                                                                       `path:"multicast-queue" module:"nokia-conf"`
	MulticastQueueGroupQueue        *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue `path:"multicast-queue-group-queue" module:"nokia-conf" yangPresence:"true"`
	OutRemark                       *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark                `path:"out-remark" module:"nokia-conf"`
	Policer                         *int32                                                                       `path:"policer" module:"nokia-conf"`
	Profile                         E_NokiaTypesQos_Profile                                                      `path:"profile" module:"nokia-conf"`
	Queue                           *int32                                                                       `path:"queue" module:"nokia-conf"`
	QueueGroupQueue                 *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue          `path:"queue-group-queue" module:"nokia-conf" yangPresence:"true"`
	UnknownPolicer                  *int32                                                                       `path:"unknown-policer" module:"nokia-conf"`
	UnknownQueue                    *int32                                                                       `path:"unknown-queue" module:"nokia-conf"`
	UnknownQueueGroupQueue          *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue   `path:"unknown-queue-group-queue" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) IsYANGGoStruct() {}

// GetOrCreateBroadcastQueueGroupQueue retrieves the value of the BroadcastQueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetOrCreateBroadcastQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue {
	if t.BroadcastQueueGroupQueue != nil {
		return t.BroadcastQueueGroupQueue
	}
	t.BroadcastQueueGroupQueue = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue{}
	return t.BroadcastQueueGroupQueue
}

// GetOrCreateInRemark retrieves the value of the InRemark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetOrCreateInRemark() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark {
	if t.InRemark != nil {
		return t.InRemark
	}
	t.InRemark = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark{}
	return t.InRemark
}

// GetOrCreateMulticastQueueGroupQueue retrieves the value of the MulticastQueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetOrCreateMulticastQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue {
	if t.MulticastQueueGroupQueue != nil {
		return t.MulticastQueueGroupQueue
	}
	t.MulticastQueueGroupQueue = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue{}
	return t.MulticastQueueGroupQueue
}

// GetOrCreateOutRemark retrieves the value of the OutRemark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetOrCreateOutRemark() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark {
	if t.OutRemark != nil {
		return t.OutRemark
	}
	t.OutRemark = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark{}
	return t.OutRemark
}

// GetOrCreateQueueGroupQueue retrieves the value of the QueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetOrCreateQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue {
	if t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	t.QueueGroupQueue = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue{}
	return t.QueueGroupQueue
}

// GetOrCreateUnknownQueueGroupQueue retrieves the value of the UnknownQueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetOrCreateUnknownQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue {
	if t.UnknownQueueGroupQueue != nil {
		return t.UnknownQueueGroupQueue
	}
	t.UnknownQueueGroupQueue = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue{}
	return t.UnknownQueueGroupQueue
}

// GetBroadcastQueueGroupQueue returns the value of the BroadcastQueueGroupQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc. If the receiver or the field BroadcastQueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetBroadcastQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue {
	if t != nil && t.BroadcastQueueGroupQueue != nil {
		return t.BroadcastQueueGroupQueue
	}
	return nil
}

// GetInRemark returns the value of the InRemark struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc. If the receiver or the field InRemark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetInRemark() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark {
	if t != nil && t.InRemark != nil {
		return t.InRemark
	}
	return nil
}

// GetMulticastQueueGroupQueue returns the value of the MulticastQueueGroupQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc. If the receiver or the field MulticastQueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetMulticastQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue {
	if t != nil && t.MulticastQueueGroupQueue != nil {
		return t.MulticastQueueGroupQueue
	}
	return nil
}

// GetOutRemark returns the value of the OutRemark struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc. If the receiver or the field OutRemark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetOutRemark() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark {
	if t != nil && t.OutRemark != nil {
		return t.OutRemark
	}
	return nil
}

// GetQueueGroupQueue returns the value of the QueueGroupQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc. If the receiver or the field QueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue {
	if t != nil && t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	return nil
}

// GetUnknownQueueGroupQueue returns the value of the UnknownQueueGroupQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc. If the receiver or the field UnknownQueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetUnknownQueueGroupQueue() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue {
	if t != nil && t.UnknownQueueGroupQueue != nil {
		return t.UnknownQueueGroupQueue
	}
	return nil
}

// GetBroadcastPolicer retrieves the value of the leaf BroadcastPolicer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastPolicer is set, it can
// safely use t.GetBroadcastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetBroadcastPolicer() int32 {
	if t == nil || t.BroadcastPolicer == nil {
		return 0
	}
	return *t.BroadcastPolicer
}

// GetBroadcastQueue retrieves the value of the leaf BroadcastQueue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastQueue is set, it can
// safely use t.GetBroadcastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetBroadcastQueue() int32 {
	if t == nil || t.BroadcastQueue == nil {
		return 0
	}
	return *t.BroadcastQueue
}

// GetDe_1OutProfile retrieves the value of the leaf De_1OutProfile from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if De_1OutProfile is set, it can
// safely use t.GetDe_1OutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.De_1OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetDe_1OutProfile() bool {
	if t == nil || t.De_1OutProfile == nil {
		return false
	}
	return *t.De_1OutProfile
}

// GetEgressFc retrieves the value of the leaf EgressFc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressFc is set, it can
// safely use t.GetEgressFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressFc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetEgressFc() E_NokiaTypesSros_FcName {
	if t == nil || t.EgressFc == 0 {
		return 0
	}
	return t.EgressFc
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetFcName() string {
	if t == nil || t.FcName == nil {
		return ""
	}
	return *t.FcName
}

// GetFpRedirectGroupBroadcastPolicer retrieves the value of the leaf FpRedirectGroupBroadcastPolicer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupBroadcastPolicer is set, it can
// safely use t.GetFpRedirectGroupBroadcastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupBroadcastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetFpRedirectGroupBroadcastPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupBroadcastPolicer == false {
		return false
	}
	return t.FpRedirectGroupBroadcastPolicer
}

// GetFpRedirectGroupMulticastPolicer retrieves the value of the leaf FpRedirectGroupMulticastPolicer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupMulticastPolicer is set, it can
// safely use t.GetFpRedirectGroupMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupMulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetFpRedirectGroupMulticastPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupMulticastPolicer == false {
		return false
	}
	return t.FpRedirectGroupMulticastPolicer
}

// GetFpRedirectGroupPolicer retrieves the value of the leaf FpRedirectGroupPolicer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupPolicer is set, it can
// safely use t.GetFpRedirectGroupPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetFpRedirectGroupPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupPolicer == false {
		return false
	}
	return t.FpRedirectGroupPolicer
}

// GetFpRedirectGroupUnknownPolicer retrieves the value of the leaf FpRedirectGroupUnknownPolicer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupUnknownPolicer is set, it can
// safely use t.GetFpRedirectGroupUnknownPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupUnknownPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetFpRedirectGroupUnknownPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupUnknownPolicer == false {
		return false
	}
	return t.FpRedirectGroupUnknownPolicer
}

// GetMulticastPolicer retrieves the value of the leaf MulticastPolicer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastPolicer is set, it can
// safely use t.GetMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetMulticastPolicer() int32 {
	if t == nil || t.MulticastPolicer == nil {
		return 0
	}
	return *t.MulticastPolicer
}

// GetMulticastQueue retrieves the value of the leaf MulticastQueue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastQueue is set, it can
// safely use t.GetMulticastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetMulticastQueue() int32 {
	if t == nil || t.MulticastQueue == nil {
		return 0
	}
	return *t.MulticastQueue
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetUnknownPolicer retrieves the value of the leaf UnknownPolicer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownPolicer is set, it can
// safely use t.GetUnknownPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetUnknownPolicer() int32 {
	if t == nil || t.UnknownPolicer == nil {
		return 0
	}
	return *t.UnknownPolicer
}

// GetUnknownQueue retrieves the value of the leaf UnknownQueue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownQueue is set, it can
// safely use t.GetUnknownQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) GetUnknownQueue() int32 {
	if t == nil || t.UnknownQueue == nil {
		return 0
	}
	return *t.UnknownQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.De_1OutProfile == nil {
		var v bool = false
		t.De_1OutProfile = &v
	}
	t.BroadcastQueueGroupQueue.PopulateDefaults()
	t.InRemark.PopulateDefaults()
	t.MulticastQueueGroupQueue.PopulateDefaults()
	t.OutRemark.PopulateDefaults()
	t.QueueGroupQueue.PopulateDefaults()
	t.UnknownQueueGroupQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcName == nil {
		return nil, fmt.Errorf("nil value for key FcName")
	}

	return map[string]interface{}{
		"fc-name": *t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue represents the /nokia-conf/configure/groups/group/qos/sap-ingress/fc/broadcast-queue-group-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) IsYANGGoStruct() {
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark represents the /nokia-conf/configure/groups/group/qos/sap-ingress/fc/in-remark YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_InRemark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue represents the /nokia-conf/configure/groups/group/qos/sap-ingress/fc/multicast-queue-group-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) IsYANGGoStruct() {
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_MulticastQueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark represents the /nokia-conf/configure/groups/group/qos/sap-ingress/fc/out-remark YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_OutRemark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue represents the /nokia-conf/configure/groups/group/qos/sap-ingress/fc/queue-group-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_QueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue represents the /nokia-conf/configure/groups/group/qos/sap-ingress/fc/unknown-queue-group-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Fc_UnknownQueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
	Type  E_NokiaTypesQos_IpFilterType                                                                                                                         `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) GetType() E_NokiaTypesQos_IpFilterType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_IpFilterType_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_IpFilterType_normal
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                        `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match        `path:"match" module:"nokia-conf"`
	Tag         *uint32                                                                        `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Tag == nil {
		var v uint32 = 0
		t.Tag = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action struct {
	Fc       *string                            `path:"fc" module:"nokia-conf"`
	Policer  *int32                             `path:"policer" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority           `path:"priority" module:"nokia-conf"`
	Type     E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                              `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	VxlanVni *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni      `path:"vxlan-vni" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateVxlanVni retrieves the value of the VxlanVni field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateVxlanVni() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni {
	if t.VxlanVni != nil {
		return t.VxlanVni
	}
	t.VxlanVni = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni{}
	return t.VxlanVni
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetVxlanVni returns the value of the VxlanVni struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field VxlanVni is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetVxlanVni() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni {
	if t != nil && t.VxlanVni != nil {
		return t.VxlanVni
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.VxlanVni.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                                `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                                `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/vxlan-vni YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni struct {
	Eq    *uint32                                                                                `path:"eq" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ip-criteria/entry/match/vxlan-vni/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
	Type  E_NokiaTypesQos_IpFilterType                                                                                                                             `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) GetType() E_NokiaTypesQos_IpFilterType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_IpFilterType_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_IpFilterType_normal
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                          `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match        `path:"match" module:"nokia-conf"`
	Tag         *uint32                                                                          `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Tag == nil {
		var v uint32 = 0
		t.Tag = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action struct {
	Fc       *string                            `path:"fc" module:"nokia-conf"`
	Policer  *int32                             `path:"policer" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority           `path:"priority" module:"nokia-conf"`
	Type     E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                                  `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Fragment   E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
	VxlanVni   *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni        `path:"vxlan-vni" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateVxlanVni retrieves the value of the VxlanVni field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateVxlanVni() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni {
	if t.VxlanVni != nil {
		return t.VxlanVni
	}
	t.VxlanVni = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni{}
	return t.VxlanVni
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetVxlanVni returns the value of the VxlanVni struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field VxlanVni is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetVxlanVni() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni {
	if t != nil && t.VxlanVni != nil {
		return t.VxlanVni
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.VxlanVni.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                                  `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                  `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                  `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                                  `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                  `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                  `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/vxlan-vni YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni struct {
	Eq    *uint32                                                                                  `path:"eq" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range represents the /nokia-conf/configure/groups/group/qos/sap-ingress/ipv6-criteria/entry/match/vxlan-vni/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp represents the /nokia-conf/configure/groups/group/qos/sap-ingress/lsp-exp YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp struct {
	Fc          *string                                                                  `path:"fc" module:"nokia-conf"`
	LspExpValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union `path:"lsp-exp-value" module:"nokia-conf"`
	Priority    E_NokiaTypesQos_Priority                                                 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) GetLspExpValue() NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp_LspExpValue_Union {
	if t == nil || t.LspExpValue == nil {
		return nil
	}
	return t.LspExpValue
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"lsp-exp-value": t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria struct {
	Entry map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry `path:"entry" module:"nokia-conf"`
	Type  E_NokiaTypesQos_MacCriteriaType                                                                                                                        `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) AppendEntry(v *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) GetType() E_NokiaTypesQos_MacCriteriaType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_MacCriteriaType_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_MacCriteriaType_normal
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                         `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action struct {
	Fc       *string                            `path:"fc" module:"nokia-conf"`
	Policer  *int32                             `path:"policer" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority           `path:"priority" module:"nokia-conf"`
	Type     E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match struct {
	AtmVci    *int32                                                                            `path:"atm-vci" module:"nokia-conf"`
	Dot1P     *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P    `path:"dot1p" module:"nokia-conf" yangPresence:"true"`
	DstMac    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac   `path:"dst-mac" module:"nokia-conf" yangPresence:"true"`
	Etype     *string                                                                           `path:"etype" module:"nokia-conf"`
	FrameType E_NokiaTypesQos_MacFrameType                                                      `path:"frame-type" module:"nokia-conf"`
	InnerTag  *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag `path:"inner-tag" module:"nokia-conf" yangPresence:"true"`
	LlcDsap   *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap  `path:"llc-dsap" module:"nokia-conf" yangPresence:"true"`
	LlcSsap   *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap  `path:"llc-ssap" module:"nokia-conf" yangPresence:"true"`
	OuterTag  *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag `path:"outer-tag" module:"nokia-conf" yangPresence:"true"`
	SnapOui   E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SnapOui `path:"snap-oui" module:"nokia-conf"`
	SnapPid   *int32                                                                            `path:"snap-pid" module:"nokia-conf"`
	SrcMac    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac   `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateDot1P() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDstMac retrieves the value of the DstMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateDstMac() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac {
	if t.DstMac != nil {
		return t.DstMac
	}
	t.DstMac = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac{}
	return t.DstMac
}

// GetOrCreateInnerTag retrieves the value of the InnerTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateInnerTag() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag {
	if t.InnerTag != nil {
		return t.InnerTag
	}
	t.InnerTag = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag{}
	return t.InnerTag
}

// GetOrCreateLlcDsap retrieves the value of the LlcDsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateLlcDsap() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap {
	if t.LlcDsap != nil {
		return t.LlcDsap
	}
	t.LlcDsap = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap{}
	return t.LlcDsap
}

// GetOrCreateLlcSsap retrieves the value of the LlcSsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateLlcSsap() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap {
	if t.LlcSsap != nil {
		return t.LlcSsap
	}
	t.LlcSsap = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap{}
	return t.LlcSsap
}

// GetOrCreateOuterTag retrieves the value of the OuterTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateOuterTag() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag {
	if t.OuterTag != nil {
		return t.OuterTag
	}
	t.OuterTag = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag{}
	return t.OuterTag
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetDot1P() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDstMac returns the value of the DstMac struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field DstMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetDstMac() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac {
	if t != nil && t.DstMac != nil {
		return t.DstMac
	}
	return nil
}

// GetInnerTag returns the value of the InnerTag struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field InnerTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetInnerTag() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag {
	if t != nil && t.InnerTag != nil {
		return t.InnerTag
	}
	return nil
}

// GetLlcDsap returns the value of the LlcDsap struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field LlcDsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetLlcDsap() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap {
	if t != nil && t.LlcDsap != nil {
		return t.LlcDsap
	}
	return nil
}

// GetLlcSsap returns the value of the LlcSsap struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field LlcSsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetLlcSsap() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap {
	if t != nil && t.LlcSsap != nil {
		return t.LlcSsap
	}
	return nil
}

// GetOuterTag returns the value of the OuterTag struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field OuterTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetOuterTag() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag {
	if t != nil && t.OuterTag != nil {
		return t.OuterTag
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetSrcMac() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetAtmVci retrieves the value of the leaf AtmVci from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtmVci is set, it can
// safely use t.GetAtmVci() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtmVci == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetAtmVci() int32 {
	if t == nil || t.AtmVci == nil {
		return 0
	}
	return *t.AtmVci
}

// GetEtype retrieves the value of the leaf Etype from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etype is set, it can
// safely use t.GetEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetEtype() string {
	if t == nil || t.Etype == nil {
		return ""
	}
	return *t.Etype
}

// GetFrameType retrieves the value of the leaf FrameType from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameType is set, it can
// safely use t.GetFrameType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetFrameType() E_NokiaTypesQos_MacFrameType {
	if t == nil || t.FrameType == 0 {
		return 0
	}
	return t.FrameType
}

// GetSnapOui retrieves the value of the leaf SnapOui from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapOui is set, it can
// safely use t.GetSnapOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapOui == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetSnapOui() E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SnapOui {
	if t == nil || t.SnapOui == 0 {
		return 0
	}
	return t.SnapOui
}

// GetSnapPid retrieves the value of the leaf SnapPid from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapPid is set, it can
// safely use t.GetSnapPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapPid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) GetSnapPid() int32 {
	if t == nil || t.SnapPid == nil {
		return 0
	}
	return *t.SnapPid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1P.PopulateDefaults()
	t.DstMac.PopulateDefaults()
	t.InnerTag.PopulateDefaults()
	t.LlcDsap.PopulateDefaults()
	t.LlcSsap.PopulateDefaults()
	t.OuterTag.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P struct {
	Mask     *int32 `path:"mask" module:"nokia-conf"`
	Priority *int32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 7
	}
	return *t.Mask
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 7
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match/dst-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match/inner-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag struct {
	Mask *uint32 `path:"mask" module:"nokia-conf"`
	Vlan *int32  `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) GetMask() uint32 {
	if t == nil || t.Mask == nil {
		return 4095
	}
	return *t.Mask
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) GetVlan() int32 {
	if t == nil || t.Vlan == nil {
		return 0
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint32 = 4095
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match/llc-dsap YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap struct {
	Dsap *int32 `path:"dsap" module:"nokia-conf"`
	Mask *int32 `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) IsYANGGoStruct() {
}

// GetDsap retrieves the value of the leaf Dsap from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsap is set, it can
// safely use t.GetDsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) GetDsap() int32 {
	if t == nil || t.Dsap == nil {
		return 0
	}
	return *t.Dsap
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match/llc-ssap YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Ssap *int32 `path:"ssap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetSsap retrieves the value of the leaf Ssap from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ssap is set, it can
// safely use t.GetSsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ssap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) GetSsap() int32 {
	if t == nil || t.Ssap == nil {
		return 0
	}
	return *t.Ssap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match/outer-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag struct {
	Mask *uint32 `path:"mask" module:"nokia-conf"`
	Vlan *int32  `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) GetMask() uint32 {
	if t == nil || t.Mask == nil {
		return 4095
	}
	return *t.Mask
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) GetVlan() int32 {
	if t == nil || t.Vlan == nil {
		return 0
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint32 = 4095
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac represents the /nokia-conf/configure/groups/group/qos/sap-ingress/mac-criteria/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer represents the /nokia-conf/configure/groups/group/qos/sap-ingress/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer struct {
	AdaptationRule   *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy  *string                                                                    `path:"adv-config-policy" module:"nokia-conf"`
	ArbiterParent    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description      *string                                                                    `path:"description" module:"nokia-conf"`
	HighPrioOnly     NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                     `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union    `path:"policer-id" module:"nokia-conf"`
	ProfileCapped    *bool                                                                      `path:"profile-capped" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate              `path:"rate" module:"nokia-conf"`
	SchedulerParent  *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent   `path:"scheduler-parent" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_SapIngressPolicerStatMode                                  `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetOrCreateSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetHighPrioOnly() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) GetStatMode() E_NokiaTypesQos_SapIngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/sap-ingress/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent represents the /nokia-conf/configure/groups/group/qos/sap-ingress/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) IsYANGGoStruct() {}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate represents the /nokia-conf/configure/groups/group/qos/sap-ingress/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate struct {
	Cir           *float64                                                                            `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                            `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate_ReferenceRate_local_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate represents the /nokia-conf/configure/groups/group/qos/sap-ingress/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent represents the /nokia-conf/configure/groups/group/qos/sap-ingress/policer/scheduler-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Policer_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec represents the /nokia-conf/configure/groups/group/qos/sap-ingress/prec YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec struct {
	Fc        *string                                                              `path:"fc" module:"nokia-conf"`
	PrecValue NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union `path:"prec-value" module:"nokia-conf"`
	Priority  E_NokiaTypesQos_Priority                                             `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPrecValue retrieves the value of the leaf PrecValue from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrecValue is set, it can
// safely use t.GetPrecValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrecValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) GetPrecValue() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec_PrecValue_Union {
	if t == nil || t.PrecValue == nil {
		return nil
	}
	return t.PrecValue
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prec-value": t.PrecValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue represents the /nokia-conf/configure/groups/group/qos/sap-ingress/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue struct {
	AdaptationRule   *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy  *string                                                                `path:"adv-config-policy" module:"nokia-conf"`
	BurstLimit       NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Cbs_Union        `path:"cbs" module:"nokia-conf"`
	CirNonProfiling  *bool                                                                  `path:"cir-non-profiling" module:"nokia-conf"`
	DropTail         *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail        `path:"drop-tail" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	Multipoint       *bool                                                                  `path:"multipoint" module:"nokia-conf"`
	PacketByteOffset *int32                                                                 `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	QueueId          NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union    `path:"queue-id" module:"nokia-conf"`
	QueueMode        E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueMode      `path:"queue-mode" module:"nokia-conf"`
	QueueType        E_NokiaTypesQos_QueueType                                              `path:"queue-type" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerParent  *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent `path:"scheduler-parent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetCirNonProfiling retrieves the value of the leaf CirNonProfiling from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirNonProfiling is set, it can
// safely use t.GetCirNonProfiling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirNonProfiling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetCirNonProfiling() bool {
	if t == nil || t.CirNonProfiling == nil {
		return false
	}
	return *t.CirNonProfiling
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueMode retrieves the value of the leaf QueueMode from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMode is set, it can
// safely use t.GetQueueMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetQueueMode() E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueMode {
	if t == nil || t.QueueMode == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueMode_priority
	}
	return t.QueueMode
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) GetQueueType() E_NokiaTypesQos_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaTypesQos_QueueType_auto_expedited
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Cbs_Enum_auto
	}
	if t.CirNonProfiling == nil {
		var v bool = false
		t.CirNonProfiling = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Mbs_Enum_auto
	}
	if t.Multipoint == nil {
		var v bool = false
		t.Multipoint = &v
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.QueueMode == 0 {
		t.QueueMode = NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_QueueMode_priority
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaTypesQos_QueueType_auto_expedited
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/sap-ingress/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Fir E_NokiaTypesQos_AdaptationRule `path:"fir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) GetFir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Fir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Fir == 0 {
		t.Fir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail represents the /nokia-conf/configure/groups/group/qos/sap-ingress/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/qos/sap-ingress/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate represents the /nokia-conf/configure/groups/group/qos/sap-ingress/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate struct {
	Cir           *float64                                                                          `path:"cir" module:"nokia-conf"`
	Fir           *float64                                                                          `path:"fir" module:"nokia-conf"`
	Pir           *float64                                                                          `path:"pir" module:"nokia-conf"`
	Police        YANGEmpty                                                                         `path:"police" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) GetFir() float64 {
	if t == nil || t.Fir == nil {
		return 0.00
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Fir == nil {
		var v float64 = 0.00
		t.Fir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate represents the /nokia-conf/configure/groups/group/qos/sap-ingress/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate struct {
	Cir    NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Fir    NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate_Fir_Union `path:"fir" module:"nokia-conf"`
	Pir    NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
	Police YANGEmpty                                                            `path:"police" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) GetFir() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate_Fir_Union {
	if t == nil || t.Fir == nil {
		return UnionInt64(0)
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Fir == nil {
		t.Fir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent represents the /nokia-conf/configure/groups/group/qos/sap-ingress/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt represents the /nokia-conf/configure/groups/group/qos/sap-ingress/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt struct {
	DynamicPolicer *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer `path:"dynamic-policer" module:"nokia-conf"`
	PccRuleEntry   *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry   `path:"pcc-rule-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateDynamicPolicer retrieves the value of the DynamicPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) GetOrCreateDynamicPolicer() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer {
	if t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	t.DynamicPolicer = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer{}
	return t.DynamicPolicer
}

// GetOrCreatePccRuleEntry retrieves the value of the PccRuleEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) GetOrCreatePccRuleEntry() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry {
	if t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	t.PccRuleEntry = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry{}
	return t.PccRuleEntry
}

// GetDynamicPolicer returns the value of the DynamicPolicer struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt. If the receiver or the field DynamicPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) GetDynamicPolicer() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer {
	if t != nil && t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	return nil
}

// GetPccRuleEntry returns the value of the PccRuleEntry struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt. If the receiver or the field PccRuleEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) GetPccRuleEntry() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry {
	if t != nil && t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicPolicer.PopulateDefaults()
	t.PccRuleEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer represents the /nokia-conf/configure/groups/group/qos/sap-ingress/subscriber-mgmt/dynamic-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer struct {
	ArbiterParent    *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent  `path:"arbiter-parent" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                        `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerIdRange   *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange `path:"policer-id-range" module:"nokia-conf" yangPresence:"true"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                        `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) IsYANGGoStruct() {
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetOrCreateArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePolicerIdRange retrieves the value of the PolicerIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetOrCreatePolicerIdRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	t.PolicerIdRange = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange{}
	return t.PolicerIdRange
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetArbiterParent() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPolicerIdRange returns the value of the PolicerIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer. If the receiver or the field PolicerIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetPolicerIdRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t != nil && t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetCbs() NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetMbs() NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	t.ArbiterParent.PopulateDefaults()
	t.PolicerIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent represents the /nokia-conf/configure/groups/group/qos/sap-ingress/subscriber-mgmt/dynamic-policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange represents the /nokia-conf/configure/groups/group/qos/sap-ingress/subscriber-mgmt/dynamic-policer/policer-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry represents the /nokia-conf/configure/groups/group/qos/sap-ingress/subscriber-mgmt/pcc-rule-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry struct {
	Range *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) GetRange() *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range represents the /nokia-conf/configure/groups/group/qos/sap-ingress/subscriber-mgmt/pcc-rule-entry/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range.
func (*NokiaConf_Configure_Groups_Group_Qos_SapIngress_SubscriberMgmt_PccRuleEntry_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy struct {
	Description          *string                                                                                                                               `path:"description" module:"nokia-conf"`
	FrameBasedAccounting *bool                                                                                                                                 `path:"frame-based-accounting" module:"nokia-conf"`
	SchedulerPolicyName  *string                                                                                                                               `path:"scheduler-policy-name" module:"nokia-conf"`
	Tier                 map[NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier `path:"tier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// NewTier creates a new entry in the Tier list of the
// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) NewTier(TierId NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier)
	}

	key := TierId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tier", key)
	}

	t.Tier[key] = &NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier{
		TierId: TierId,
	}

	return t.Tier[key], nil
}

// RenameTier renames an entry in the list Tier within
// the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) RenameTier(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union) error {
	if _, ok := t.Tier[newK]; ok {
		return fmt.Errorf("key %v already exists in Tier", newK)
	}

	e, ok := t.Tier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tier", oldK)
	}
	e.TierId = newK

	t.Tier[newK] = e
	delete(t.Tier, oldK)
	return nil
}

// GetOrCreateTier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) GetOrCreateTier(TierId NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union) *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier {

	key := TierId

	if v, ok := t.Tier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTier(TierId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTier got unexpected error: %v", err))
	}
	return v
}

// GetTier retrieves the value with the specified key from
// the Tier map field of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) GetTier(TierId NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union) *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier {

	if t == nil {
		return nil
	}

	key := TierId

	if lm, ok := t.Tier[key]; ok {
		return lm
	}
	return nil
}

// DeleteTier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) DeleteTier(TierId NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union) {
	key := TierId

	delete(t.Tier, key)
}

// AppendTier appends the supplied NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier struct to the
// list Tier of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) AppendTier(v *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) error {
	key := v.TierId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier)
	}

	if _, ok := t.Tier[key]; ok {
		return fmt.Errorf("duplicate key for list Tier %v", key)
	}

	t.Tier[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFrameBasedAccounting retrieves the value of the leaf FrameBasedAccounting from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameBasedAccounting is set, it can
// safely use t.GetFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) GetFrameBasedAccounting() bool {
	if t == nil || t.FrameBasedAccounting == nil {
		return false
	}
	return *t.FrameBasedAccounting
}

// GetSchedulerPolicyName retrieves the value of the leaf SchedulerPolicyName from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerPolicyName is set, it can
// safely use t.GetSchedulerPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) GetSchedulerPolicyName() string {
	if t == nil || t.SchedulerPolicyName == nil {
		return ""
	}
	return *t.SchedulerPolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FrameBasedAccounting == nil {
		var v bool = false
		t.FrameBasedAccounting = &v
	}
	for _, e := range t.Tier {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerPolicyName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerPolicyName")
	}

	return map[string]interface{}{
		"scheduler-policy-name": *t.SchedulerPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier represents the /nokia-conf/configure/groups/group/qos/scheduler-policy/tier YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier struct {
	ParentLocation E_NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_ParentLocation      `path:"parent-location" module:"nokia-conf"`
	Scheduler      map[string]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler `path:"scheduler" module:"nokia-conf"`
	TierId         NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union          `path:"tier-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetParentLocation retrieves the value of the leaf ParentLocation from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParentLocation is set, it can
// safely use t.GetParentLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParentLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) GetParentLocation() E_NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_ParentLocation {
	if t == nil || t.ParentLocation == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_ParentLocation_auto
	}
	return t.ParentLocation
}

// GetTierId retrieves the value of the leaf TierId from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TierId is set, it can
// safely use t.GetTierId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TierId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) GetTierId() NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_TierId_Union {
	if t == nil || t.TierId == nil {
		return nil
	}
	return t.TierId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ParentLocation == 0 {
		t.ParentLocation = NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_ParentLocation_auto
	}
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tier-id": t.TierId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler represents the /nokia-conf/configure/groups/group/qos/scheduler-policy/tier/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler struct {
	Description          *string                                                                              `path:"description" module:"nokia-conf"`
	LimitUnusedBandwidth *bool                                                                                `path:"limit-unused-bandwidth" module:"nokia-conf"`
	PercentRate          *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	PortParent           *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent      `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	Rate                 *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerName        *string                                                                              `path:"scheduler-name" module:"nokia-conf"`
	SchedulerParent      *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreatePortParent() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetOrCreateSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent{}
	return t.SchedulerParent
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetPortParent() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetSchedulerParent() *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate represents the /nokia-conf/configure/groups/group/qos/scheduler-policy/tier/scheduler/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate struct {
	Cir           NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_Cir_Union       `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                                        `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) GetCir() NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedCirPercentRate_Enum_sum
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate_reference_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedCirPercentRate_Enum_sum
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate_ReferenceRate_reference_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent represents the /nokia-conf/configure/groups/group/qos/scheduler-policy/tier/scheduler/port-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate represents the /nokia-conf/configure/groups/group/qos/scheduler-policy/tier/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedCirRate_Enum_sum
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedCirRate_Enum_sum
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent represents the /nokia-conf/configure/groups/group/qos/scheduler-policy/tier/scheduler/scheduler-parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent.
func (*NokiaConf_Configure_Groups_Group_Qos_SchedulerPolicy_Tier_Scheduler_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SharedQueue represents the /nokia-conf/configure/groups/group/qos/shared-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SharedQueue struct {
	Description           *string                                                                                                                          `path:"description" module:"nokia-conf"`
	Fc                    map[NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc        `path:"fc" module:"nokia-conf"`
	Queue                 map[NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue `path:"queue" module:"nokia-conf"`
	SharedQueuePolicyName *string                                                                                                                          `path:"shared-queue-policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SharedQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_SharedQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_SharedQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_SharedQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_SharedQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_SharedQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSharedQueuePolicyName retrieves the value of the leaf SharedQueuePolicyName from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SharedQueuePolicyName is set, it can
// safely use t.GetSharedQueuePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SharedQueuePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) GetSharedQueuePolicyName() string {
	if t == nil || t.SharedQueuePolicyName == nil {
		return ""
	}
	return *t.SharedQueuePolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SharedQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SharedQueue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SharedQueuePolicyName == nil {
		return nil, fmt.Errorf("nil value for key SharedQueuePolicyName")
	}

	return map[string]interface{}{
		"shared-queue-policy-name": *t.SharedQueuePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SharedQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SharedQueue.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc represents the /nokia-conf/configure/groups/group/qos/shared-queue/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc struct {
	BroadcastQueue *int32                                                           `path:"broadcast-queue" module:"nokia-conf"`
	FcName         NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	MulticastQueue *int32                                                           `path:"multicast-queue" module:"nokia-conf"`
	Queue          *int32                                                           `path:"queue" module:"nokia-conf"`
	UnknownQueue   *int32                                                           `path:"unknown-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) IsYANGGoStruct() {}

// GetBroadcastQueue retrieves the value of the leaf BroadcastQueue from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastQueue is set, it can
// safely use t.GetBroadcastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) GetBroadcastQueue() int32 {
	if t == nil || t.BroadcastQueue == nil {
		return 0
	}
	return *t.BroadcastQueue
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetMulticastQueue retrieves the value of the leaf MulticastQueue from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastQueue is set, it can
// safely use t.GetMulticastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) GetMulticastQueue() int32 {
	if t == nil || t.MulticastQueue == nil {
		return 0
	}
	return *t.MulticastQueue
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 1
	}
	return *t.Queue
}

// GetUnknownQueue retrieves the value of the leaf UnknownQueue from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownQueue is set, it can
// safely use t.GetUnknownQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) GetUnknownQueue() int32 {
	if t == nil || t.UnknownQueue == nil {
		return 0
	}
	return *t.UnknownQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Queue == nil {
		var v int32 = 1
		t.Queue = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue represents the /nokia-conf/configure/groups/group/qos/shared-queue/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue struct {
	Cbs        *int32                                                               `path:"cbs" module:"nokia-conf"`
	DropTail   *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail     `path:"drop-tail" module:"nokia-conf"`
	Mbs        *int32                                                               `path:"mbs" module:"nokia-conf"`
	Multipoint *bool                                                                `path:"multipoint" module:"nokia-conf"`
	QueueId    NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union `path:"queue-id" module:"nokia-conf"`
	QueueType  E_NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueType   `path:"queue-type" module:"nokia-conf"`
	Rate       *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) IsYANGGoStruct() {}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate{}
	return t.Rate
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 100
	}
	return *t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) GetQueueType() E_NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueType_auto_expedited
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Mbs == nil {
		var v int32 = 100
		t.Mbs = &v
	}
	if t.Multipoint == nil {
		var v bool = false
		t.Multipoint = &v
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_QueueType_auto_expedited
	}
	t.DropTail.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail represents the /nokia-conf/configure/groups/group/qos/shared-queue/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/qos/shared-queue/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate represents the /nokia-conf/configure/groups/group/qos/shared-queue/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate struct {
	Cir *int32 `path:"cir" module:"nokia-conf"`
	Fir *int32 `path:"fir" module:"nokia-conf"`
	Pir *int32 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) GetCir() int32 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) GetFir() int32 {
	if t == nil || t.Fir == nil {
		return 0
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) GetPir() int32 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v int32 = 0
		t.Cir = &v
	}
	if t.Fir == nil {
		var v int32 = 0
		t.Fir = &v
	}
	if t.Pir == nil {
		var v int32 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Qos_SharedQueue_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SlopePolicy represents the /nokia-conf/configure/groups/group/qos/slope-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SlopePolicy struct {
	Description       *string                                                         `path:"description" module:"nokia-conf"`
	ExceedSlope       *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope   `path:"exceed-slope" module:"nokia-conf"`
	HighSlope         *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope     `path:"high-slope" module:"nokia-conf"`
	HighplusSlope     *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope `path:"highplus-slope" module:"nokia-conf"`
	LowSlope          *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope      `path:"low-slope" module:"nokia-conf"`
	SlopePolicyName   *string                                                         `path:"slope-policy-name" module:"nokia-conf"`
	TimeAverageFactor *uint32                                                         `path:"time-average-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SlopePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) IsYANGGoStruct() {}

// GetOrCreateExceedSlope retrieves the value of the ExceedSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetOrCreateExceedSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope {
	if t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	t.ExceedSlope = &NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope{}
	return t.ExceedSlope
}

// GetOrCreateHighSlope retrieves the value of the HighSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetOrCreateHighSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope {
	if t.HighSlope != nil {
		return t.HighSlope
	}
	t.HighSlope = &NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope{}
	return t.HighSlope
}

// GetOrCreateHighplusSlope retrieves the value of the HighplusSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetOrCreateHighplusSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope {
	if t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	t.HighplusSlope = &NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope{}
	return t.HighplusSlope
}

// GetOrCreateLowSlope retrieves the value of the LowSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetOrCreateLowSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope {
	if t.LowSlope != nil {
		return t.LowSlope
	}
	t.LowSlope = &NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope{}
	return t.LowSlope
}

// GetExceedSlope returns the value of the ExceedSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SlopePolicy. If the receiver or the field ExceedSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetExceedSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope {
	if t != nil && t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	return nil
}

// GetHighSlope returns the value of the HighSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SlopePolicy. If the receiver or the field HighSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetHighSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope {
	if t != nil && t.HighSlope != nil {
		return t.HighSlope
	}
	return nil
}

// GetHighplusSlope returns the value of the HighplusSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SlopePolicy. If the receiver or the field HighplusSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetHighplusSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope {
	if t != nil && t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	return nil
}

// GetLowSlope returns the value of the LowSlope struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_SlopePolicy. If the receiver or the field LowSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetLowSlope() *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope {
	if t != nil && t.LowSlope != nil {
		return t.LowSlope
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSlopePolicyName retrieves the value of the leaf SlopePolicyName from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicyName is set, it can
// safely use t.GetSlopePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetSlopePolicyName() string {
	if t == nil || t.SlopePolicyName == nil {
		return ""
	}
	return *t.SlopePolicyName
}

// GetTimeAverageFactor retrieves the value of the leaf TimeAverageFactor from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeAverageFactor is set, it can
// safely use t.GetTimeAverageFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeAverageFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) GetTimeAverageFactor() uint32 {
	if t == nil || t.TimeAverageFactor == nil {
		return 7
	}
	return *t.TimeAverageFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TimeAverageFactor == nil {
		var v uint32 = 7
		t.TimeAverageFactor = &v
	}
	t.ExceedSlope.PopulateDefaults()
	t.HighSlope.PopulateDefaults()
	t.HighplusSlope.PopulateDefaults()
	t.LowSlope.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SlopePolicyName == nil {
		return nil, fmt.Errorf("nil value for key SlopePolicyName")
	}

	return map[string]interface{}{
		"slope-policy-name": *t.SlopePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SlopePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SlopePolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope represents the /nokia-conf/configure/groups/group/qos/slope-policy/exceed-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 55
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 80
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 30
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 55
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 80
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 30
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_ExceedSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope represents the /nokia-conf/configure/groups/group/qos/slope-policy/high-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 90
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 80
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 70
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 90
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 80
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 70
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope represents the /nokia-conf/configure/groups/group/qos/slope-policy/highplus-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 100
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 80
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 85
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 100
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 80
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 85
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_HighplusSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope represents the /nokia-conf/configure/groups/group/qos/slope-policy/low-slope YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 75
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 80
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 50
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 75
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 80
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 50
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope.
func (*NokiaConf_Configure_Groups_Group_Qos_SlopePolicy_LowSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct {
	CirWeightProfile  map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile `path:"cir-weight-profile" module:"nokia-conf"`
	Description       *string                                                                                                                                                               `path:"description" module:"nokia-conf"`
	Fc                map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc                                         `path:"fc" module:"nokia-conf"`
	PacketByteOffset  *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset                                                                                                  `path:"packet-byte-offset" module:"nokia-conf"`
	Queue             map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue                                  `path:"queue" module:"nokia-conf"`
	Scope             E_NokiaTypesQos_ItemScope                                                                                                                                             `path:"scope" module:"nokia-conf"`
	StatMode          E_NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_StatMode                                                                                                         `path:"stat-mode" module:"nokia-conf"`
	VlanQosPolicyName *string                                                                                                                                                               `path:"vlan-qos-policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// NewCirWeightProfile creates a new entry in the CirWeightProfile list of the
// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) NewCirWeightProfile(CirWeightProfileId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union) (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CirWeightProfile == nil {
		t.CirWeightProfile = make(map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile)
	}

	key := CirWeightProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CirWeightProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CirWeightProfile", key)
	}

	t.CirWeightProfile[key] = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile{
		CirWeightProfileId: CirWeightProfileId,
	}

	return t.CirWeightProfile[key], nil
}

// RenameCirWeightProfile renames an entry in the list CirWeightProfile within
// the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) RenameCirWeightProfile(oldK, newK NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union) error {
	if _, ok := t.CirWeightProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CirWeightProfile", newK)
	}

	e, ok := t.CirWeightProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CirWeightProfile", oldK)
	}
	e.CirWeightProfileId = newK

	t.CirWeightProfile[newK] = e
	delete(t.CirWeightProfile, oldK)
	return nil
}

// GetOrCreateCirWeightProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetOrCreateCirWeightProfile(CirWeightProfileId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile {

	key := CirWeightProfileId

	if v, ok := t.CirWeightProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCirWeightProfile(CirWeightProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCirWeightProfile got unexpected error: %v", err))
	}
	return v
}

// GetCirWeightProfile retrieves the value with the specified key from
// the CirWeightProfile map field of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetCirWeightProfile(CirWeightProfileId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile {

	if t == nil {
		return nil
	}

	key := CirWeightProfileId

	if lm, ok := t.CirWeightProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCirWeightProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) DeleteCirWeightProfile(CirWeightProfileId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union) {
	key := CirWeightProfileId

	delete(t.CirWeightProfile, key)
}

// AppendCirWeightProfile appends the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile struct to the
// list CirWeightProfile of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) AppendCirWeightProfile(v *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) error {
	key := v.CirWeightProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CirWeightProfile == nil {
		t.CirWeightProfile = make(map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile)
	}

	if _, ok := t.CirWeightProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CirWeightProfile %v", key)
	}

	t.CirWeightProfile[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) NewFc(FcName NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetFc(FcName NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) AppendFc(v *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) AppendQueue(v *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreatePacketByteOffset retrieves the value of the PacketByteOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetOrCreatePacketByteOffset() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset {
	if t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	t.PacketByteOffset = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset{}
	return t.PacketByteOffset
}

// GetPacketByteOffset returns the value of the PacketByteOffset struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy. If the receiver or the field PacketByteOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetPacketByteOffset() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset {
	if t != nil && t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetStatMode() E_NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_StatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_StatMode_no_stats
	}
	return t.StatMode
}

// GetVlanQosPolicyName retrieves the value of the leaf VlanQosPolicyName from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanQosPolicyName is set, it can
// safely use t.GetVlanQosPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanQosPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) GetVlanQosPolicyName() string {
	if t == nil || t.VlanQosPolicyName == nil {
		return ""
	}
	return *t.VlanQosPolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_StatMode_no_stats
	}
	t.PacketByteOffset.PopulateDefaults()
	for _, e := range t.CirWeightProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanQosPolicyName == nil {
		return nil, fmt.Errorf("nil value for key VlanQosPolicyName")
	}

	return map[string]interface{}{
		"vlan-qos-policy-name": *t.VlanQosPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/cir-weight-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile struct {
	CirWeightProfileId NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union `path:"cir-weight-profile-id" module:"nokia-conf"`
	Weight             *uint32                                                                                      `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) IsYANGGoStruct() {}

// GetCirWeightProfileId retrieves the value of the leaf CirWeightProfileId from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeightProfileId is set, it can
// safely use t.GetCirWeightProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeightProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) GetCirWeightProfileId() NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile_CirWeightProfileId_Union {
	if t == nil || t.CirWeightProfileId == nil {
		return nil
	}
	return t.CirWeightProfileId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v uint32 = 1
		t.Weight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"cir-weight-profile-id": t.CirWeightProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_CirWeightProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc struct {
	FcName NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	Queue  *int32                                                             `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/packet-byte-offset YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset struct {
	Add      *int32 `path:"add" module:"nokia-conf"`
	Subtract *int32 `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) GetAdd() int32 {
	if t == nil || t.Add == nil {
		return 0
	}
	return *t.Add
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) GetSubtract() int32 {
	if t == nil || t.Subtract == nil {
		return 0
	}
	return *t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_PacketByteOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue struct {
	AdaptationRule      *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule       `path:"adaptation-rule" module:"nokia-conf"`
	CirWeightProfile    *uint32                                                                        `path:"cir-weight-profile" module:"nokia-conf"`
	PercentRate         *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate          `path:"percent-rate" module:"nokia-conf"`
	PirWeight           *uint32                                                                        `path:"pir-weight" module:"nokia-conf"`
	QueueForwardingType E_NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueForwardingType `path:"queue-forwarding-type" module:"nokia-conf"`
	QueueId             NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union         `path:"queue-id" module:"nokia-conf"`
	QueueMgmt           *string                                                                        `path:"queue-mgmt" module:"nokia-conf"`
	QueueType           *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType            `path:"queue-type" module:"nokia-conf"`
	SchedulingPriority  *uint32                                                                        `path:"scheduling-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateQueueType retrieves the value of the QueueType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetOrCreateQueueType() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType {
	if t.QueueType != nil {
		return t.QueueType
	}
	t.QueueType = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType{}
	return t.QueueType
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetQueueType returns the value of the QueueType struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue. If the receiver or the field QueueType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetQueueType() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType {
	if t != nil && t.QueueType != nil {
		return t.QueueType
	}
	return nil
}

// GetCirWeightProfile retrieves the value of the leaf CirWeightProfile from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeightProfile is set, it can
// safely use t.GetCirWeightProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeightProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetCirWeightProfile() uint32 {
	if t == nil || t.CirWeightProfile == nil {
		return 1
	}
	return *t.CirWeightProfile
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// GetQueueForwardingType retrieves the value of the leaf QueueForwardingType from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueForwardingType is set, it can
// safely use t.GetQueueForwardingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueForwardingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetQueueForwardingType() E_NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueForwardingType {
	if t == nil || t.QueueForwardingType == 0 {
		return NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueForwardingType_best_effort
	}
	return t.QueueForwardingType
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetQueueMgmt retrieves the value of the leaf QueueMgmt from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMgmt is set, it can
// safely use t.GetQueueMgmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMgmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetQueueMgmt() string {
	if t == nil || t.QueueMgmt == nil {
		return ""
	}
	return *t.QueueMgmt
}

// GetSchedulingPriority retrieves the value of the leaf SchedulingPriority from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulingPriority is set, it can
// safely use t.GetSchedulingPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulingPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) GetSchedulingPriority() uint32 {
	if t == nil || t.SchedulingPriority == nil {
		return 0
	}
	return *t.SchedulingPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirWeightProfile == nil {
		var v uint32 = 1
		t.CirWeightProfile = &v
	}
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	if t.QueueForwardingType == 0 {
		t.QueueForwardingType = NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueForwardingType_best_effort
	}
	t.AdaptationRule.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.QueueType.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/queue-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType struct {
	BestEffort *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort `path:"best-effort" module:"nokia-conf"`
	ExpediteHi *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi `path:"expedite-hi" module:"nokia-conf"`
	ExpediteLo *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo `path:"expedite-lo" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) IsYANGGoStruct() {}

// GetOrCreateBestEffort retrieves the value of the BestEffort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) GetOrCreateBestEffort() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort {
	if t.BestEffort != nil {
		return t.BestEffort
	}
	t.BestEffort = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort{}
	return t.BestEffort
}

// GetOrCreateExpediteHi retrieves the value of the ExpediteHi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) GetOrCreateExpediteHi() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi {
	if t.ExpediteHi != nil {
		return t.ExpediteHi
	}
	t.ExpediteHi = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi{}
	return t.ExpediteHi
}

// GetOrCreateExpediteLo retrieves the value of the ExpediteLo field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) GetOrCreateExpediteLo() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo {
	if t.ExpediteLo != nil {
		return t.ExpediteLo
	}
	t.ExpediteLo = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo{}
	return t.ExpediteLo
}

// GetBestEffort returns the value of the BestEffort struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType. If the receiver or the field BestEffort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) GetBestEffort() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort {
	if t != nil && t.BestEffort != nil {
		return t.BestEffort
	}
	return nil
}

// GetExpediteHi returns the value of the ExpediteHi struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType. If the receiver or the field ExpediteHi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) GetExpediteHi() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi {
	if t != nil && t.ExpediteHi != nil {
		return t.ExpediteHi
	}
	return nil
}

// GetExpediteLo returns the value of the ExpediteLo struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType. If the receiver or the field ExpediteLo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) GetExpediteLo() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo {
	if t != nil && t.ExpediteLo != nil {
		return t.ExpediteLo
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BestEffort.PopulateDefaults()
	t.ExpediteHi.PopulateDefaults()
	t.ExpediteLo.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/queue-type/best-effort YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort struct {
	CirWeightProfile *uint32                                                                                    `path:"cir-weight-profile" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight        *uint32                                                                                    `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetCirWeightProfile retrieves the value of the leaf CirWeightProfile from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeightProfile is set, it can
// safely use t.GetCirWeightProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeightProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetCirWeightProfile() uint32 {
	if t == nil || t.CirWeightProfile == nil {
		return 1
	}
	return *t.CirWeightProfile
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirWeightProfile == nil {
		var v uint32 = 1
		t.CirWeightProfile = &v
	}
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/queue-type/best-effort/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_BestEffort_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/queue-type/expedite-hi YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi struct {
	PercentRate *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight   *uint32                                                                                    `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/queue-type/expedite-hi/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteHi_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/queue-type/expedite-lo YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo struct {
	PercentRate *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight   *uint32                                                                                    `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) GetPercentRate() *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate represents the /nokia-conf/configure/groups/group/qos/vlan-qos-policy/queue/queue-type/expedite-lo/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Qos_VlanQosPolicy_Queue_QueueType_ExpediteLo_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy represents the /nokia-conf/configure/groups/group/redundancy YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy struct {
	BgpEvpn        *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn       `path:"bgp-evpn" module:"nokia-conf"`
	BgpMh          *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh         `path:"bgp-mh" module:"nokia-conf" yangPresence:"true"`
	CertSync       *bool                                                      `path:"cert-sync" module:"nokia-conf"`
	MgmtEthernet   *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet  `path:"mgmt-ethernet" module:"nokia-conf" yangPresence:"true"`
	MultiChassis   *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis  `path:"multi-chassis" module:"nokia-conf"`
	RollbackSync   E_NokiaConf_Configure_Groups_Group_Redundancy_RollbackSync `path:"rollback-sync" module:"nokia-conf"`
	Srrp           *NokiaConf_Configure_Groups_Group_Redundancy_Srrp          `path:"srrp" module:"nokia-conf" yangPresence:"true"`
	SwitchoverExec *string                                                    `path:"switchover-exec" module:"nokia-conf"`
	Synchronize    E_NokiaConf_Configure_Groups_Group_Redundancy_Synchronize  `path:"synchronize" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy) IsYANGGoStruct() {}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetOrCreateBgpEvpn() *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpMh retrieves the value of the BgpMh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetOrCreateBgpMh() *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh {
	if t.BgpMh != nil {
		return t.BgpMh
	}
	t.BgpMh = &NokiaConf_Configure_Groups_Group_Redundancy_BgpMh{}
	return t.BgpMh
}

// GetOrCreateMgmtEthernet retrieves the value of the MgmtEthernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetOrCreateMgmtEthernet() *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet {
	if t.MgmtEthernet != nil {
		return t.MgmtEthernet
	}
	t.MgmtEthernet = &NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet{}
	return t.MgmtEthernet
}

// GetOrCreateMultiChassis retrieves the value of the MultiChassis field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetOrCreateMultiChassis() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis {
	if t.MultiChassis != nil {
		return t.MultiChassis
	}
	t.MultiChassis = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis{}
	return t.MultiChassis
}

// GetOrCreateSrrp retrieves the value of the Srrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetOrCreateSrrp() *NokiaConf_Configure_Groups_Group_Redundancy_Srrp {
	if t.Srrp != nil {
		return t.Srrp
	}
	t.Srrp = &NokiaConf_Configure_Groups_Group_Redundancy_Srrp{}
	return t.Srrp
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetBgpEvpn() *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpMh returns the value of the BgpMh struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy. If the receiver or the field BgpMh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetBgpMh() *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh {
	if t != nil && t.BgpMh != nil {
		return t.BgpMh
	}
	return nil
}

// GetMgmtEthernet returns the value of the MgmtEthernet struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy. If the receiver or the field MgmtEthernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetMgmtEthernet() *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet {
	if t != nil && t.MgmtEthernet != nil {
		return t.MgmtEthernet
	}
	return nil
}

// GetMultiChassis returns the value of the MultiChassis struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy. If the receiver or the field MultiChassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetMultiChassis() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis {
	if t != nil && t.MultiChassis != nil {
		return t.MultiChassis
	}
	return nil
}

// GetSrrp returns the value of the Srrp struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy. If the receiver or the field Srrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetSrrp() *NokiaConf_Configure_Groups_Group_Redundancy_Srrp {
	if t != nil && t.Srrp != nil {
		return t.Srrp
	}
	return nil
}

// GetCertSync retrieves the value of the leaf CertSync from the NokiaConf_Configure_Groups_Group_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertSync is set, it can
// safely use t.GetCertSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetCertSync() bool {
	if t == nil || t.CertSync == nil {
		return true
	}
	return *t.CertSync
}

// GetRollbackSync retrieves the value of the leaf RollbackSync from the NokiaConf_Configure_Groups_Group_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RollbackSync is set, it can
// safely use t.GetRollbackSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RollbackSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetRollbackSync() E_NokiaConf_Configure_Groups_Group_Redundancy_RollbackSync {
	if t == nil || t.RollbackSync == 0 {
		return 0
	}
	return t.RollbackSync
}

// GetSwitchoverExec retrieves the value of the leaf SwitchoverExec from the NokiaConf_Configure_Groups_Group_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchoverExec is set, it can
// safely use t.GetSwitchoverExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchoverExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetSwitchoverExec() string {
	if t == nil || t.SwitchoverExec == nil {
		return ""
	}
	return *t.SwitchoverExec
}

// GetSynchronize retrieves the value of the leaf Synchronize from the NokiaConf_Configure_Groups_Group_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Synchronize is set, it can
// safely use t.GetSynchronize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Synchronize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) GetSynchronize() E_NokiaConf_Configure_Groups_Group_Redundancy_Synchronize {
	if t == nil || t.Synchronize == 0 {
		return 0
	}
	return t.Synchronize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CertSync == nil {
		var v bool = true
		t.CertSync = &v
	}
	t.BgpEvpn.PopulateDefaults()
	t.BgpMh.PopulateDefaults()
	t.MgmtEthernet.PopulateDefaults()
	t.MultiChassis.PopulateDefaults()
	t.Srrp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy.
func (*NokiaConf_Configure_Groups_Group_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn represents the /nokia-conf/configure/groups/group/redundancy/bgp-evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn struct {
	EthernetSegment *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment `path:"ethernet-segment" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) IsYANGGoStruct() {}

// GetOrCreateEthernetSegment retrieves the value of the EthernetSegment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) GetOrCreateEthernetSegment() *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment {
	if t.EthernetSegment != nil {
		return t.EthernetSegment
	}
	t.EthernetSegment = &NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment{}
	return t.EthernetSegment
}

// GetEthernetSegment returns the value of the EthernetSegment struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn. If the receiver or the field EthernetSegment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) GetEthernetSegment() *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment {
	if t != nil && t.EthernetSegment != nil {
		return t.EthernetSegment
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthernetSegment.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment represents the /nokia-conf/configure/groups/group/redundancy/bgp-evpn/ethernet-segment YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment struct {
	ActivationTimer *uint32 `path:"activation-timer" module:"nokia-conf"`
	BootTimer       *uint32 `path:"boot-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) GetActivationTimer() uint32 {
	if t == nil || t.ActivationTimer == nil {
		return 3
	}
	return *t.ActivationTimer
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) GetBootTimer() uint32 {
	if t == nil || t.BootTimer == nil {
		return 10
	}
	return *t.BootTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActivationTimer == nil {
		var v uint32 = 3
		t.ActivationTimer = &v
	}
	if t.BootTimer == nil {
		var v uint32 = 10
		t.BootTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpEvpn_EthernetSegment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_BgpMh represents the /nokia-conf/configure/groups/group/redundancy/bgp-mh YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_BgpMh struct {
	Site *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site `path:"site" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_BgpMh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) IsYANGGoStruct() {}

// GetOrCreateSite retrieves the value of the Site field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) GetOrCreateSite() *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site {
	if t.Site != nil {
		return t.Site
	}
	t.Site = &NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site{}
	return t.Site
}

// GetSite returns the value of the Site struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_BgpMh. If the receiver or the field Site is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) GetSite() *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site {
	if t != nil && t.Site != nil {
		return t.Site
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_BgpMh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Site.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_BgpMh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_BgpMh.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpMh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site represents the /nokia-conf/configure/groups/group/redundancy/bgp-mh/site YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site struct {
	ActivationTimer *int32 `path:"activation-timer" module:"nokia-conf"`
	BootTimer       *int32 `path:"boot-timer" module:"nokia-conf"`
	MinDownTimer    *int32 `path:"min-down-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) GetActivationTimer() int32 {
	if t == nil || t.ActivationTimer == nil {
		return 2
	}
	return *t.ActivationTimer
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) GetBootTimer() int32 {
	if t == nil || t.BootTimer == nil {
		return 10
	}
	return *t.BootTimer
}

// GetMinDownTimer retrieves the value of the leaf MinDownTimer from the NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDownTimer is set, it can
// safely use t.GetMinDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) GetMinDownTimer() int32 {
	if t == nil || t.MinDownTimer == nil {
		return 0
	}
	return *t.MinDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActivationTimer == nil {
		var v int32 = 2
		t.ActivationTimer = &v
	}
	if t.BootTimer == nil {
		var v int32 = 10
		t.BootTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site.
func (*NokiaConf_Configure_Groups_Group_Redundancy_BgpMh_Site) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet represents the /nokia-conf/configure/groups/group/redundancy/mgmt-ethernet YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet struct {
	Revert *uint32 `path:"revert" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet) IsYANGGoStruct() {}

// GetRevert retrieves the value of the leaf Revert from the NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Revert is set, it can
// safely use t.GetRevert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Revert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet) GetRevert() uint32 {
	if t == nil || t.Revert == nil {
		return 5
	}
	return *t.Revert
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Revert == nil {
		var v uint32 = 5
		t.Revert = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MgmtEthernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis struct {
	Options *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options         `path:"options" module:"nokia-conf"`
	Peer    map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer `path:"peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) NewPeer(IpAddress string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) GetPeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) AppendPeer(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) GetOptions() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Options.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options struct {
	SubMgmt *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt `path:"sub-mgmt" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) IsYANGGoStruct() {}

// GetOrCreateSubMgmt retrieves the value of the SubMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) GetOrCreateSubMgmt() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt {
	if t.SubMgmt != nil {
		return t.SubMgmt
	}
	t.SubMgmt = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt{}
	return t.SubMgmt
}

// GetSubMgmt returns the value of the SubMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options. If the receiver or the field SubMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) GetSubMgmt() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt {
	if t != nil && t.SubMgmt != nil {
		return t.SubMgmt
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SubMgmt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/options/sub-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt struct {
	DhcpLeasetimeThreshold *uint32 `path:"dhcp-leasetime-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt) IsYANGGoStruct() {}

// GetDhcpLeasetimeThreshold retrieves the value of the leaf DhcpLeasetimeThreshold from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpLeasetimeThreshold is set, it can
// safely use t.GetDhcpLeasetimeThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpLeasetimeThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt) GetDhcpLeasetimeThreshold() uint32 {
	if t == nil || t.DhcpLeasetimeThreshold == nil {
		return 0
	}
	return *t.DhcpLeasetimeThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Options_SubMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer struct {
	AdminState        E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey *string                                                                `path:"authentication-key" module:"nokia-conf"`
	Description       *string                                                                `path:"description" module:"nokia-conf"`
	IpAddress         *string                                                                `path:"ip-address" module:"nokia-conf"`
	McIpsec           *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec `path:"mc-ipsec" module:"nokia-conf" yangPresence:"true"`
	McLag             *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag   `path:"mc-lag" module:"nokia-conf" yangPresence:"true"`
	McRing            *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing  `path:"mc-ring" module:"nokia-conf" yangPresence:"true"`
	PeerName          *string                                                                `path:"peer-name" module:"nokia-conf"`
	SourceAddress     *string                                                                `path:"source-address" module:"nokia-conf"`
	Sync              *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync    `path:"sync" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) IsYANGGoStruct() {}

// GetOrCreateMcIpsec retrieves the value of the McIpsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetOrCreateMcIpsec() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec {
	if t.McIpsec != nil {
		return t.McIpsec
	}
	t.McIpsec = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec{}
	return t.McIpsec
}

// GetOrCreateMcLag retrieves the value of the McLag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetOrCreateMcLag() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag {
	if t.McLag != nil {
		return t.McLag
	}
	t.McLag = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag{}
	return t.McLag
}

// GetOrCreateMcRing retrieves the value of the McRing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetOrCreateMcRing() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing {
	if t.McRing != nil {
		return t.McRing
	}
	t.McRing = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing{}
	return t.McRing
}

// GetOrCreateSync retrieves the value of the Sync field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetOrCreateSync() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync {
	if t.Sync != nil {
		return t.Sync
	}
	t.Sync = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync{}
	return t.Sync
}

// GetMcIpsec returns the value of the McIpsec struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer. If the receiver or the field McIpsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetMcIpsec() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec {
	if t != nil && t.McIpsec != nil {
		return t.McIpsec
	}
	return nil
}

// GetMcLag returns the value of the McLag struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer. If the receiver or the field McLag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetMcLag() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag {
	if t != nil && t.McLag != nil {
		return t.McLag
	}
	return nil
}

// GetMcRing returns the value of the McRing struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer. If the receiver or the field McRing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetMcRing() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing {
	if t != nil && t.McRing != nil {
		return t.McRing
	}
	return nil
}

// GetSync returns the value of the Sync struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer. If the receiver or the field Sync is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetSync() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync {
	if t != nil && t.Sync != nil {
		return t.Sync
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPeerName retrieves the value of the leaf PeerName from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerName is set, it can
// safely use t.GetPeerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetPeerName() string {
	if t == nil || t.PeerName == nil {
		return ""
	}
	return *t.PeerName
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.McIpsec.PopulateDefaults()
	t.McLag.PopulateDefaults()
	t.McRing.PopulateDefaults()
	t.Sync.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ipsec YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec struct {
	BfdLiveness           *bool                                                                                                                                                                                        `path:"bfd-liveness" module:"nokia-conf"`
	DiscoveryInterval     *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval                                                                                                     `path:"discovery-interval" module:"nokia-conf"`
	HoldOnNeighborFailure *uint32                                                                                                                                                                                      `path:"hold-on-neighbor-failure" module:"nokia-conf"`
	KeepAliveInterval     *uint32                                                                                                                                                                                      `path:"keep-alive-interval" module:"nokia-conf"`
	TunnelGroup           map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup `path:"tunnel-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) IsYANGGoStruct() {}

// NewTunnelGroup creates a new entry in the TunnelGroup list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) NewTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup)
	}

	key := TunnelGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelGroup", key)
	}

	t.TunnelGroup[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup{
		TunnelGroupId: TunnelGroupId,
	}

	return t.TunnelGroup[key], nil
}

// RenameTunnelGroup renames an entry in the list TunnelGroup within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) RenameTunnelGroup(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union) error {
	if _, ok := t.TunnelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelGroup", newK)
	}

	e, ok := t.TunnelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelGroup", oldK)
	}
	e.TunnelGroupId = newK

	t.TunnelGroup[newK] = e
	delete(t.TunnelGroup, oldK)
	return nil
}

// GetOrCreateTunnelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) GetOrCreateTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup {

	key := TunnelGroupId

	if v, ok := t.TunnelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelGroup(TunnelGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelGroup got unexpected error: %v", err))
	}
	return v
}

// GetTunnelGroup retrieves the value with the specified key from
// the TunnelGroup map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) GetTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup {

	if t == nil {
		return nil
	}

	key := TunnelGroupId

	if lm, ok := t.TunnelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) DeleteTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union) {
	key := TunnelGroupId

	delete(t.TunnelGroup, key)
}

// AppendTunnelGroup appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup struct to the
// list TunnelGroup of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) AppendTunnelGroup(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) error {
	key := v.TunnelGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup)
	}

	if _, ok := t.TunnelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelGroup %v", key)
	}

	t.TunnelGroup[key] = v
	return nil
}

// GetOrCreateDiscoveryInterval retrieves the value of the DiscoveryInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) GetOrCreateDiscoveryInterval() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval {
	if t.DiscoveryInterval != nil {
		return t.DiscoveryInterval
	}
	t.DiscoveryInterval = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval{}
	return t.DiscoveryInterval
}

// GetDiscoveryInterval returns the value of the DiscoveryInterval struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec. If the receiver or the field DiscoveryInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) GetDiscoveryInterval() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval {
	if t != nil && t.DiscoveryInterval != nil {
		return t.DiscoveryInterval
	}
	return nil
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetHoldOnNeighborFailure retrieves the value of the leaf HoldOnNeighborFailure from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldOnNeighborFailure is set, it can
// safely use t.GetHoldOnNeighborFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldOnNeighborFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) GetHoldOnNeighborFailure() uint32 {
	if t == nil || t.HoldOnNeighborFailure == nil {
		return 3
	}
	return *t.HoldOnNeighborFailure
}

// GetKeepAliveInterval retrieves the value of the leaf KeepAliveInterval from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAliveInterval is set, it can
// safely use t.GetKeepAliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAliveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) GetKeepAliveInterval() uint32 {
	if t == nil || t.KeepAliveInterval == nil {
		return 10
	}
	return *t.KeepAliveInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.HoldOnNeighborFailure == nil {
		var v uint32 = 3
		t.HoldOnNeighborFailure = &v
	}
	if t.KeepAliveInterval == nil {
		var v uint32 = 10
		t.KeepAliveInterval = &v
	}
	t.DiscoveryInterval.PopulateDefaults()
	for _, e := range t.TunnelGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ipsec/discovery-interval YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval struct {
	Boot         *uint32 `path:"boot" module:"nokia-conf"`
	IntervalSecs *uint32 `path:"interval-secs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) IsYANGGoStruct() {
}

// GetBoot retrieves the value of the leaf Boot from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Boot is set, it can
// safely use t.GetBoot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Boot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) GetBoot() uint32 {
	if t == nil || t.Boot == nil {
		return 300
	}
	return *t.Boot
}

// GetIntervalSecs retrieves the value of the leaf IntervalSecs from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntervalSecs is set, it can
// safely use t.GetIntervalSecs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntervalSecs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) GetIntervalSecs() uint32 {
	if t == nil || t.IntervalSecs == nil {
		return 300
	}
	return *t.IntervalSecs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Boot == nil {
		var v uint32 = 300
		t.Boot = &v
	}
	if t.IntervalSecs == nil {
		var v uint32 = 300
		t.IntervalSecs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_DiscoveryInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ipsec/tunnel-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                           `path:"admin-state" module:"nokia-conf"`
	PeerGroup     *uint32                                                                                               `path:"peer-group" module:"nokia-conf"`
	Priority      *uint32                                                                                               `path:"priority" module:"nokia-conf"`
	TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union `path:"tunnel-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetPeerGroup() uint32 {
	if t == nil || t.PeerGroup == nil {
		return 0
	}
	return *t.PeerGroup
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetTunnelGroupId retrieves the value of the leaf TunnelGroupId from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupId is set, it can
// safely use t.GetTunnelGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) GetTunnelGroupId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup_TunnelGroupId_Union {
	if t == nil || t.TunnelGroupId == nil {
		return nil
	}
	return t.TunnelGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Priority == nil {
		var v uint32 = 100
		t.Priority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tunnel-group-id": t.TunnelGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McIpsec_TunnelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag struct {
	AdminState            E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	HoldOnNeighborFailure *uint32                                                                             `path:"hold-on-neighbor-failure" module:"nokia-conf"`
	KeepAliveInterval     *uint32                                                                             `path:"keep-alive-interval" module:"nokia-conf"`
	Lag                   map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag `path:"lag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) IsYANGGoStruct() {}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) NewLag(LagName string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) GetOrCreateLag(LagName string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) GetLag(LagName string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag struct to the
// list Lag of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) AppendLag(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldOnNeighborFailure retrieves the value of the leaf HoldOnNeighborFailure from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldOnNeighborFailure is set, it can
// safely use t.GetHoldOnNeighborFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldOnNeighborFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) GetHoldOnNeighborFailure() uint32 {
	if t == nil || t.HoldOnNeighborFailure == nil {
		return 3
	}
	return *t.HoldOnNeighborFailure
}

// GetKeepAliveInterval retrieves the value of the leaf KeepAliveInterval from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAliveInterval is set, it can
// safely use t.GetKeepAliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAliveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) GetKeepAliveInterval() uint32 {
	if t == nil || t.KeepAliveInterval == nil {
		return 10
	}
	return *t.KeepAliveInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldOnNeighborFailure == nil {
		var v uint32 = 3
		t.HoldOnNeighborFailure = &v
	}
	if t.KeepAliveInterval == nil {
		var v uint32 = 10
		t.KeepAliveInterval = &v
	}
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-lag/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag struct {
	LacpKey        *uint32                                                                                     `path:"lacp-key" module:"nokia-conf"`
	LagName        *string                                                                                     `path:"lag-name" module:"nokia-conf"`
	RemoteLag      *string                                                                                     `path:"remote-lag" module:"nokia-conf"`
	SourceBmacLsb  NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag_SourceBmacLsb_Union `path:"source-bmac-lsb" module:"nokia-conf"`
	SystemId       *string                                                                                     `path:"system-id" module:"nokia-conf"`
	SystemPriority *int32                                                                                      `path:"system-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) IsYANGGoStruct() {}

// GetLacpKey retrieves the value of the leaf LacpKey from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpKey is set, it can
// safely use t.GetLacpKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) GetLacpKey() uint32 {
	if t == nil || t.LacpKey == nil {
		return 0
	}
	return *t.LacpKey
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// GetRemoteLag retrieves the value of the leaf RemoteLag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteLag is set, it can
// safely use t.GetRemoteLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteLag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) GetRemoteLag() string {
	if t == nil || t.RemoteLag == nil {
		return ""
	}
	return *t.RemoteLag
}

// GetSourceBmacLsb retrieves the value of the leaf SourceBmacLsb from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceBmacLsb is set, it can
// safely use t.GetSourceBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) GetSourceBmacLsb() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag_SourceBmacLsb_Union {
	if t == nil || t.SourceBmacLsb == nil {
		return nil
	}
	return t.SourceBmacLsb
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemPriority is set, it can
// safely use t.GetSystemPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) GetSystemPriority() int32 {
	if t == nil || t.SystemPriority == nil {
		return 0
	}
	return *t.SystemPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McLag_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing struct {
	Ring map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring `path:"ring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) IsYANGGoStruct() {}

// NewRing creates a new entry in the Ring list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) NewRing(SyncTag string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ring == nil {
		t.Ring = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring)
	}

	key := SyncTag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ring[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ring", key)
	}

	t.Ring[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring{
		SyncTag: &SyncTag,
	}

	return t.Ring[key], nil
}

// RenameRing renames an entry in the list Ring within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) RenameRing(oldK, newK string) error {
	if _, ok := t.Ring[newK]; ok {
		return fmt.Errorf("key %v already exists in Ring", newK)
	}

	e, ok := t.Ring[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ring", oldK)
	}
	e.SyncTag = &newK

	t.Ring[newK] = e
	delete(t.Ring, oldK)
	return nil
}

// GetOrCreateRing retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) GetOrCreateRing(SyncTag string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring {

	key := SyncTag

	if v, ok := t.Ring[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRing(SyncTag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRing got unexpected error: %v", err))
	}
	return v
}

// GetRing retrieves the value with the specified key from
// the Ring map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) GetRing(SyncTag string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring {

	if t == nil {
		return nil
	}

	key := SyncTag

	if lm, ok := t.Ring[key]; ok {
		return lm
	}
	return nil
}

// DeleteRing deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) DeleteRing(SyncTag string) {
	key := SyncTag

	delete(t.Ring, key)
}

// AppendRing appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring struct to the
// list Ring of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) AppendRing(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) error {
	if v.SyncTag == nil {
		return fmt.Errorf("invalid nil key received for SyncTag")
	}

	key := *v.SyncTag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ring == nil {
		t.Ring = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring)
	}

	if _, ok := t.Ring[key]; ok {
		return fmt.Errorf("duplicate key for list Ring %v", key)
	}

	t.Ring[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ring {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                                                                                                                 `path:"admin-state" module:"nokia-conf"`
	InBandControlPath *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath                                                                                                `path:"in-band-control-path" module:"nokia-conf"`
	PathB             *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB                                                                                                            `path:"path-b" module:"nokia-conf" yangPresence:"true"`
	PathExcl          *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl                                                                                                         `path:"path-excl" module:"nokia-conf" yangPresence:"true"`
	RingNode          map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode                                                                                              `path:"ring-node" module:"nokia-conf"`
	SrrpInstance      map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance `path:"srrp-instance" module:"nokia-conf"`
	SyncTag           *string                                                                                                                                                                                     `path:"sync-tag" module:"nokia-conf"`
	Type              E_NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_Type                                                                                                            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) IsYANGGoStruct() {}

// NewRingNode creates a new entry in the RingNode list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) NewRingNode(Name string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RingNode == nil {
		t.RingNode = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RingNode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RingNode", key)
	}

	t.RingNode[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode{
		Name: &Name,
	}

	return t.RingNode[key], nil
}

// RenameRingNode renames an entry in the list RingNode within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) RenameRingNode(oldK, newK string) error {
	if _, ok := t.RingNode[newK]; ok {
		return fmt.Errorf("key %v already exists in RingNode", newK)
	}

	e, ok := t.RingNode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RingNode", oldK)
	}
	e.Name = &newK

	t.RingNode[newK] = e
	delete(t.RingNode, oldK)
	return nil
}

// GetOrCreateRingNode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreateRingNode(Name string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode {

	key := Name

	if v, ok := t.RingNode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRingNode(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRingNode got unexpected error: %v", err))
	}
	return v
}

// GetRingNode retrieves the value with the specified key from
// the RingNode map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetRingNode(Name string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RingNode[key]; ok {
		return lm
	}
	return nil
}

// DeleteRingNode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) DeleteRingNode(Name string) {
	key := Name

	delete(t.RingNode, key)
}

// AppendRingNode appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode struct to the
// list RingNode of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) AppendRingNode(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RingNode == nil {
		t.RingNode = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode)
	}

	if _, ok := t.RingNode[key]; ok {
		return fmt.Errorf("duplicate key for list RingNode %v", key)
	}

	t.RingNode[key] = v
	return nil
}

// NewSrrpInstance creates a new entry in the SrrpInstance list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) NewSrrpInstance(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrrpInstance == nil {
		t.SrrpInstance = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrrpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrrpInstance", key)
	}

	t.SrrpInstance[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance{
		Id: Id,
	}

	return t.SrrpInstance[key], nil
}

// RenameSrrpInstance renames an entry in the list SrrpInstance within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) RenameSrrpInstance(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union) error {
	if _, ok := t.SrrpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in SrrpInstance", newK)
	}

	e, ok := t.SrrpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrrpInstance", oldK)
	}
	e.Id = newK

	t.SrrpInstance[newK] = e
	delete(t.SrrpInstance, oldK)
	return nil
}

// GetOrCreateSrrpInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreateSrrpInstance(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance {

	key := Id

	if v, ok := t.SrrpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrrpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrrpInstance got unexpected error: %v", err))
	}
	return v
}

// GetSrrpInstance retrieves the value with the specified key from
// the SrrpInstance map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetSrrpInstance(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.SrrpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrrpInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) DeleteSrrpInstance(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union) {
	key := Id

	delete(t.SrrpInstance, key)
}

// AppendSrrpInstance appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance struct to the
// list SrrpInstance of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) AppendSrrpInstance(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrrpInstance == nil {
		t.SrrpInstance = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance)
	}

	if _, ok := t.SrrpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list SrrpInstance %v", key)
	}

	t.SrrpInstance[key] = v
	return nil
}

// GetOrCreateInBandControlPath retrieves the value of the InBandControlPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreateInBandControlPath() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath {
	if t.InBandControlPath != nil {
		return t.InBandControlPath
	}
	t.InBandControlPath = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath{}
	return t.InBandControlPath
}

// GetOrCreatePathB retrieves the value of the PathB field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreatePathB() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB {
	if t.PathB != nil {
		return t.PathB
	}
	t.PathB = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB{}
	return t.PathB
}

// GetOrCreatePathExcl retrieves the value of the PathExcl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetOrCreatePathExcl() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl {
	if t.PathExcl != nil {
		return t.PathExcl
	}
	t.PathExcl = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl{}
	return t.PathExcl
}

// GetInBandControlPath returns the value of the InBandControlPath struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver or the field InBandControlPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetInBandControlPath() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath {
	if t != nil && t.InBandControlPath != nil {
		return t.InBandControlPath
	}
	return nil
}

// GetPathB returns the value of the PathB struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver or the field PathB is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetPathB() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB {
	if t != nil && t.PathB != nil {
		return t.PathB
	}
	return nil
}

// GetPathExcl returns the value of the PathExcl struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring. If the receiver or the field PathExcl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetPathExcl() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl {
	if t != nil && t.PathExcl != nil {
		return t.PathExcl
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) GetType() E_NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.InBandControlPath.PopulateDefaults()
	t.PathB.PopulateDefaults()
	t.PathExcl.PopulateDefaults()
	for _, e := range t.RingNode {
		e.PopulateDefaults()
	}
	for _, e := range t.SrrpInstance {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SyncTag == nil {
		return nil, fmt.Errorf("nil value for key SyncTag")
	}

	return map[string]interface{}{
		"sync-tag": *t.SyncTag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/in-band-control-path YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath struct {
	Debounce        *bool   `path:"debounce" module:"nokia-conf"`
	DstIp           *string `path:"dst-ip" module:"nokia-conf"`
	Interface       *string `path:"interface" module:"nokia-conf"`
	MaxDebounceTime *uint32 `path:"max-debounce-time" module:"nokia-conf"`
	ServiceName     *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) IsYANGGoStruct() {
}

// GetDebounce retrieves the value of the leaf Debounce from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debounce is set, it can
// safely use t.GetDebounce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debounce == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetDebounce() bool {
	if t == nil || t.Debounce == nil {
		return true
	}
	return *t.Debounce
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetMaxDebounceTime retrieves the value of the leaf MaxDebounceTime from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDebounceTime is set, it can
// safely use t.GetMaxDebounceTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDebounceTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetMaxDebounceTime() uint32 {
	if t == nil || t.MaxDebounceTime == nil {
		return 10
	}
	return *t.MaxDebounceTime
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Debounce == nil {
		var v bool = true
		t.Debounce = &v
	}
	if t.MaxDebounceTime == nil {
		var v uint32 = 10
		t.MaxDebounceTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_InBandControlPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/path-b YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB struct {
	Range        map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range `path:"range" module:"nokia-conf"`
	WildcardSaps *bool                                                                                                                                                                                `path:"wildcard-saps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/path-b.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key struct {
	Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_End_Union   `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) NewRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_End_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range)
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range{
		Start: Start,
		End:   End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetOrCreateRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_End_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range {

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_End_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) DeleteRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_End_Union) {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) AppendRange(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) error {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetWildcardSaps retrieves the value of the leaf WildcardSaps from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WildcardSaps is set, it can
// safely use t.GetWildcardSaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WildcardSaps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) GetWildcardSaps() bool {
	if t == nil || t.WildcardSaps == nil {
		return false
	}
	return *t.WildcardSaps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WildcardSaps == nil {
		var v bool = false
		t.WildcardSaps = &v
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/path-b/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range struct {
	End   NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) GetEnd() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) GetStart() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathB_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/path-excl YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl struct {
	Range        map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range `path:"range" module:"nokia-conf"`
	WildcardSaps *bool                                                                                                                                                                                      `path:"wildcard-saps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/path-excl.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key struct {
	Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_End_Union   `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) NewRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_End_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range)
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range{
		Start: Start,
		End:   End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetOrCreateRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_End_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range {

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_End_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) DeleteRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_End_Union) {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) AppendRange(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) error {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetWildcardSaps retrieves the value of the leaf WildcardSaps from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WildcardSaps is set, it can
// safely use t.GetWildcardSaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WildcardSaps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) GetWildcardSaps() bool {
	if t == nil || t.WildcardSaps == nil {
		return false
	}
	return *t.WildcardSaps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WildcardSaps == nil {
		var v bool = false
		t.WildcardSaps = &v
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/path-excl/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range struct {
	End   NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) GetEnd() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) GetStart() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_PathExcl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/ring-node YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode struct {
	AdminState  E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	DstIp       *string                                                                                         `path:"dst-ip" module:"nokia-conf"`
	Interval    *uint32                                                                                         `path:"interval" module:"nokia-conf"`
	Name        *string                                                                                         `path:"name" module:"nokia-conf"`
	ServiceName *string                                                                                         `path:"service-name" module:"nokia-conf"`
	SrcIp       *string                                                                                         `path:"src-ip" module:"nokia-conf"`
	SrcMac      NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Union `path:"src-mac" module:"nokia-conf"`
	Vlan        *string                                                                                         `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDstIp retrieves the value of the leaf DstIp from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 5
	}
	return *t.Interval
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetSrcIp retrieves the value of the leaf SrcIp from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIp is set, it can
// safely use t.GetSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetSrcIp() string {
	if t == nil || t.SrcIp == nil {
		return ""
	}
	return *t.SrcIp
}

// GetSrcMac retrieves the value of the leaf SrcMac from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcMac is set, it can
// safely use t.GetSrcMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetSrcMac() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Union {
	if t == nil || t.SrcMac == nil {
		return NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Enum_system_mac_address
	}
	return t.SrcMac
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) GetVlan() string {
	if t == nil || t.Vlan == nil {
		return ""
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interval == nil {
		var v uint32 = 5
		t.Interval = &v
	}
	if t.SrcMac == nil {
		t.SrcMac = NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode_SrcMac_Enum_system_mac_address
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_RingNode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/mc-ring/ring/srrp-instance YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance struct {
	Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) GetId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_McRing_Ring_SrrpInstance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync struct {
	AdminState          E_NokiaTypesSros_AdminState                                                                                                                                                            `path:"admin-state" module:"nokia-conf"`
	DiameterNode        *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode                                                                                                       `path:"diameter-node" module:"nokia-conf" yangPresence:"true"`
	DiameterProxy       *bool                                                                                                                                                                                  `path:"diameter-proxy" module:"nokia-conf"`
	Igmp                *bool                                                                                                                                                                                  `path:"igmp" module:"nokia-conf"`
	IgmpSnooping        *bool                                                                                                                                                                                  `path:"igmp-snooping" module:"nokia-conf"`
	Ipsec               *bool                                                                                                                                                                                  `path:"ipsec" module:"nokia-conf"`
	L2Tp                *bool                                                                                                                                                                                  `path:"l2tp" module:"nokia-conf"`
	LocalDhcpServer     *bool                                                                                                                                                                                  `path:"local-dhcp-server" module:"nokia-conf"`
	McRing              *bool                                                                                                                                                                                  `path:"mc-ring" module:"nokia-conf"`
	Mld                 *bool                                                                                                                                                                                  `path:"mld" module:"nokia-conf"`
	MldSnooping         *bool                                                                                                                                                                                  `path:"mld-snooping" module:"nokia-conf"`
	Nat                 *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat                                                                                                                `path:"nat" module:"nokia-conf" yangPresence:"true"`
	PimSnooping         *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping                                                                                                        `path:"pim-snooping" module:"nokia-conf"`
	Python              *bool                                                                                                                                                                                  `path:"python" module:"nokia-conf"`
	Srrp                *bool                                                                                                                                                                                  `path:"srrp" module:"nokia-conf"`
	SubHostTrk          *bool                                                                                                                                                                                  `path:"sub-host-trk" module:"nokia-conf"`
	SubMgmt             *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt                                                                                                            `path:"sub-mgmt" module:"nokia-conf"`
	Tags                *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags                                                                                                               `path:"tags" module:"nokia-conf"`
	TrackSrrp           map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp                `path:"track-srrp" module:"nokia-conf"`
	TransportEncryption *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption                                                                                                `path:"transport-encryption" module:"nokia-conf"`
	TunnelGroup         map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup `path:"tunnel-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) IsYANGGoStruct() {}

// NewTrackSrrp creates a new entry in the TrackSrrp list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) NewTrackSrrp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrackSrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrackSrrp", key)
	}

	t.TrackSrrp[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp{
		Id: Id,
	}

	return t.TrackSrrp[key], nil
}

// RenameTrackSrrp renames an entry in the list TrackSrrp within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) RenameTrackSrrp(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union) error {
	if _, ok := t.TrackSrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in TrackSrrp", newK)
	}

	e, ok := t.TrackSrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrackSrrp", oldK)
	}
	e.Id = newK

	t.TrackSrrp[newK] = e
	delete(t.TrackSrrp, oldK)
	return nil
}

// GetOrCreateTrackSrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTrackSrrp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp {

	key := Id

	if v, ok := t.TrackSrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrackSrrp(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrackSrrp got unexpected error: %v", err))
	}
	return v
}

// GetTrackSrrp retrieves the value with the specified key from
// the TrackSrrp map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetTrackSrrp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.TrackSrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrackSrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) DeleteTrackSrrp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union) {
	key := Id

	delete(t.TrackSrrp, key)
}

// AppendTrackSrrp appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp struct to the
// list TrackSrrp of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) AppendTrackSrrp(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp)
	}

	if _, ok := t.TrackSrrp[key]; ok {
		return fmt.Errorf("duplicate key for list TrackSrrp %v", key)
	}

	t.TrackSrrp[key] = v
	return nil
}

// NewTunnelGroup creates a new entry in the TunnelGroup list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) NewTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup)
	}

	key := TunnelGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelGroup", key)
	}

	t.TunnelGroup[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup{
		TunnelGroupId: TunnelGroupId,
	}

	return t.TunnelGroup[key], nil
}

// RenameTunnelGroup renames an entry in the list TunnelGroup within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) RenameTunnelGroup(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union) error {
	if _, ok := t.TunnelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelGroup", newK)
	}

	e, ok := t.TunnelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelGroup", oldK)
	}
	e.TunnelGroupId = newK

	t.TunnelGroup[newK] = e
	delete(t.TunnelGroup, oldK)
	return nil
}

// GetOrCreateTunnelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup {

	key := TunnelGroupId

	if v, ok := t.TunnelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelGroup(TunnelGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelGroup got unexpected error: %v", err))
	}
	return v
}

// GetTunnelGroup retrieves the value with the specified key from
// the TunnelGroup map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup {

	if t == nil {
		return nil
	}

	key := TunnelGroupId

	if lm, ok := t.TunnelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) DeleteTunnelGroup(TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union) {
	key := TunnelGroupId

	delete(t.TunnelGroup, key)
}

// AppendTunnelGroup appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup struct to the
// list TunnelGroup of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) AppendTunnelGroup(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) error {
	key := v.TunnelGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup)
	}

	if _, ok := t.TunnelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelGroup %v", key)
	}

	t.TunnelGroup[key] = v
	return nil
}

// GetOrCreateDiameterNode retrieves the value of the DiameterNode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreateDiameterNode() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode {
	if t.DiameterNode != nil {
		return t.DiameterNode
	}
	t.DiameterNode = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode{}
	return t.DiameterNode
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreateNat() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat{}
	return t.Nat
}

// GetOrCreatePimSnooping retrieves the value of the PimSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreatePimSnooping() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping {
	if t.PimSnooping != nil {
		return t.PimSnooping
	}
	t.PimSnooping = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping{}
	return t.PimSnooping
}

// GetOrCreateSubMgmt retrieves the value of the SubMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreateSubMgmt() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt {
	if t.SubMgmt != nil {
		return t.SubMgmt
	}
	t.SubMgmt = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt{}
	return t.SubMgmt
}

// GetOrCreateTags retrieves the value of the Tags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTags() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags {
	if t.Tags != nil {
		return t.Tags
	}
	t.Tags = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags{}
	return t.Tags
}

// GetOrCreateTransportEncryption retrieves the value of the TransportEncryption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetOrCreateTransportEncryption() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption {
	if t.TransportEncryption != nil {
		return t.TransportEncryption
	}
	t.TransportEncryption = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption{}
	return t.TransportEncryption
}

// GetDiameterNode returns the value of the DiameterNode struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field DiameterNode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetDiameterNode() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode {
	if t != nil && t.DiameterNode != nil {
		return t.DiameterNode
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetNat() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetPimSnooping returns the value of the PimSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field PimSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetPimSnooping() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping {
	if t != nil && t.PimSnooping != nil {
		return t.PimSnooping
	}
	return nil
}

// GetSubMgmt returns the value of the SubMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field SubMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetSubMgmt() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt {
	if t != nil && t.SubMgmt != nil {
		return t.SubMgmt
	}
	return nil
}

// GetTags returns the value of the Tags struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field Tags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetTags() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags {
	if t != nil && t.Tags != nil {
		return t.Tags
	}
	return nil
}

// GetTransportEncryption returns the value of the TransportEncryption struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync. If the receiver or the field TransportEncryption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetTransportEncryption() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption {
	if t != nil && t.TransportEncryption != nil {
		return t.TransportEncryption
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDiameterProxy retrieves the value of the leaf DiameterProxy from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiameterProxy is set, it can
// safely use t.GetDiameterProxy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiameterProxy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetDiameterProxy() bool {
	if t == nil || t.DiameterProxy == nil {
		return false
	}
	return *t.DiameterProxy
}

// GetIgmp retrieves the value of the leaf Igmp from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Igmp is set, it can
// safely use t.GetIgmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Igmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetIgmp() bool {
	if t == nil || t.Igmp == nil {
		return false
	}
	return *t.Igmp
}

// GetIgmpSnooping retrieves the value of the leaf IgmpSnooping from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgmpSnooping is set, it can
// safely use t.GetIgmpSnooping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgmpSnooping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetIgmpSnooping() bool {
	if t == nil || t.IgmpSnooping == nil {
		return false
	}
	return *t.IgmpSnooping
}

// GetIpsec retrieves the value of the leaf Ipsec from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipsec is set, it can
// safely use t.GetIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetIpsec() bool {
	if t == nil || t.Ipsec == nil {
		return false
	}
	return *t.Ipsec
}

// GetL2Tp retrieves the value of the leaf L2Tp from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Tp is set, it can
// safely use t.GetL2Tp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Tp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetL2Tp() bool {
	if t == nil || t.L2Tp == nil {
		return false
	}
	return *t.L2Tp
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetLocalDhcpServer() bool {
	if t == nil || t.LocalDhcpServer == nil {
		return false
	}
	return *t.LocalDhcpServer
}

// GetMcRing retrieves the value of the leaf McRing from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McRing is set, it can
// safely use t.GetMcRing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McRing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetMcRing() bool {
	if t == nil || t.McRing == nil {
		return false
	}
	return *t.McRing
}

// GetMld retrieves the value of the leaf Mld from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mld is set, it can
// safely use t.GetMld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetMld() bool {
	if t == nil || t.Mld == nil {
		return false
	}
	return *t.Mld
}

// GetMldSnooping retrieves the value of the leaf MldSnooping from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MldSnooping is set, it can
// safely use t.GetMldSnooping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MldSnooping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetMldSnooping() bool {
	if t == nil || t.MldSnooping == nil {
		return false
	}
	return *t.MldSnooping
}

// GetPython retrieves the value of the leaf Python from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Python is set, it can
// safely use t.GetPython() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Python == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetPython() bool {
	if t == nil || t.Python == nil {
		return false
	}
	return *t.Python
}

// GetSrrp retrieves the value of the leaf Srrp from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srrp is set, it can
// safely use t.GetSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetSrrp() bool {
	if t == nil || t.Srrp == nil {
		return false
	}
	return *t.Srrp
}

// GetSubHostTrk retrieves the value of the leaf SubHostTrk from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostTrk is set, it can
// safely use t.GetSubHostTrk() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostTrk == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) GetSubHostTrk() bool {
	if t == nil || t.SubHostTrk == nil {
		return false
	}
	return *t.SubHostTrk
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DiameterProxy == nil {
		var v bool = false
		t.DiameterProxy = &v
	}
	if t.Igmp == nil {
		var v bool = false
		t.Igmp = &v
	}
	if t.IgmpSnooping == nil {
		var v bool = false
		t.IgmpSnooping = &v
	}
	if t.Ipsec == nil {
		var v bool = false
		t.Ipsec = &v
	}
	if t.L2Tp == nil {
		var v bool = false
		t.L2Tp = &v
	}
	if t.LocalDhcpServer == nil {
		var v bool = false
		t.LocalDhcpServer = &v
	}
	if t.McRing == nil {
		var v bool = false
		t.McRing = &v
	}
	if t.Mld == nil {
		var v bool = false
		t.Mld = &v
	}
	if t.MldSnooping == nil {
		var v bool = false
		t.MldSnooping = &v
	}
	if t.Python == nil {
		var v bool = false
		t.Python = &v
	}
	if t.Srrp == nil {
		var v bool = false
		t.Srrp = &v
	}
	if t.SubHostTrk == nil {
		var v bool = false
		t.SubHostTrk = &v
	}
	t.DiameterNode.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.PimSnooping.PopulateDefaults()
	t.SubMgmt.PopulateDefaults()
	t.Tags.PopulateDefaults()
	t.TransportEncryption.PopulateDefaults()
	for _, e := range t.TrackSrrp {
		e.PopulateDefaults()
	}
	for _, e := range t.TunnelGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/diameter-node YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode struct {
	Node map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node `path:"node" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) IsYANGGoStruct() {
}

// NewNode creates a new entry in the Node list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) NewNode(HostName string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node)
	}

	key := HostName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Node[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Node", key)
	}

	t.Node[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node{
		HostName: &HostName,
	}

	return t.Node[key], nil
}

// RenameNode renames an entry in the list Node within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) RenameNode(oldK, newK string) error {
	if _, ok := t.Node[newK]; ok {
		return fmt.Errorf("key %v already exists in Node", newK)
	}

	e, ok := t.Node[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Node", oldK)
	}
	e.HostName = &newK

	t.Node[newK] = e
	delete(t.Node, oldK)
	return nil
}

// GetOrCreateNode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) GetOrCreateNode(HostName string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node {

	key := HostName

	if v, ok := t.Node[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNode(HostName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNode got unexpected error: %v", err))
	}
	return v
}

// GetNode retrieves the value with the specified key from
// the Node map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) GetNode(HostName string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node {

	if t == nil {
		return nil
	}

	key := HostName

	if lm, ok := t.Node[key]; ok {
		return lm
	}
	return nil
}

// DeleteNode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) DeleteNode(HostName string) {
	key := HostName

	delete(t.Node, key)
}

// AppendNode appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node struct to the
// list Node of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) AppendNode(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) error {
	if v.HostName == nil {
		return fmt.Errorf("invalid nil key received for HostName")
	}

	key := *v.HostName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node)
	}

	if _, ok := t.Node[key]; ok {
		return fmt.Errorf("duplicate key for list Node %v", key)
	}

	t.Node[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Node {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/diameter-node/node YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node struct {
	HostName *string `path:"host-name" module:"nokia-conf"`
	SyncTag  *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) IsYANGGoStruct() {
}

// GetHostName retrieves the value of the leaf HostName from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostName is set, it can
// safely use t.GetHostName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) GetHostName() string {
	if t == nil || t.HostName == nil {
		return ""
	}
	return *t.HostName
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostName == nil {
		return nil, fmt.Errorf("nil value for key HostName")
	}

	return map[string]interface{}{
		"host-name": *t.HostName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_DiameterNode_Node) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/nat YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat struct {
	NatGroup map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup `path:"nat-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) IsYANGGoStruct() {}

// NewNatGroup creates a new entry in the NatGroup list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) NewNatGroup(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatGroup", key)
	}

	t.NatGroup[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup{
		Id: Id,
	}

	return t.NatGroup[key], nil
}

// RenameNatGroup renames an entry in the list NatGroup within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) RenameNatGroup(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union) error {
	if _, ok := t.NatGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NatGroup", newK)
	}

	e, ok := t.NatGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatGroup", oldK)
	}
	e.Id = newK

	t.NatGroup[newK] = e
	delete(t.NatGroup, oldK)
	return nil
}

// GetOrCreateNatGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) GetOrCreateNatGroup(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup {

	key := Id

	if v, ok := t.NatGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatGroup got unexpected error: %v", err))
	}
	return v
}

// GetNatGroup retrieves the value with the specified key from
// the NatGroup map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) GetNatGroup(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NatGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) DeleteNatGroup(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union) {
	key := Id

	delete(t.NatGroup, key)
}

// AppendNatGroup appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup struct to the
// list NatGroup of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) AppendNatGroup(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup)
	}

	if _, ok := t.NatGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NatGroup %v", key)
	}

	t.NatGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NatGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/nat/nat-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup struct {
	Id      NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union `path:"id" module:"nokia-conf"`
	SyncTag *string                                                                                  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) GetId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Nat_NatGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/pim-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping struct {
	Saps      *bool `path:"saps" module:"nokia-conf"`
	SpokeSdps *bool `path:"spoke-sdps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) IsYANGGoStruct() {
}

// GetSaps retrieves the value of the leaf Saps from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Saps is set, it can
// safely use t.GetSaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Saps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) GetSaps() bool {
	if t == nil || t.Saps == nil {
		return false
	}
	return *t.Saps
}

// GetSpokeSdps retrieves the value of the leaf SpokeSdps from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdps is set, it can
// safely use t.GetSpokeSdps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) GetSpokeSdps() bool {
	if t == nil || t.SpokeSdps == nil {
		return false
	}
	return *t.SpokeSdps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Saps == nil {
		var v bool = false
		t.Saps = &v
	}
	if t.SpokeSdps == nil {
		var v bool = false
		t.SpokeSdps = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_PimSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/sub-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt struct {
	Ipoe  *bool `path:"ipoe" module:"nokia-conf"`
	Pppoe *bool `path:"pppoe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) IsYANGGoStruct() {}

// GetIpoe retrieves the value of the leaf Ipoe from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipoe is set, it can
// safely use t.GetIpoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) GetIpoe() bool {
	if t == nil || t.Ipoe == nil {
		return false
	}
	return *t.Ipoe
}

// GetPppoe retrieves the value of the leaf Pppoe from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pppoe is set, it can
// safely use t.GetPppoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pppoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) GetPppoe() bool {
	if t == nil || t.Pppoe == nil {
		return false
	}
	return *t.Pppoe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipoe == nil {
		var v bool = false
		t.Ipoe = &v
	}
	if t.Pppoe == nil {
		var v bool = false
		t.Pppoe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_SubMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct {
	Lag    map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag                                                                                     `path:"lag" module:"nokia-conf"`
	Port   map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port                                                                                    `path:"port" module:"nokia-conf"`
	PwPort map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort `path:"pw-port" module:"nokia-conf"`
	Sdp    map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp       `path:"sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) IsYANGGoStruct() {}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) NewLag(LagName string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreateLag(LagName string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetLag(LagName string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct to the
// list Lag of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) AppendLag(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) NewPort(Id string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port{
		Id: &Id,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.Id = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreatePort(Id string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port {

	key := Id

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetPort(Id string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) DeletePort(Id string) {
	key := Id

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) AppendPort(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewPwPort creates a new entry in the PwPort list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) NewPwPort(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwPort", key)
	}

	t.PwPort[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort{
		Id: Id,
	}

	return t.PwPort[key], nil
}

// RenamePwPort renames an entry in the list PwPort within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) RenamePwPort(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union) error {
	if _, ok := t.PwPort[newK]; ok {
		return fmt.Errorf("key %v already exists in PwPort", newK)
	}

	e, ok := t.PwPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwPort", oldK)
	}
	e.Id = newK

	t.PwPort[newK] = e
	delete(t.PwPort, oldK)
	return nil
}

// GetOrCreatePwPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreatePwPort(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort {

	key := Id

	if v, ok := t.PwPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwPort(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwPort got unexpected error: %v", err))
	}
	return v
}

// GetPwPort retrieves the value with the specified key from
// the PwPort map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetPwPort(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.PwPort[key]; ok {
		return lm
	}
	return nil
}

// DeletePwPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) DeletePwPort(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union) {
	key := Id

	delete(t.PwPort, key)
}

// AppendPwPort appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct to the
// list PwPort of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) AppendPwPort(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort)
	}

	if _, ok := t.PwPort[key]; ok {
		return fmt.Errorf("duplicate key for list PwPort %v", key)
	}

	t.PwPort[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) NewSdp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp{
		Id: Id,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) RenameSdp(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.Id = newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetOrCreateSdp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp {

	key := Id

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) GetSdp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) DeleteSdp(Id NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union) {
	key := Id

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct to the
// list Sdp of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) AppendSdp(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.PwPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct {
	LagName *string                                                                                                                                                                      `path:"lag-name" module:"nokia-conf"`
	Range   map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range `path:"range" module:"nokia-conf"`
	SyncTag *string                                                                                                                                                                      `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/lag.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) NewRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range)
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetOrCreateRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range {

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) DeleteRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) AppendRange(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/lag/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range struct {
	End     *string `path:"end" module:"nokia-conf"`
	Start   *string `path:"start" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Lag_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/port YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct {
	Id      *string                                                                                                                                                                        `path:"id" module:"nokia-conf"`
	Range   map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range `path:"range" module:"nokia-conf"`
	SyncTag *string                                                                                                                                                                        `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/port.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) NewRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range)
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetOrCreateRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range {

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) DeleteRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) AppendRange(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range struct {
	End     *string `path:"end" module:"nokia-conf"`
	Start   *string `path:"start" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/pw-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct {
	Id      NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union                                                                                            `path:"id" module:"nokia-conf"`
	Range   map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range `path:"range" module:"nokia-conf"`
	SyncTag *string                                                                                                                                                                            `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/pw-port.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) NewRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range)
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetOrCreateRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range {

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) DeleteRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) AppendRange(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/pw-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range struct {
	End     *string `path:"end" module:"nokia-conf"`
	Start   *string `path:"start" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_PwPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct {
	Id      NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union                                                                                         `path:"id" module:"nokia-conf"`
	Range   map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range `path:"range" module:"nokia-conf"`
	SyncTag *string                                                                                                                                                                      `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/sdp.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key struct {
	Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_End_Union   `path:"end"`
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) NewRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_End_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range)
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range{
		Start: Start,
		End:   End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetOrCreateRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_End_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range {

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_End_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) DeleteRange(Start NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Start_Union, End NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_End_Union) {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) AppendRange(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) error {
	key := NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Key]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tags/sdp/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range struct {
	End     NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_End_Union   `path:"end" module:"nokia-conf"`
	Start   NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Start_Union `path:"start" module:"nokia-conf"`
	SyncTag *string                                                                                       `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetEnd() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetStart() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_Tags_Sdp_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/track-srrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp struct {
	Id                NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union           `path:"id" module:"nokia-conf"`
	L2TpTunnelIdRange *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange `path:"l2tp-tunnel-id-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) IsYANGGoStruct() {
}

// GetOrCreateL2TpTunnelIdRange retrieves the value of the L2TpTunnelIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetOrCreateL2TpTunnelIdRange() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange {
	if t.L2TpTunnelIdRange != nil {
		return t.L2TpTunnelIdRange
	}
	t.L2TpTunnelIdRange = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange{}
	return t.L2TpTunnelIdRange
}

// GetL2TpTunnelIdRange returns the value of the L2TpTunnelIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp. If the receiver or the field L2TpTunnelIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetL2TpTunnelIdRange() *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange {
	if t != nil && t.L2TpTunnelIdRange != nil {
		return t.L2TpTunnelIdRange
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) GetId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2TpTunnelIdRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/track-srrp/l2tp-tunnel-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TrackSrrp_L2TpTunnelIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/transport-encryption YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption struct {
	Application map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application `path:"application" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) IsYANGGoStruct() {
}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) NewApplication(ApplicationId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union) (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application)
	}

	key := ApplicationId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application{
		ApplicationId: ApplicationId,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) RenameApplication(oldK, newK NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationId = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) GetOrCreateApplication(ApplicationId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application {

	key := ApplicationId

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) GetApplication(ApplicationId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union) *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application {

	if t == nil {
		return nil
	}

	key := ApplicationId

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) DeleteApplication(ApplicationId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union) {
	key := ApplicationId

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application struct to the
// list Application of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) AppendApplication(v *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) error {
	key := v.ApplicationId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union]*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/transport-encryption/application YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application struct {
	ApplicationId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union `path:"application-id" module:"nokia-conf"`
	Keychain      *string                                                                                                                `path:"keychain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) IsYANGGoStruct() {
}

// GetApplicationId retrieves the value of the leaf ApplicationId from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationId is set, it can
// safely use t.GetApplicationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) GetApplicationId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application_ApplicationId_Union {
	if t == nil || t.ApplicationId == nil {
		return nil
	}
	return t.ApplicationId
}

// GetKeychain retrieves the value of the leaf Keychain from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application-id": t.ApplicationId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TransportEncryption_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup represents the /nokia-conf/configure/groups/group/redundancy/multi-chassis/peer/sync/tunnel-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup struct {
	SyncTag       *string                                                                                            `path:"sync-tag" module:"nokia-conf"`
	TunnelGroupId NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union `path:"tunnel-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) IsYANGGoStruct() {
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// GetTunnelGroupId retrieves the value of the leaf TunnelGroupId from the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupId is set, it can
// safely use t.GetTunnelGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) GetTunnelGroupId() NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup_TunnelGroupId_Union {
	if t == nil || t.TunnelGroupId == nil {
		return nil
	}
	return t.TunnelGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tunnel-group-id": t.TunnelGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup.
func (*NokiaConf_Configure_Groups_Group_Redundancy_MultiChassis_Peer_Sync_TunnelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_Srrp represents the /nokia-conf/configure/groups/group/redundancy/srrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_Srrp struct {
	AutoSrrpIdRange *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange `path:"auto-srrp-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_Srrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_Srrp) IsYANGGoStruct() {}

// GetOrCreateAutoSrrpIdRange retrieves the value of the AutoSrrpIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp) GetOrCreateAutoSrrpIdRange() *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange {
	if t.AutoSrrpIdRange != nil {
		return t.AutoSrrpIdRange
	}
	t.AutoSrrpIdRange = &NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange{}
	return t.AutoSrrpIdRange
}

// GetAutoSrrpIdRange returns the value of the AutoSrrpIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Redundancy_Srrp. If the receiver or the field AutoSrrpIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp) GetAutoSrrpIdRange() *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange {
	if t != nil && t.AutoSrrpIdRange != nil {
		return t.AutoSrrpIdRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_Srrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AutoSrrpIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_Srrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_Srrp.
func (*NokiaConf_Configure_Groups_Group_Redundancy_Srrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange represents the /nokia-conf/configure/groups/group/redundancy/srrp/auto-srrp-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 4294967295
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 2147483648
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v uint32 = 4294967295
		t.End = &v
	}
	if t.Start == nil {
		var v uint32 = 2147483648
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange.
func (*NokiaConf_Configure_Groups_Group_Redundancy_Srrp_AutoSrrpIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router represents the /nokia-conf/configure/groups/group/router YANG schema element.
type NokiaConf_Configure_Groups_Group_Router struct {
	Aggregates          *NokiaConf_Configure_Groups_Group_Router_Aggregates                                                                 `path:"aggregates" module:"nokia-conf" yangPresence:"true"`
	AllowIcmpRedirect   *bool                                                                                                               `path:"allow-icmp-redirect" module:"nokia-conf"`
	AllowIcmp6Redirect  *bool                                                                                                               `path:"allow-icmp6-redirect" module:"nokia-conf"`
	AutonomousSystem    *uint32                                                                                                             `path:"autonomous-system" module:"nokia-conf"`
	Bfd                 *NokiaConf_Configure_Groups_Group_Router_Bfd                                                                        `path:"bfd" module:"nokia-conf"`
	Bgp                 *NokiaConf_Configure_Groups_Group_Router_Bgp                                                                        `path:"bgp" module:"nokia-conf" yangPresence:"true"`
	Bier                *NokiaConf_Configure_Groups_Group_Router_Bier                                                                       `path:"bier" module:"nokia-conf" yangPresence:"true"`
	ClassForwarding     *bool                                                                                                               `path:"class-forwarding" module:"nokia-conf"`
	Confederation       *NokiaConf_Configure_Groups_Group_Router_Confederation                                                              `path:"confederation" module:"nokia-conf"`
	Description         *string                                                                                                             `path:"description" module:"nokia-conf"`
	DhcpServer          *NokiaConf_Configure_Groups_Group_Router_DhcpServer                                                                 `path:"dhcp-server" module:"nokia-conf" yangPresence:"true"`
	Dns                 *NokiaConf_Configure_Groups_Group_Router_Dns                                                                        `path:"dns" module:"nokia-conf"`
	Ecmp                *uint32                                                                                                             `path:"ecmp" module:"nokia-conf"`
	EntropyLabel        *bool                                                                                                               `path:"entropy-label" module:"nokia-conf"`
	FibPriority         E_NokiaConf_Configure_Groups_Group_Router_FibPriority                                                               `path:"fib-priority" module:"nokia-conf"`
	FibTelemetry        *bool                                                                                                               `path:"fib-telemetry" module:"nokia-conf"`
	Firewall            *NokiaConf_Configure_Groups_Group_Router_Firewall                                                                   `path:"firewall" module:"nokia-conf" yangPresence:"true"`
	Flowspec            *NokiaConf_Configure_Groups_Group_Router_Flowspec                                                                   `path:"flowspec" module:"nokia-conf" yangPresence:"true"`
	Gtm                 *NokiaConf_Configure_Groups_Group_Router_Gtm                                                                        `path:"gtm" module:"nokia-conf" yangPresence:"true"`
	Gtp                 *NokiaConf_Configure_Groups_Group_Router_Gtp                                                                        `path:"gtp" module:"nokia-conf"`
	IcmpTunneling       *bool                                                                                                               `path:"icmp-tunneling" module:"nokia-conf"`
	Igmp                *NokiaConf_Configure_Groups_Group_Router_Igmp                                                                       `path:"igmp" module:"nokia-conf" yangPresence:"true"`
	Interface           map[string]*NokiaConf_Configure_Groups_Group_Router_Interface                                                       `path:"interface" module:"nokia-conf"`
	Ipv6                *NokiaConf_Configure_Groups_Group_Router_Ipv6                                                                       `path:"ipv6" module:"nokia-conf"`
	Ipv6TeRouterId      *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId                                                             `path:"ipv6-te-router-id" module:"nokia-conf"`
	IsaServiceChaining  *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining                                                         `path:"isa-service-chaining" module:"nokia-conf" yangPresence:"true"`
	Isis                map[NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Isis   `path:"isis" module:"nokia-conf"`
	L2Tp                *NokiaConf_Configure_Groups_Group_Router_L2Tp                                                                       `path:"l2tp" module:"nokia-conf" yangPresence:"true"`
	Ldp                 *NokiaConf_Configure_Groups_Group_Router_Ldp                                                                        `path:"ldp" module:"nokia-conf" yangPresence:"true"`
	LeakExport          *NokiaConf_Configure_Groups_Group_Router_LeakExport                                                                 `path:"leak-export" module:"nokia-conf"`
	LspBfd              *NokiaConf_Configure_Groups_Group_Router_LspBfd                                                                     `path:"lsp-bfd" module:"nokia-conf"`
	McMaximumRoutes     *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes                                                            `path:"mc-maximum-routes" module:"nokia-conf"`
	Mld                 *NokiaConf_Configure_Groups_Group_Router_Mld                                                                        `path:"mld" module:"nokia-conf" yangPresence:"true"`
	Mpls                *NokiaConf_Configure_Groups_Group_Router_Mpls                                                                       `path:"mpls" module:"nokia-conf" yangPresence:"true"`
	MplsLabels          *NokiaConf_Configure_Groups_Group_Router_MplsLabels                                                                 `path:"mpls-labels" module:"nokia-conf" yangPresence:"true"`
	Msdp                *NokiaConf_Configure_Groups_Group_Router_Msdp                                                                       `path:"msdp" module:"nokia-conf" yangPresence:"true"`
	MssAdjust           *NokiaConf_Configure_Groups_Group_Router_MssAdjust                                                                  `path:"mss-adjust" module:"nokia-conf" yangPresence:"true"`
	Mtrace2             *NokiaConf_Configure_Groups_Group_Router_Mtrace2                                                                    `path:"mtrace2" module:"nokia-conf"`
	MulticastInfoPolicy *string                                                                                                             `path:"multicast-info-policy" module:"nokia-conf"`
	Nat                 *NokiaConf_Configure_Groups_Group_Router_Nat                                                                        `path:"nat" module:"nokia-conf" yangPresence:"true"`
	NetworkDomains      *NokiaConf_Configure_Groups_Group_Router_NetworkDomains                                                             `path:"network-domains" module:"nokia-conf"`
	OriginValidation    *NokiaConf_Configure_Groups_Group_Router_OriginValidation                                                           `path:"origin-validation" module:"nokia-conf" yangPresence:"true"`
	Ospf                map[NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf   `path:"ospf" module:"nokia-conf"`
	Ospf3               map[NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf3 `path:"ospf3" module:"nokia-conf"`
	P2MpSrTree          *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree                                                                 `path:"p2mp-sr-tree" module:"nokia-conf" yangPresence:"true"`
	Pcep                *NokiaConf_Configure_Groups_Group_Router_Pcep                                                                       `path:"pcep" module:"nokia-conf" yangPresence:"true"`
	Pcp                 *NokiaConf_Configure_Groups_Group_Router_Pcp                                                                        `path:"pcp" module:"nokia-conf"`
	Pim                 *NokiaConf_Configure_Groups_Group_Router_Pim                                                                        `path:"pim" module:"nokia-conf" yangPresence:"true"`
	Radius              *NokiaConf_Configure_Groups_Group_Router_Radius                                                                     `path:"radius" module:"nokia-conf" yangPresence:"true"`
	Reassembly          *NokiaConf_Configure_Groups_Group_Router_Reassembly                                                                 `path:"reassembly" module:"nokia-conf" yangPresence:"true"`
	RibApi              *NokiaConf_Configure_Groups_Group_Router_RibApi                                                                     `path:"rib-api" module:"nokia-conf" yangPresence:"true"`
	Rip                 *NokiaConf_Configure_Groups_Group_Router_Rip                                                                        `path:"rip" module:"nokia-conf" yangPresence:"true"`
	Ripng               *NokiaConf_Configure_Groups_Group_Router_Ripng                                                                      `path:"ripng" module:"nokia-conf" yangPresence:"true"`
	RouterId            *string                                                                                                             `path:"router-id" module:"nokia-conf"`
	RouterName          *string                                                                                                             `path:"router-name" module:"nokia-conf"`
	Rsvp                *NokiaConf_Configure_Groups_Group_Router_Rsvp                                                                       `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
	SegmentRouting      *NokiaConf_Configure_Groups_Group_Router_SegmentRouting                                                             `path:"segment-routing" module:"nokia-conf" yangPresence:"true"`
	SelectiveFib        *bool                                                                                                               `path:"selective-fib" module:"nokia-conf"`
	SfmOverload         *NokiaConf_Configure_Groups_Group_Router_SfmOverload                                                                `path:"sfm-overload" module:"nokia-conf" yangPresence:"true"`
	SgtQos              *NokiaConf_Configure_Groups_Group_Router_SgtQos                                                                     `path:"sgt-qos" module:"nokia-conf"`
	StaticRoutes        *NokiaConf_Configure_Groups_Group_Router_StaticRoutes                                                               `path:"static-routes" module:"nokia-conf" yangPresence:"true"`
	TriggeredPolicy     *bool                                                                                                               `path:"triggered-policy" module:"nokia-conf"`
	TtlPropagate        *NokiaConf_Configure_Groups_Group_Router_TtlPropagate                                                               `path:"ttl-propagate" module:"nokia-conf" yangPresence:"true"`
	TunnelInterface     *NokiaConf_Configure_Groups_Group_Router_TunnelInterface                                                            `path:"tunnel-interface" module:"nokia-conf"`
	TwampLight          *NokiaConf_Configure_Groups_Group_Router_TwampLight                                                                 `path:"twamp-light" module:"nokia-conf" yangPresence:"true"`
	Vrgw                *NokiaConf_Configure_Groups_Group_Router_Vrgw                                                                       `path:"vrgw" module:"nokia-conf"`
	WeightedEcmp        E_NokiaConf_Configure_Groups_Group_Router_WeightedEcmp                                                              `path:"weighted-ecmp" module:"nokia-conf"`
	WlanGw              *NokiaConf_Configure_Groups_Group_Router_WlanGw                                                                     `path:"wlan-gw" module:"nokia-conf" yangPresence:"true"`
	Wpp                 *NokiaConf_Configure_Groups_Group_Router_Wpp                                                                        `path:"wpp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewIsis creates a new entry in the Isis list of the
// NokiaConf_Configure_Groups_Group_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router) NewIsis(IsisInstance NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isis == nil {
		t.Isis = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Isis)
	}

	key := IsisInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isis", key)
	}

	t.Isis[key] = &NokiaConf_Configure_Groups_Group_Router_Isis{
		IsisInstance: IsisInstance,
	}

	return t.Isis[key], nil
}

// RenameIsis renames an entry in the list Isis within
// the NokiaConf_Configure_Groups_Group_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router) RenameIsis(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union) error {
	if _, ok := t.Isis[newK]; ok {
		return fmt.Errorf("key %v already exists in Isis", newK)
	}

	e, ok := t.Isis[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isis", oldK)
	}
	e.IsisInstance = newK

	t.Isis[newK] = e
	delete(t.Isis, oldK)
	return nil
}

// GetOrCreateIsis retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateIsis(IsisInstance NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union) *NokiaConf_Configure_Groups_Group_Router_Isis {

	key := IsisInstance

	if v, ok := t.Isis[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsis(IsisInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsis got unexpected error: %v", err))
	}
	return v
}

// GetIsis retrieves the value with the specified key from
// the Isis map field of NokiaConf_Configure_Groups_Group_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetIsis(IsisInstance NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union) *NokiaConf_Configure_Groups_Group_Router_Isis {

	if t == nil {
		return nil
	}

	key := IsisInstance

	if lm, ok := t.Isis[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsis deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router) DeleteIsis(IsisInstance NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union) {
	key := IsisInstance

	delete(t.Isis, key)
}

// AppendIsis appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis struct to the
// list Isis of NokiaConf_Configure_Groups_Group_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router) AppendIsis(v *NokiaConf_Configure_Groups_Group_Router_Isis) error {
	key := v.IsisInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isis == nil {
		t.Isis = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Isis)
	}

	if _, ok := t.Isis[key]; ok {
		return fmt.Errorf("duplicate key for list Isis %v", key)
	}

	t.Isis[key] = v
	return nil
}

// NewOspf creates a new entry in the Ospf list of the
// NokiaConf_Configure_Groups_Group_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router) NewOspf(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf == nil {
		t.Ospf = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf)
	}

	key := OspfInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospf", key)
	}

	t.Ospf[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf{
		OspfInstance: OspfInstance,
	}

	return t.Ospf[key], nil
}

// RenameOspf renames an entry in the list Ospf within
// the NokiaConf_Configure_Groups_Group_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router) RenameOspf(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union) error {
	if _, ok := t.Ospf[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospf", newK)
	}

	e, ok := t.Ospf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospf", oldK)
	}
	e.OspfInstance = newK

	t.Ospf[newK] = e
	delete(t.Ospf, oldK)
	return nil
}

// GetOrCreateOspf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateOspf(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf {

	key := OspfInstance

	if v, ok := t.Ospf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspf(OspfInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspf got unexpected error: %v", err))
	}
	return v
}

// GetOspf retrieves the value with the specified key from
// the Ospf map field of NokiaConf_Configure_Groups_Group_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOspf(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf {

	if t == nil {
		return nil
	}

	key := OspfInstance

	if lm, ok := t.Ospf[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router) DeleteOspf(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union) {
	key := OspfInstance

	delete(t.Ospf, key)
}

// AppendOspf appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf struct to the
// list Ospf of NokiaConf_Configure_Groups_Group_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router) AppendOspf(v *NokiaConf_Configure_Groups_Group_Router_Ospf) error {
	key := v.OspfInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf == nil {
		t.Ospf = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf)
	}

	if _, ok := t.Ospf[key]; ok {
		return fmt.Errorf("duplicate key for list Ospf %v", key)
	}

	t.Ospf[key] = v
	return nil
}

// NewOspf3 creates a new entry in the Ospf3 list of the
// NokiaConf_Configure_Groups_Group_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router) NewOspf3(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf3, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf3 == nil {
		t.Ospf3 = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf3)
	}

	key := OspfInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospf3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospf3", key)
	}

	t.Ospf3[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3{
		OspfInstance: OspfInstance,
	}

	return t.Ospf3[key], nil
}

// RenameOspf3 renames an entry in the list Ospf3 within
// the NokiaConf_Configure_Groups_Group_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router) RenameOspf3(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union) error {
	if _, ok := t.Ospf3[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospf3", newK)
	}

	e, ok := t.Ospf3[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospf3", oldK)
	}
	e.OspfInstance = newK

	t.Ospf3[newK] = e
	delete(t.Ospf3, oldK)
	return nil
}

// GetOrCreateOspf3 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateOspf3(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf3 {

	key := OspfInstance

	if v, ok := t.Ospf3[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspf3(OspfInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspf3 got unexpected error: %v", err))
	}
	return v
}

// GetOspf3 retrieves the value with the specified key from
// the Ospf3 map field of NokiaConf_Configure_Groups_Group_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOspf3(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf3 {

	if t == nil {
		return nil
	}

	key := OspfInstance

	if lm, ok := t.Ospf3[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspf3 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router) DeleteOspf3(OspfInstance NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union) {
	key := OspfInstance

	delete(t.Ospf3, key)
}

// AppendOspf3 appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3 struct to the
// list Ospf3 of NokiaConf_Configure_Groups_Group_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router) AppendOspf3(v *NokiaConf_Configure_Groups_Group_Router_Ospf3) error {
	key := v.OspfInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf3 == nil {
		t.Ospf3 = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf3)
	}

	if _, ok := t.Ospf3[key]; ok {
		return fmt.Errorf("duplicate key for list Ospf3 %v", key)
	}

	t.Ospf3[key] = v
	return nil
}

// GetOrCreateAggregates retrieves the value of the Aggregates field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateAggregates() *NokiaConf_Configure_Groups_Group_Router_Aggregates {
	if t.Aggregates != nil {
		return t.Aggregates
	}
	t.Aggregates = &NokiaConf_Configure_Groups_Group_Router_Aggregates{}
	return t.Aggregates
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Router_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Router_Bfd{}
	return t.Bfd
}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateBgp() *NokiaConf_Configure_Groups_Group_Router_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &NokiaConf_Configure_Groups_Group_Router_Bgp{}
	return t.Bgp
}

// GetOrCreateBier retrieves the value of the Bier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateBier() *NokiaConf_Configure_Groups_Group_Router_Bier {
	if t.Bier != nil {
		return t.Bier
	}
	t.Bier = &NokiaConf_Configure_Groups_Group_Router_Bier{}
	return t.Bier
}

// GetOrCreateConfederation retrieves the value of the Confederation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateConfederation() *NokiaConf_Configure_Groups_Group_Router_Confederation {
	if t.Confederation != nil {
		return t.Confederation
	}
	t.Confederation = &NokiaConf_Configure_Groups_Group_Router_Confederation{}
	return t.Confederation
}

// GetOrCreateDhcpServer retrieves the value of the DhcpServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateDhcpServer() *NokiaConf_Configure_Groups_Group_Router_DhcpServer {
	if t.DhcpServer != nil {
		return t.DhcpServer
	}
	t.DhcpServer = &NokiaConf_Configure_Groups_Group_Router_DhcpServer{}
	return t.DhcpServer
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateDns() *NokiaConf_Configure_Groups_Group_Router_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Groups_Group_Router_Dns{}
	return t.Dns
}

// GetOrCreateFirewall retrieves the value of the Firewall field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateFirewall() *NokiaConf_Configure_Groups_Group_Router_Firewall {
	if t.Firewall != nil {
		return t.Firewall
	}
	t.Firewall = &NokiaConf_Configure_Groups_Group_Router_Firewall{}
	return t.Firewall
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateFlowspec() *NokiaConf_Configure_Groups_Group_Router_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Groups_Group_Router_Flowspec{}
	return t.Flowspec
}

// GetOrCreateGtm retrieves the value of the Gtm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateGtm() *NokiaConf_Configure_Groups_Group_Router_Gtm {
	if t.Gtm != nil {
		return t.Gtm
	}
	t.Gtm = &NokiaConf_Configure_Groups_Group_Router_Gtm{}
	return t.Gtm
}

// GetOrCreateGtp retrieves the value of the Gtp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateGtp() *NokiaConf_Configure_Groups_Group_Router_Gtp {
	if t.Gtp != nil {
		return t.Gtp
	}
	t.Gtp = &NokiaConf_Configure_Groups_Group_Router_Gtp{}
	return t.Gtp
}

// GetOrCreateIgmp retrieves the value of the Igmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateIgmp() *NokiaConf_Configure_Groups_Group_Router_Igmp {
	if t.Igmp != nil {
		return t.Igmp
	}
	t.Igmp = &NokiaConf_Configure_Groups_Group_Router_Igmp{}
	return t.Igmp
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Ipv6{}
	return t.Ipv6
}

// GetOrCreateIpv6TeRouterId retrieves the value of the Ipv6TeRouterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateIpv6TeRouterId() *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId {
	if t.Ipv6TeRouterId != nil {
		return t.Ipv6TeRouterId
	}
	t.Ipv6TeRouterId = &NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId{}
	return t.Ipv6TeRouterId
}

// GetOrCreateIsaServiceChaining retrieves the value of the IsaServiceChaining field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateIsaServiceChaining() *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining {
	if t.IsaServiceChaining != nil {
		return t.IsaServiceChaining
	}
	t.IsaServiceChaining = &NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining{}
	return t.IsaServiceChaining
}

// GetOrCreateL2Tp retrieves the value of the L2Tp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateL2Tp() *NokiaConf_Configure_Groups_Group_Router_L2Tp {
	if t.L2Tp != nil {
		return t.L2Tp
	}
	t.L2Tp = &NokiaConf_Configure_Groups_Group_Router_L2Tp{}
	return t.L2Tp
}

// GetOrCreateLdp retrieves the value of the Ldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateLdp() *NokiaConf_Configure_Groups_Group_Router_Ldp {
	if t.Ldp != nil {
		return t.Ldp
	}
	t.Ldp = &NokiaConf_Configure_Groups_Group_Router_Ldp{}
	return t.Ldp
}

// GetOrCreateLeakExport retrieves the value of the LeakExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateLeakExport() *NokiaConf_Configure_Groups_Group_Router_LeakExport {
	if t.LeakExport != nil {
		return t.LeakExport
	}
	t.LeakExport = &NokiaConf_Configure_Groups_Group_Router_LeakExport{}
	return t.LeakExport
}

// GetOrCreateLspBfd retrieves the value of the LspBfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateLspBfd() *NokiaConf_Configure_Groups_Group_Router_LspBfd {
	if t.LspBfd != nil {
		return t.LspBfd
	}
	t.LspBfd = &NokiaConf_Configure_Groups_Group_Router_LspBfd{}
	return t.LspBfd
}

// GetOrCreateMcMaximumRoutes retrieves the value of the McMaximumRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateMcMaximumRoutes() *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes {
	if t.McMaximumRoutes != nil {
		return t.McMaximumRoutes
	}
	t.McMaximumRoutes = &NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes{}
	return t.McMaximumRoutes
}

// GetOrCreateMld retrieves the value of the Mld field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateMld() *NokiaConf_Configure_Groups_Group_Router_Mld {
	if t.Mld != nil {
		return t.Mld
	}
	t.Mld = &NokiaConf_Configure_Groups_Group_Router_Mld{}
	return t.Mld
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateMpls() *NokiaConf_Configure_Groups_Group_Router_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_Groups_Group_Router_Mpls{}
	return t.Mpls
}

// GetOrCreateMplsLabels retrieves the value of the MplsLabels field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateMplsLabels() *NokiaConf_Configure_Groups_Group_Router_MplsLabels {
	if t.MplsLabels != nil {
		return t.MplsLabels
	}
	t.MplsLabels = &NokiaConf_Configure_Groups_Group_Router_MplsLabels{}
	return t.MplsLabels
}

// GetOrCreateMsdp retrieves the value of the Msdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateMsdp() *NokiaConf_Configure_Groups_Group_Router_Msdp {
	if t.Msdp != nil {
		return t.Msdp
	}
	t.Msdp = &NokiaConf_Configure_Groups_Group_Router_Msdp{}
	return t.Msdp
}

// GetOrCreateMssAdjust retrieves the value of the MssAdjust field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateMssAdjust() *NokiaConf_Configure_Groups_Group_Router_MssAdjust {
	if t.MssAdjust != nil {
		return t.MssAdjust
	}
	t.MssAdjust = &NokiaConf_Configure_Groups_Group_Router_MssAdjust{}
	return t.MssAdjust
}

// GetOrCreateMtrace2 retrieves the value of the Mtrace2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateMtrace2() *NokiaConf_Configure_Groups_Group_Router_Mtrace2 {
	if t.Mtrace2 != nil {
		return t.Mtrace2
	}
	t.Mtrace2 = &NokiaConf_Configure_Groups_Group_Router_Mtrace2{}
	return t.Mtrace2
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateNat() *NokiaConf_Configure_Groups_Group_Router_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Groups_Group_Router_Nat{}
	return t.Nat
}

// GetOrCreateNetworkDomains retrieves the value of the NetworkDomains field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateNetworkDomains() *NokiaConf_Configure_Groups_Group_Router_NetworkDomains {
	if t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	t.NetworkDomains = &NokiaConf_Configure_Groups_Group_Router_NetworkDomains{}
	return t.NetworkDomains
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateOriginValidation() *NokiaConf_Configure_Groups_Group_Router_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Groups_Group_Router_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateP2MpSrTree retrieves the value of the P2MpSrTree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateP2MpSrTree() *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree {
	if t.P2MpSrTree != nil {
		return t.P2MpSrTree
	}
	t.P2MpSrTree = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree{}
	return t.P2MpSrTree
}

// GetOrCreatePcep retrieves the value of the Pcep field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreatePcep() *NokiaConf_Configure_Groups_Group_Router_Pcep {
	if t.Pcep != nil {
		return t.Pcep
	}
	t.Pcep = &NokiaConf_Configure_Groups_Group_Router_Pcep{}
	return t.Pcep
}

// GetOrCreatePcp retrieves the value of the Pcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreatePcp() *NokiaConf_Configure_Groups_Group_Router_Pcp {
	if t.Pcp != nil {
		return t.Pcp
	}
	t.Pcp = &NokiaConf_Configure_Groups_Group_Router_Pcp{}
	return t.Pcp
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreatePim() *NokiaConf_Configure_Groups_Group_Router_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &NokiaConf_Configure_Groups_Group_Router_Pim{}
	return t.Pim
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateRadius() *NokiaConf_Configure_Groups_Group_Router_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Groups_Group_Router_Radius{}
	return t.Radius
}

// GetOrCreateReassembly retrieves the value of the Reassembly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateReassembly() *NokiaConf_Configure_Groups_Group_Router_Reassembly {
	if t.Reassembly != nil {
		return t.Reassembly
	}
	t.Reassembly = &NokiaConf_Configure_Groups_Group_Router_Reassembly{}
	return t.Reassembly
}

// GetOrCreateRibApi retrieves the value of the RibApi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateRibApi() *NokiaConf_Configure_Groups_Group_Router_RibApi {
	if t.RibApi != nil {
		return t.RibApi
	}
	t.RibApi = &NokiaConf_Configure_Groups_Group_Router_RibApi{}
	return t.RibApi
}

// GetOrCreateRip retrieves the value of the Rip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateRip() *NokiaConf_Configure_Groups_Group_Router_Rip {
	if t.Rip != nil {
		return t.Rip
	}
	t.Rip = &NokiaConf_Configure_Groups_Group_Router_Rip{}
	return t.Rip
}

// GetOrCreateRipng retrieves the value of the Ripng field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateRipng() *NokiaConf_Configure_Groups_Group_Router_Ripng {
	if t.Ripng != nil {
		return t.Ripng
	}
	t.Ripng = &NokiaConf_Configure_Groups_Group_Router_Ripng{}
	return t.Ripng
}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateRsvp() *NokiaConf_Configure_Groups_Group_Router_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Groups_Group_Router_Rsvp{}
	return t.Rsvp
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateSfmOverload retrieves the value of the SfmOverload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateSfmOverload() *NokiaConf_Configure_Groups_Group_Router_SfmOverload {
	if t.SfmOverload != nil {
		return t.SfmOverload
	}
	t.SfmOverload = &NokiaConf_Configure_Groups_Group_Router_SfmOverload{}
	return t.SfmOverload
}

// GetOrCreateSgtQos retrieves the value of the SgtQos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateSgtQos() *NokiaConf_Configure_Groups_Group_Router_SgtQos {
	if t.SgtQos != nil {
		return t.SgtQos
	}
	t.SgtQos = &NokiaConf_Configure_Groups_Group_Router_SgtQos{}
	return t.SgtQos
}

// GetOrCreateStaticRoutes retrieves the value of the StaticRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateStaticRoutes() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes {
	if t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	t.StaticRoutes = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes{}
	return t.StaticRoutes
}

// GetOrCreateTtlPropagate retrieves the value of the TtlPropagate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateTtlPropagate() *NokiaConf_Configure_Groups_Group_Router_TtlPropagate {
	if t.TtlPropagate != nil {
		return t.TtlPropagate
	}
	t.TtlPropagate = &NokiaConf_Configure_Groups_Group_Router_TtlPropagate{}
	return t.TtlPropagate
}

// GetOrCreateTunnelInterface retrieves the value of the TunnelInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateTunnelInterface() *NokiaConf_Configure_Groups_Group_Router_TunnelInterface {
	if t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	t.TunnelInterface = &NokiaConf_Configure_Groups_Group_Router_TunnelInterface{}
	return t.TunnelInterface
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateTwampLight() *NokiaConf_Configure_Groups_Group_Router_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_Groups_Group_Router_TwampLight{}
	return t.TwampLight
}

// GetOrCreateVrgw retrieves the value of the Vrgw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateVrgw() *NokiaConf_Configure_Groups_Group_Router_Vrgw {
	if t.Vrgw != nil {
		return t.Vrgw
	}
	t.Vrgw = &NokiaConf_Configure_Groups_Group_Router_Vrgw{}
	return t.Vrgw
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateWlanGw() *NokiaConf_Configure_Groups_Group_Router_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Groups_Group_Router_WlanGw{}
	return t.WlanGw
}

// GetOrCreateWpp retrieves the value of the Wpp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOrCreateWpp() *NokiaConf_Configure_Groups_Group_Router_Wpp {
	if t.Wpp != nil {
		return t.Wpp
	}
	t.Wpp = &NokiaConf_Configure_Groups_Group_Router_Wpp{}
	return t.Wpp
}

// GetAggregates returns the value of the Aggregates struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Aggregates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetAggregates() *NokiaConf_Configure_Groups_Group_Router_Aggregates {
	if t != nil && t.Aggregates != nil {
		return t.Aggregates
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetBfd() *NokiaConf_Configure_Groups_Group_Router_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBgp returns the value of the Bgp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetBgp() *NokiaConf_Configure_Groups_Group_Router_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetBier returns the value of the Bier struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Bier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetBier() *NokiaConf_Configure_Groups_Group_Router_Bier {
	if t != nil && t.Bier != nil {
		return t.Bier
	}
	return nil
}

// GetConfederation returns the value of the Confederation struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Confederation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetConfederation() *NokiaConf_Configure_Groups_Group_Router_Confederation {
	if t != nil && t.Confederation != nil {
		return t.Confederation
	}
	return nil
}

// GetDhcpServer returns the value of the DhcpServer struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field DhcpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetDhcpServer() *NokiaConf_Configure_Groups_Group_Router_DhcpServer {
	if t != nil && t.DhcpServer != nil {
		return t.DhcpServer
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetDns() *NokiaConf_Configure_Groups_Group_Router_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetFirewall returns the value of the Firewall struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Firewall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetFirewall() *NokiaConf_Configure_Groups_Group_Router_Firewall {
	if t != nil && t.Firewall != nil {
		return t.Firewall
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetFlowspec() *NokiaConf_Configure_Groups_Group_Router_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetGtm returns the value of the Gtm struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Gtm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetGtm() *NokiaConf_Configure_Groups_Group_Router_Gtm {
	if t != nil && t.Gtm != nil {
		return t.Gtm
	}
	return nil
}

// GetGtp returns the value of the Gtp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Gtp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetGtp() *NokiaConf_Configure_Groups_Group_Router_Gtp {
	if t != nil && t.Gtp != nil {
		return t.Gtp
	}
	return nil
}

// GetIgmp returns the value of the Igmp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Igmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetIgmp() *NokiaConf_Configure_Groups_Group_Router_Igmp {
	if t != nil && t.Igmp != nil {
		return t.Igmp
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetIpv6TeRouterId returns the value of the Ipv6TeRouterId struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Ipv6TeRouterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetIpv6TeRouterId() *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId {
	if t != nil && t.Ipv6TeRouterId != nil {
		return t.Ipv6TeRouterId
	}
	return nil
}

// GetIsaServiceChaining returns the value of the IsaServiceChaining struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field IsaServiceChaining is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetIsaServiceChaining() *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining {
	if t != nil && t.IsaServiceChaining != nil {
		return t.IsaServiceChaining
	}
	return nil
}

// GetL2Tp returns the value of the L2Tp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field L2Tp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetL2Tp() *NokiaConf_Configure_Groups_Group_Router_L2Tp {
	if t != nil && t.L2Tp != nil {
		return t.L2Tp
	}
	return nil
}

// GetLdp returns the value of the Ldp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Ldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetLdp() *NokiaConf_Configure_Groups_Group_Router_Ldp {
	if t != nil && t.Ldp != nil {
		return t.Ldp
	}
	return nil
}

// GetLeakExport returns the value of the LeakExport struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field LeakExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetLeakExport() *NokiaConf_Configure_Groups_Group_Router_LeakExport {
	if t != nil && t.LeakExport != nil {
		return t.LeakExport
	}
	return nil
}

// GetLspBfd returns the value of the LspBfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field LspBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetLspBfd() *NokiaConf_Configure_Groups_Group_Router_LspBfd {
	if t != nil && t.LspBfd != nil {
		return t.LspBfd
	}
	return nil
}

// GetMcMaximumRoutes returns the value of the McMaximumRoutes struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field McMaximumRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMcMaximumRoutes() *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes {
	if t != nil && t.McMaximumRoutes != nil {
		return t.McMaximumRoutes
	}
	return nil
}

// GetMld returns the value of the Mld struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Mld is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMld() *NokiaConf_Configure_Groups_Group_Router_Mld {
	if t != nil && t.Mld != nil {
		return t.Mld
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMpls() *NokiaConf_Configure_Groups_Group_Router_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetMplsLabels returns the value of the MplsLabels struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field MplsLabels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMplsLabels() *NokiaConf_Configure_Groups_Group_Router_MplsLabels {
	if t != nil && t.MplsLabels != nil {
		return t.MplsLabels
	}
	return nil
}

// GetMsdp returns the value of the Msdp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Msdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMsdp() *NokiaConf_Configure_Groups_Group_Router_Msdp {
	if t != nil && t.Msdp != nil {
		return t.Msdp
	}
	return nil
}

// GetMssAdjust returns the value of the MssAdjust struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field MssAdjust is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMssAdjust() *NokiaConf_Configure_Groups_Group_Router_MssAdjust {
	if t != nil && t.MssAdjust != nil {
		return t.MssAdjust
	}
	return nil
}

// GetMtrace2 returns the value of the Mtrace2 struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Mtrace2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMtrace2() *NokiaConf_Configure_Groups_Group_Router_Mtrace2 {
	if t != nil && t.Mtrace2 != nil {
		return t.Mtrace2
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetNat() *NokiaConf_Configure_Groups_Group_Router_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetNetworkDomains returns the value of the NetworkDomains struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field NetworkDomains is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetNetworkDomains() *NokiaConf_Configure_Groups_Group_Router_NetworkDomains {
	if t != nil && t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetOriginValidation() *NokiaConf_Configure_Groups_Group_Router_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetP2MpSrTree returns the value of the P2MpSrTree struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field P2MpSrTree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetP2MpSrTree() *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree {
	if t != nil && t.P2MpSrTree != nil {
		return t.P2MpSrTree
	}
	return nil
}

// GetPcep returns the value of the Pcep struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Pcep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetPcep() *NokiaConf_Configure_Groups_Group_Router_Pcep {
	if t != nil && t.Pcep != nil {
		return t.Pcep
	}
	return nil
}

// GetPcp returns the value of the Pcp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Pcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetPcp() *NokiaConf_Configure_Groups_Group_Router_Pcp {
	if t != nil && t.Pcp != nil {
		return t.Pcp
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetPim() *NokiaConf_Configure_Groups_Group_Router_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetRadius() *NokiaConf_Configure_Groups_Group_Router_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetReassembly returns the value of the Reassembly struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Reassembly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetReassembly() *NokiaConf_Configure_Groups_Group_Router_Reassembly {
	if t != nil && t.Reassembly != nil {
		return t.Reassembly
	}
	return nil
}

// GetRibApi returns the value of the RibApi struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field RibApi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetRibApi() *NokiaConf_Configure_Groups_Group_Router_RibApi {
	if t != nil && t.RibApi != nil {
		return t.RibApi
	}
	return nil
}

// GetRip returns the value of the Rip struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Rip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetRip() *NokiaConf_Configure_Groups_Group_Router_Rip {
	if t != nil && t.Rip != nil {
		return t.Rip
	}
	return nil
}

// GetRipng returns the value of the Ripng struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Ripng is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetRipng() *NokiaConf_Configure_Groups_Group_Router_Ripng {
	if t != nil && t.Ripng != nil {
		return t.Ripng
	}
	return nil
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetRsvp() *NokiaConf_Configure_Groups_Group_Router_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetSfmOverload returns the value of the SfmOverload struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field SfmOverload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetSfmOverload() *NokiaConf_Configure_Groups_Group_Router_SfmOverload {
	if t != nil && t.SfmOverload != nil {
		return t.SfmOverload
	}
	return nil
}

// GetSgtQos returns the value of the SgtQos struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field SgtQos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetSgtQos() *NokiaConf_Configure_Groups_Group_Router_SgtQos {
	if t != nil && t.SgtQos != nil {
		return t.SgtQos
	}
	return nil
}

// GetStaticRoutes returns the value of the StaticRoutes struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field StaticRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetStaticRoutes() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes {
	if t != nil && t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	return nil
}

// GetTtlPropagate returns the value of the TtlPropagate struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field TtlPropagate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetTtlPropagate() *NokiaConf_Configure_Groups_Group_Router_TtlPropagate {
	if t != nil && t.TtlPropagate != nil {
		return t.TtlPropagate
	}
	return nil
}

// GetTunnelInterface returns the value of the TunnelInterface struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field TunnelInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetTunnelInterface() *NokiaConf_Configure_Groups_Group_Router_TunnelInterface {
	if t != nil && t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetTwampLight() *NokiaConf_Configure_Groups_Group_Router_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetVrgw returns the value of the Vrgw struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Vrgw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetVrgw() *NokiaConf_Configure_Groups_Group_Router_Vrgw {
	if t != nil && t.Vrgw != nil {
		return t.Vrgw
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetWlanGw() *NokiaConf_Configure_Groups_Group_Router_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetWpp returns the value of the Wpp struct pointer
// from NokiaConf_Configure_Groups_Group_Router. If the receiver or the field Wpp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router) GetWpp() *NokiaConf_Configure_Groups_Group_Router_Wpp {
	if t != nil && t.Wpp != nil {
		return t.Wpp
	}
	return nil
}

// GetAllowIcmpRedirect retrieves the value of the leaf AllowIcmpRedirect from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIcmpRedirect is set, it can
// safely use t.GetAllowIcmpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIcmpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetAllowIcmpRedirect() bool {
	if t == nil || t.AllowIcmpRedirect == nil {
		return false
	}
	return *t.AllowIcmpRedirect
}

// GetAllowIcmp6Redirect retrieves the value of the leaf AllowIcmp6Redirect from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIcmp6Redirect is set, it can
// safely use t.GetAllowIcmp6Redirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIcmp6Redirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetAllowIcmp6Redirect() bool {
	if t == nil || t.AllowIcmp6Redirect == nil {
		return false
	}
	return *t.AllowIcmp6Redirect
}

// GetAutonomousSystem retrieves the value of the leaf AutonomousSystem from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystem is set, it can
// safely use t.GetAutonomousSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystem == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetAutonomousSystem() uint32 {
	if t == nil || t.AutonomousSystem == nil {
		return 0
	}
	return *t.AutonomousSystem
}

// GetClassForwarding retrieves the value of the leaf ClassForwarding from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassForwarding is set, it can
// safely use t.GetClassForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetClassForwarding() bool {
	if t == nil || t.ClassForwarding == nil {
		return false
	}
	return *t.ClassForwarding
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetFibPriority retrieves the value of the leaf FibPriority from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FibPriority is set, it can
// safely use t.GetFibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetFibPriority() E_NokiaConf_Configure_Groups_Group_Router_FibPriority {
	if t == nil || t.FibPriority == 0 {
		return NokiaConf_Configure_Groups_Group_Router_FibPriority_standard
	}
	return t.FibPriority
}

// GetFibTelemetry retrieves the value of the leaf FibTelemetry from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FibTelemetry is set, it can
// safely use t.GetFibTelemetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FibTelemetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetFibTelemetry() bool {
	if t == nil || t.FibTelemetry == nil {
		return false
	}
	return *t.FibTelemetry
}

// GetIcmpTunneling retrieves the value of the leaf IcmpTunneling from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpTunneling is set, it can
// safely use t.GetIcmpTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpTunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetIcmpTunneling() bool {
	if t == nil || t.IcmpTunneling == nil {
		return false
	}
	return *t.IcmpTunneling
}

// GetMulticastInfoPolicy retrieves the value of the leaf MulticastInfoPolicy from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastInfoPolicy is set, it can
// safely use t.GetMulticastInfoPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastInfoPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetMulticastInfoPolicy() string {
	if t == nil || t.MulticastInfoPolicy == nil {
		return ""
	}
	return *t.MulticastInfoPolicy
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetRouterName retrieves the value of the leaf RouterName from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterName is set, it can
// safely use t.GetRouterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetRouterName() string {
	if t == nil || t.RouterName == nil {
		return ""
	}
	return *t.RouterName
}

// GetSelectiveFib retrieves the value of the leaf SelectiveFib from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveFib is set, it can
// safely use t.GetSelectiveFib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveFib == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetSelectiveFib() bool {
	if t == nil || t.SelectiveFib == nil {
		return true
	}
	return *t.SelectiveFib
}

// GetTriggeredPolicy retrieves the value of the leaf TriggeredPolicy from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TriggeredPolicy is set, it can
// safely use t.GetTriggeredPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TriggeredPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetTriggeredPolicy() bool {
	if t == nil || t.TriggeredPolicy == nil {
		return false
	}
	return *t.TriggeredPolicy
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Groups_Group_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router) GetWeightedEcmp() E_NokiaConf_Configure_Groups_Group_Router_WeightedEcmp {
	if t == nil || t.WeightedEcmp == 0 {
		return NokiaConf_Configure_Groups_Group_Router_WeightedEcmp_false
	}
	return t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowIcmpRedirect == nil {
		var v bool = false
		t.AllowIcmpRedirect = &v
	}
	if t.AllowIcmp6Redirect == nil {
		var v bool = false
		t.AllowIcmp6Redirect = &v
	}
	if t.ClassForwarding == nil {
		var v bool = false
		t.ClassForwarding = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.FibPriority == 0 {
		t.FibPriority = NokiaConf_Configure_Groups_Group_Router_FibPriority_standard
	}
	if t.FibTelemetry == nil {
		var v bool = false
		t.FibTelemetry = &v
	}
	if t.IcmpTunneling == nil {
		var v bool = false
		t.IcmpTunneling = &v
	}
	if t.SelectiveFib == nil {
		var v bool = true
		t.SelectiveFib = &v
	}
	if t.TriggeredPolicy == nil {
		var v bool = false
		t.TriggeredPolicy = &v
	}
	if t.WeightedEcmp == 0 {
		t.WeightedEcmp = NokiaConf_Configure_Groups_Group_Router_WeightedEcmp_false
	}
	t.Aggregates.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Bgp.PopulateDefaults()
	t.Bier.PopulateDefaults()
	t.Confederation.PopulateDefaults()
	t.DhcpServer.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.Firewall.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.Gtm.PopulateDefaults()
	t.Gtp.PopulateDefaults()
	t.Igmp.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Ipv6TeRouterId.PopulateDefaults()
	t.IsaServiceChaining.PopulateDefaults()
	t.L2Tp.PopulateDefaults()
	t.Ldp.PopulateDefaults()
	t.LeakExport.PopulateDefaults()
	t.LspBfd.PopulateDefaults()
	t.McMaximumRoutes.PopulateDefaults()
	t.Mld.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.MplsLabels.PopulateDefaults()
	t.Msdp.PopulateDefaults()
	t.MssAdjust.PopulateDefaults()
	t.Mtrace2.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.NetworkDomains.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.P2MpSrTree.PopulateDefaults()
	t.Pcep.PopulateDefaults()
	t.Pcp.PopulateDefaults()
	t.Pim.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.Reassembly.PopulateDefaults()
	t.RibApi.PopulateDefaults()
	t.Rip.PopulateDefaults()
	t.Ripng.PopulateDefaults()
	t.Rsvp.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.SfmOverload.PopulateDefaults()
	t.SgtQos.PopulateDefaults()
	t.StaticRoutes.PopulateDefaults()
	t.TtlPropagate.PopulateDefaults()
	t.TunnelInterface.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
	t.Vrgw.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	t.Wpp.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Isis {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospf {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospf3 {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterName == nil {
		return nil, fmt.Errorf("nil value for key RouterName")
	}

	return map[string]interface{}{
		"router-name": *t.RouterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router.
func (*NokiaConf_Configure_Groups_Group_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Aggregates represents the /nokia-conf/configure/groups/group/router/aggregates YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Aggregates struct {
	Aggregate map[string]*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate `path:"aggregate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Aggregates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates) IsYANGGoStruct() {}

// NewAggregate creates a new entry in the Aggregate list of the
// NokiaConf_Configure_Groups_Group_Router_Aggregates struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) NewAggregate(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aggregate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aggregate", key)
	}

	t.Aggregate[key] = &NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate{
		IpPrefix: &IpPrefix,
	}

	return t.Aggregate[key], nil
}

// RenameAggregate renames an entry in the list Aggregate within
// the NokiaConf_Configure_Groups_Group_Router_Aggregates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) RenameAggregate(oldK, newK string) error {
	if _, ok := t.Aggregate[newK]; ok {
		return fmt.Errorf("key %v already exists in Aggregate", newK)
	}

	e, ok := t.Aggregate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aggregate", oldK)
	}
	e.IpPrefix = &newK

	t.Aggregate[newK] = e
	delete(t.Aggregate, oldK)
	return nil
}

// GetOrCreateAggregate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Aggregates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) GetOrCreateAggregate(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate {

	key := IpPrefix

	if v, ok := t.Aggregate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAggregate(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAggregate got unexpected error: %v", err))
	}
	return v
}

// GetAggregate retrieves the value with the specified key from
// the Aggregate map field of NokiaConf_Configure_Groups_Group_Router_Aggregates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) GetAggregate(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Aggregate[key]; ok {
		return lm
	}
	return nil
}

// DeleteAggregate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Aggregates. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) DeleteAggregate(IpPrefix string) {
	key := IpPrefix

	delete(t.Aggregate, key)
}

// AppendAggregate appends the supplied NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate struct to the
// list Aggregate of NokiaConf_Configure_Groups_Group_Router_Aggregates. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) AppendAggregate(v *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate)
	}

	if _, ok := t.Aggregate[key]; ok {
		return fmt.Errorf("duplicate key for list Aggregate %v", key)
	}

	t.Aggregate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Aggregates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Aggregate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Aggregates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Aggregates.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate represents the /nokia-conf/configure/groups/group/router/aggregates/aggregate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate struct {
	Aggregator                  *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator `path:"aggregator" module:"nokia-conf"`
	AsSet                       *bool                                                                    `path:"as-set" module:"nokia-conf"`
	Blackhole                   *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole  `path:"blackhole" module:"nokia-conf" yangPresence:"true"`
	Community                   []string                                                                 `path:"community" module:"nokia-conf"`
	Description                 *string                                                                  `path:"description" module:"nokia-conf"`
	DiscardComponentCommunities *bool                                                                    `path:"discard-component-communities" module:"nokia-conf"`
	Indirect                    *string                                                                  `path:"indirect" module:"nokia-conf"`
	IpPrefix                    *string                                                                  `path:"ip-prefix" module:"nokia-conf"`
	LocalPreference             *int64                                                                   `path:"local-preference" module:"nokia-conf"`
	Policy                      *string                                                                  `path:"policy" module:"nokia-conf"`
	SummaryOnly                 *bool                                                                    `path:"summary-only" module:"nokia-conf"`
	TunnelGroup                 *uint32                                                                  `path:"tunnel-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) IsYANGGoStruct() {}

// GetOrCreateAggregator retrieves the value of the Aggregator field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetOrCreateAggregator() *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator {
	if t.Aggregator != nil {
		return t.Aggregator
	}
	t.Aggregator = &NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator{}
	return t.Aggregator
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetOrCreateBlackhole() *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole{}
	return t.Blackhole
}

// GetAggregator returns the value of the Aggregator struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate. If the receiver or the field Aggregator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetAggregator() *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator {
	if t != nil && t.Aggregator != nil {
		return t.Aggregator
	}
	return nil
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetBlackhole() *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetAsSet retrieves the value of the leaf AsSet from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsSet is set, it can
// safely use t.GetAsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetAsSet() bool {
	if t == nil || t.AsSet == nil {
		return false
	}
	return *t.AsSet
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetCommunity() []string {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDiscardComponentCommunities retrieves the value of the leaf DiscardComponentCommunities from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardComponentCommunities is set, it can
// safely use t.GetDiscardComponentCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardComponentCommunities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetDiscardComponentCommunities() bool {
	if t == nil || t.DiscardComponentCommunities == nil {
		return false
	}
	return *t.DiscardComponentCommunities
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetIndirect() string {
	if t == nil || t.Indirect == nil {
		return ""
	}
	return *t.Indirect
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetSummaryOnly retrieves the value of the leaf SummaryOnly from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummaryOnly is set, it can
// safely use t.GetSummaryOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummaryOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetSummaryOnly() bool {
	if t == nil || t.SummaryOnly == nil {
		return false
	}
	return *t.SummaryOnly
}

// GetTunnelGroup retrieves the value of the leaf TunnelGroup from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroup is set, it can
// safely use t.GetTunnelGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) GetTunnelGroup() uint32 {
	if t == nil || t.TunnelGroup == nil {
		return 0
	}
	return *t.TunnelGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsSet == nil {
		var v bool = false
		t.AsSet = &v
	}
	if t.DiscardComponentCommunities == nil {
		var v bool = false
		t.DiscardComponentCommunities = &v
	}
	if t.SummaryOnly == nil {
		var v bool = false
		t.SummaryOnly = &v
	}
	t.Aggregator.PopulateDefaults()
	t.Blackhole.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator represents the /nokia-conf/configure/groups/group/router/aggregates/aggregate/aggregator YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator struct {
	Address  *string `path:"address" module:"nokia-conf"`
	AsNumber *uint32 `path:"as-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Aggregator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole represents the /nokia-conf/configure/groups/group/router/aggregates/aggregate/blackhole YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole struct {
	GenerateIcmp *bool `path:"generate-icmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole) IsYANGGoStruct() {}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole.
func (*NokiaConf_Configure_Groups_Group_Router_Aggregates_Aggregate_Blackhole) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bfd represents the /nokia-conf/configure/groups/group/router/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bfd struct {
	SeamlessBfd *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd `path:"seamless-bfd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bfd) IsYANGGoStruct() {}

// GetOrCreateSeamlessBfd retrieves the value of the SeamlessBfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd) GetOrCreateSeamlessBfd() *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd {
	if t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	t.SeamlessBfd = &NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd{}
	return t.SeamlessBfd
}

// GetSeamlessBfd returns the value of the SeamlessBfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bfd. If the receiver or the field SeamlessBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd) GetSeamlessBfd() *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd {
	if t != nil && t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SeamlessBfd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bfd.
func (*NokiaConf_Configure_Groups_Group_Router_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd represents the /nokia-conf/configure/groups/group/router/bfd/seamless-bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd struct {
	Peer map[string]*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer `path:"peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) NewPeer(Address string) (*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) GetOrCreatePeer(Address string) *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) GetPeer(Address string) *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd.
func (*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer represents the /nokia-conf/configure/groups/group/router/bfd/seamless-bfd/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer struct {
	Address       *string `path:"address" module:"nokia-conf"`
	Discriminator *uint32 `path:"discriminator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDiscriminator retrieves the value of the leaf Discriminator from the NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Discriminator is set, it can
// safely use t.GetDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Discriminator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) GetDiscriminator() uint32 {
	if t == nil || t.Discriminator == nil {
		return 0
	}
	return *t.Discriminator
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_Bfd_SeamlessBfd_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp represents the /nokia-conf/configure/groups/group/router/bgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp struct {
	AddPaths                       *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths                   `path:"add-paths" module:"nokia-conf" yangPresence:"true"`
	AdminState                     E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	AdvertiseExternal              *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal          `path:"advertise-external" module:"nokia-conf"`
	AdvertiseInactive              *bool                                                                   `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops          *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops      `path:"advertise-ipv6-next-hops" module:"nokia-conf"`
	AggregatorIdZero               *bool                                                                   `path:"aggregator-id-zero" module:"nokia-conf"`
	Asn_4Byte                      *bool                                                                   `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey              *string                                                                 `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain         *string                                                                 `path:"authentication-keychain" module:"nokia-conf"`
	BackupPath                     *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath                 `path:"backup-path" module:"nokia-conf"`
	BestPathSelection              *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection          `path:"best-path-selection" module:"nokia-conf"`
	BfdLiveness                    *bool                                                                   `path:"bfd-liveness" module:"nokia-conf"`
	BgpTunnelMetric                *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	BgpTunnelPreference            *uint32                                                                 `path:"bgp-tunnel-preference" module:"nokia-conf"`
	BlockPrefixSid                 *bool                                                                   `path:"block-prefix-sid" module:"nokia-conf"`
	ClientReflect                  *bool                                                                   `path:"client-reflect" module:"nokia-conf"`
	Cluster                        *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster                    `path:"cluster" module:"nokia-conf"`
	ConnectRetry                   *int32                                                                  `path:"connect-retry" module:"nokia-conf"`
	Convergence                    *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence                `path:"convergence" module:"nokia-conf"`
	DampPeerOscillations           *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations       `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                        *bool                                                                   `path:"damping" module:"nokia-conf"`
	DefRecvEvpnEncap               E_NokiaTypesBgp_Encap                                                   `path:"def-recv-evpn-encap" module:"nokia-conf"`
	DefaultLabelPreference         *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference     `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference              *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference          `path:"default-preference" module:"nokia-conf"`
	Description                    *string                                                                 `path:"description" module:"nokia-conf"`
	DynamicNeighborLimit           *uint32                                                                 `path:"dynamic-neighbor-limit" module:"nokia-conf"`
	EbgpDefaultRejectPolicy        *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy    `path:"ebgp-default-reject-policy" module:"nokia-conf"`
	EgressPeerEngineering          *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering      `path:"egress-peer-engineering" module:"nokia-conf" yangPresence:"true"`
	EnforceFirstAs                 *bool                                                                   `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling                  *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling              `path:"error-handling" module:"nokia-conf"`
	Export                         *NokiaConf_Configure_Groups_Group_Router_Bgp_Export                     `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding             *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding         `path:"extended-nh-encoding" module:"nokia-conf"`
	Family                         *NokiaConf_Configure_Groups_Group_Router_Bgp_Family                     `path:"family" module:"nokia-conf"`
	FastExternalFailover           *bool                                                                   `path:"fast-external-failover" module:"nokia-conf"`
	Flowspec                       *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec                   `path:"flowspec" module:"nokia-conf"`
	GracefulRestart                *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart            `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	Group                          map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group           `path:"group" module:"nokia-conf"`
	HoldTime                       *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime                   `path:"hold-time" module:"nokia-conf"`
	IbgpMultipath                  *bool                                                                   `path:"ibgp-multipath" module:"nokia-conf"`
	Import                         *NokiaConf_Configure_Groups_Group_Router_Bgp_Import                     `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero           *bool                                                                   `path:"initial-send-delay-zero" module:"nokia-conf"`
	InterAsVpn                     *bool                                                                   `path:"inter-as-vpn" module:"nokia-conf"`
	Keepalive                      *int32                                                                  `path:"keepalive" module:"nokia-conf"`
	LabelAllocation                *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation            `path:"label-allocation" module:"nokia-conf"`
	LabelPreference                *uint32                                                                 `path:"label-preference" module:"nokia-conf"`
	LinkStateRouteExport           *bool                                                                   `path:"link-state-route-export" module:"nokia-conf"`
	LinkStateRouteImport           *bool                                                                   `path:"link-state-route-import" module:"nokia-conf"`
	LocalAs                        *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs                    `path:"local-as" module:"nokia-conf"`
	LocalPreference                *uint32                                                                 `path:"local-preference" module:"nokia-conf"`
	LoopDetect                     E_NokiaTypesBgp_LoopDetect                                              `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold            *uint32                                                                 `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                         NokiaConf_Configure_Groups_Group_Router_Bgp_MedOut_Union                `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement          *int16                                                                  `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                        *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor                    `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	MpBgpKeep                      *bool                                                                   `path:"mp-bgp-keep" module:"nokia-conf"`
	Multihop                       *int32                                                                  `path:"multihop" module:"nokia-conf"`
	Multipath                      *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath                  `path:"multipath" module:"nokia-conf"`
	MvpnVrfImportSubtypeNew        *bool                                                                   `path:"mvpn-vrf-import-subtype-new" module:"nokia-conf"`
	Neighbor                       map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor        `path:"neighbor" module:"nokia-conf"`
	NeighborTrust                  *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust              `path:"neighbor-trust" module:"nokia-conf"`
	NextHopResolution              *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution          `path:"next-hop-resolution" module:"nokia-conf"`
	OptimalRouteReflection         *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection     `path:"optimal-route-reflection" module:"nokia-conf"`
	OutboundRouteFiltering         *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering     `path:"outbound-route-filtering" module:"nokia-conf" yangPresence:"true"`
	OverrideTunnelElc              *bool                                                                   `path:"override-tunnel-elc" module:"nokia-conf"`
	PathMtuDiscovery               *bool                                                                   `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerIpTracking                 *bool                                                                   `path:"peer-ip-tracking" module:"nokia-conf"`
	PeerTrackingPolicy             *string                                                                 `path:"peer-tracking-policy" module:"nokia-conf"`
	Preference                     *uint32                                                                 `path:"preference" module:"nokia-conf"`
	PurgeTimer                     *uint32                                                                 `path:"purge-timer" module:"nokia-conf"`
	RapidUpdate                    *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate                `path:"rapid-update" module:"nokia-conf"`
	RapidWithdrawal                *bool                                                                   `path:"rapid-withdrawal" module:"nokia-conf"`
	RemovePrivate                  *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate              `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	RibManagement                  *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement              `path:"rib-management" module:"nokia-conf"`
	RouteTableInstall              *bool                                                                   `path:"route-table-install" module:"nokia-conf"`
	RouteTargetList                map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList `path:"route-target-list" module:"nokia-conf"`
	RouterId                       *string                                                                 `path:"router-id" module:"nokia-conf"`
	RrVpnForwarding                *bool                                                                   `path:"rr-vpn-forwarding" module:"nokia-conf"`
	SegmentRouting                 *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting             `path:"segment-routing" module:"nokia-conf" yangPresence:"true"`
	SegmentRoutingV6               *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6           `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SelectiveLabelIpPrioritization *bool                                                                   `path:"selective-label-ip-prioritization" module:"nokia-conf"`
	SelectiveLabelIpv4Install      *bool                                                                   `path:"selective-label-ipv4-install" module:"nokia-conf"`
	SendCommunities                *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities            `path:"send-communities" module:"nokia-conf"`
	SendDefault                    *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault                `path:"send-default" module:"nokia-conf"`
	SplitHorizon                   *bool                                                                   `path:"split-horizon" module:"nokia-conf"`
	SrPolicyImport                 *bool                                                                   `path:"sr-policy-import" module:"nokia-conf"`
	SubconfedVpnForwarding         *bool                                                                   `path:"subconfed-vpn-forwarding" module:"nokia-conf"`
	TcpMss                         *uint32                                                                 `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop              *bool                                                                   `path:"third-party-nexthop" module:"nokia-conf"`
	VpnApplyExport                 *bool                                                                   `path:"vpn-apply-export" module:"nokia-conf"`
	VpnApplyImport                 *bool                                                                   `path:"vpn-apply-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) NewGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) NewNeighbor(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor{
		IpAddress: &IpAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Groups_Group_Router_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.IpAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateNeighbor(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor {

	key := IpAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetNeighbor(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) DeleteNeighbor(IpAddress string) {
	key := IpAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Groups_Group_Router_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) AppendNeighbor(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// NewRouteTargetList creates a new entry in the RouteTargetList list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) NewRouteTargetList(CommunityName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTargetList == nil {
		t.RouteTargetList = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTargetList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTargetList", key)
	}

	t.RouteTargetList[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList{
		CommunityName: &CommunityName,
	}

	return t.RouteTargetList[key], nil
}

// RenameRouteTargetList renames an entry in the list RouteTargetList within
// the NokiaConf_Configure_Groups_Group_Router_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) RenameRouteTargetList(oldK, newK string) error {
	if _, ok := t.RouteTargetList[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTargetList", newK)
	}

	e, ok := t.RouteTargetList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTargetList", oldK)
	}
	e.CommunityName = &newK

	t.RouteTargetList[newK] = e
	delete(t.RouteTargetList, oldK)
	return nil
}

// GetOrCreateRouteTargetList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateRouteTargetList(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList {

	key := CommunityName

	if v, ok := t.RouteTargetList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTargetList(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTargetList got unexpected error: %v", err))
	}
	return v
}

// GetRouteTargetList retrieves the value with the specified key from
// the RouteTargetList map field of NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRouteTargetList(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTargetList[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTargetList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) DeleteRouteTargetList(CommunityName string) {
	key := CommunityName

	delete(t.RouteTargetList, key)
}

// AppendRouteTargetList appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList struct to the
// list RouteTargetList of NokiaConf_Configure_Groups_Group_Router_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) AppendRouteTargetList(v *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTargetList == nil {
		t.RouteTargetList = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList)
	}

	if _, ok := t.RouteTargetList[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTargetList %v", key)
	}

	t.RouteTargetList[key] = v
	return nil
}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateAddPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths{}
	return t.AddPaths
}

// GetOrCreateAdvertiseExternal retrieves the value of the AdvertiseExternal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateAdvertiseExternal() *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal {
	if t.AdvertiseExternal != nil {
		return t.AdvertiseExternal
	}
	t.AdvertiseExternal = &NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal{}
	return t.AdvertiseExternal
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateBackupPath retrieves the value of the BackupPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateBackupPath() *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath {
	if t.BackupPath != nil {
		return t.BackupPath
	}
	t.BackupPath = &NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath{}
	return t.BackupPath
}

// GetOrCreateBestPathSelection retrieves the value of the BestPathSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateBestPathSelection() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection {
	if t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	t.BestPathSelection = &NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection{}
	return t.BestPathSelection
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateCluster() *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster{}
	return t.Cluster
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateConvergence() *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence{}
	return t.Convergence
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateDefaultPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateEgressPeerEngineering retrieves the value of the EgressPeerEngineering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateEgressPeerEngineering() *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering {
	if t.EgressPeerEngineering != nil {
		return t.EgressPeerEngineering
	}
	t.EgressPeerEngineering = &NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering{}
	return t.EgressPeerEngineering
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateErrorHandling() *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateExport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Groups_Group_Router_Bgp_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateFamily() *NokiaConf_Configure_Groups_Group_Router_Bgp_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Groups_Group_Router_Bgp_Family{}
	return t.Family
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateFlowspec() *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec{}
	return t.Flowspec
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Groups_Group_Router_Bgp_Import{}
	return t.Import
}

// GetOrCreateLabelAllocation retrieves the value of the LabelAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateLabelAllocation() *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation {
	if t.LabelAllocation != nil {
		return t.LabelAllocation
	}
	t.LabelAllocation = &NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation{}
	return t.LabelAllocation
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateLocalAs() *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateMonitor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor{}
	return t.Monitor
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateMultipath() *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath{}
	return t.Multipath
}

// GetOrCreateNeighborTrust retrieves the value of the NeighborTrust field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateNeighborTrust() *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust {
	if t.NeighborTrust != nil {
		return t.NeighborTrust
	}
	t.NeighborTrust = &NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust{}
	return t.NeighborTrust
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateNextHopResolution() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution{}
	return t.NextHopResolution
}

// GetOrCreateOptimalRouteReflection retrieves the value of the OptimalRouteReflection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateOptimalRouteReflection() *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection {
	if t.OptimalRouteReflection != nil {
		return t.OptimalRouteReflection
	}
	t.OptimalRouteReflection = &NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection{}
	return t.OptimalRouteReflection
}

// GetOrCreateOutboundRouteFiltering retrieves the value of the OutboundRouteFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateOutboundRouteFiltering() *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering {
	if t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	t.OutboundRouteFiltering = &NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering{}
	return t.OutboundRouteFiltering
}

// GetOrCreateRapidUpdate retrieves the value of the RapidUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateRapidUpdate() *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate {
	if t.RapidUpdate != nil {
		return t.RapidUpdate
	}
	t.RapidUpdate = &NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate{}
	return t.RapidUpdate
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateRemovePrivate() *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateRibManagement retrieves the value of the RibManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateRibManagement() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement {
	if t.RibManagement != nil {
		return t.RibManagement
	}
	t.RibManagement = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement{}
	return t.RibManagement
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateSendCommunities() *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOrCreateSendDefault() *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault{}
	return t.SendDefault
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAddPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetAdvertiseExternal returns the value of the AdvertiseExternal struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field AdvertiseExternal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAdvertiseExternal() *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal {
	if t != nil && t.AdvertiseExternal != nil {
		return t.AdvertiseExternal
	}
	return nil
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetBackupPath returns the value of the BackupPath struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field BackupPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetBackupPath() *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath {
	if t != nil && t.BackupPath != nil {
		return t.BackupPath
	}
	return nil
}

// GetBestPathSelection returns the value of the BestPathSelection struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field BestPathSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetBestPathSelection() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection {
	if t != nil && t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetBgpTunnelMetric() *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetCluster() *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetConvergence() *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetDampPeerOscillations() *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetDefaultLabelPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetDefaultPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetEgressPeerEngineering returns the value of the EgressPeerEngineering struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field EgressPeerEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetEgressPeerEngineering() *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering {
	if t != nil && t.EgressPeerEngineering != nil {
		return t.EgressPeerEngineering
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetErrorHandling() *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetExport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetExtendedNhEncoding() *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetFamily() *NokiaConf_Configure_Groups_Group_Router_Bgp_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetFlowspec() *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLabelAllocation returns the value of the LabelAllocation struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field LabelAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLabelAllocation() *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation {
	if t != nil && t.LabelAllocation != nil {
		return t.LabelAllocation
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLocalAs() *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetMonitor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetMultipath() *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetNeighborTrust returns the value of the NeighborTrust struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field NeighborTrust is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetNeighborTrust() *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust {
	if t != nil && t.NeighborTrust != nil {
		return t.NeighborTrust
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetNextHopResolution() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetOptimalRouteReflection returns the value of the OptimalRouteReflection struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field OptimalRouteReflection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOptimalRouteReflection() *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection {
	if t != nil && t.OptimalRouteReflection != nil {
		return t.OptimalRouteReflection
	}
	return nil
}

// GetOutboundRouteFiltering returns the value of the OutboundRouteFiltering struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field OutboundRouteFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOutboundRouteFiltering() *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering {
	if t != nil && t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	return nil
}

// GetRapidUpdate returns the value of the RapidUpdate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field RapidUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRapidUpdate() *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate {
	if t != nil && t.RapidUpdate != nil {
		return t.RapidUpdate
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRemovePrivate() *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetRibManagement returns the value of the RibManagement struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field RibManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRibManagement() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement {
	if t != nil && t.RibManagement != nil {
		return t.RibManagement
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSendCommunities() *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSendDefault() *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return true
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBgpTunnelPreference retrieves the value of the leaf BgpTunnelPreference from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpTunnelPreference is set, it can
// safely use t.GetBgpTunnelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpTunnelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetBgpTunnelPreference() uint32 {
	if t == nil || t.BgpTunnelPreference == nil {
		return 12
	}
	return *t.BgpTunnelPreference
}

// GetBlockPrefixSid retrieves the value of the leaf BlockPrefixSid from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPrefixSid is set, it can
// safely use t.GetBlockPrefixSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPrefixSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetBlockPrefixSid() bool {
	if t == nil || t.BlockPrefixSid == nil {
		return false
	}
	return *t.BlockPrefixSid
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return true
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDefRecvEvpnEncap retrieves the value of the leaf DefRecvEvpnEncap from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefRecvEvpnEncap is set, it can
// safely use t.GetDefRecvEvpnEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefRecvEvpnEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetDefRecvEvpnEncap() E_NokiaTypesBgp_Encap {
	if t == nil || t.DefRecvEvpnEncap == 0 {
		return NokiaTypesBgp_Encap_mpls
	}
	return t.DefRecvEvpnEncap
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicNeighborLimit retrieves the value of the leaf DynamicNeighborLimit from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicNeighborLimit is set, it can
// safely use t.GetDynamicNeighborLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicNeighborLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetDynamicNeighborLimit() uint32 {
	if t == nil || t.DynamicNeighborLimit == nil {
		return 0
	}
	return *t.DynamicNeighborLimit
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return true
	}
	return *t.FastExternalFailover
}

// GetIbgpMultipath retrieves the value of the leaf IbgpMultipath from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IbgpMultipath is set, it can
// safely use t.GetIbgpMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IbgpMultipath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetIbgpMultipath() bool {
	if t == nil || t.IbgpMultipath == nil {
		return false
	}
	return *t.IbgpMultipath
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetInterAsVpn retrieves the value of the leaf InterAsVpn from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterAsVpn is set, it can
// safely use t.GetInterAsVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterAsVpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetInterAsVpn() bool {
	if t == nil || t.InterAsVpn == nil {
		return false
	}
	return *t.InterAsVpn
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 170
	}
	return *t.LabelPreference
}

// GetLinkStateRouteExport retrieves the value of the leaf LinkStateRouteExport from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateRouteExport is set, it can
// safely use t.GetLinkStateRouteExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateRouteExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLinkStateRouteExport() bool {
	if t == nil || t.LinkStateRouteExport == nil {
		return false
	}
	return *t.LinkStateRouteExport
}

// GetLinkStateRouteImport retrieves the value of the leaf LinkStateRouteImport from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateRouteImport is set, it can
// safely use t.GetLinkStateRouteImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateRouteImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLinkStateRouteImport() bool {
	if t == nil || t.LinkStateRouteImport == nil {
		return false
	}
	return *t.LinkStateRouteImport
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 100
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return NokiaTypesBgp_LoopDetect_ignore_loop
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetMedOut() NokiaConf_Configure_Groups_Group_Router_Bgp_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 30
	}
	return *t.MinRouteAdvertisement
}

// GetMpBgpKeep retrieves the value of the leaf MpBgpKeep from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MpBgpKeep is set, it can
// safely use t.GetMpBgpKeep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MpBgpKeep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetMpBgpKeep() bool {
	if t == nil || t.MpBgpKeep == nil {
		return false
	}
	return *t.MpBgpKeep
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMvpnVrfImportSubtypeNew retrieves the value of the leaf MvpnVrfImportSubtypeNew from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnVrfImportSubtypeNew is set, it can
// safely use t.GetMvpnVrfImportSubtypeNew() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnVrfImportSubtypeNew == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetMvpnVrfImportSubtypeNew() bool {
	if t == nil || t.MvpnVrfImportSubtypeNew == nil {
		return false
	}
	return *t.MvpnVrfImportSubtypeNew
}

// GetOverrideTunnelElc retrieves the value of the leaf OverrideTunnelElc from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideTunnelElc is set, it can
// safely use t.GetOverrideTunnelElc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideTunnelElc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetOverrideTunnelElc() bool {
	if t == nil || t.OverrideTunnelElc == nil {
		return false
	}
	return *t.OverrideTunnelElc
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPeerTrackingPolicy retrieves the value of the leaf PeerTrackingPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerTrackingPolicy is set, it can
// safely use t.GetPeerTrackingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerTrackingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetPeerTrackingPolicy() string {
	if t == nil || t.PeerTrackingPolicy == nil {
		return ""
	}
	return *t.PeerTrackingPolicy
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 170
	}
	return *t.Preference
}

// GetPurgeTimer retrieves the value of the leaf PurgeTimer from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PurgeTimer is set, it can
// safely use t.GetPurgeTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PurgeTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetPurgeTimer() uint32 {
	if t == nil || t.PurgeTimer == nil {
		return 10
	}
	return *t.PurgeTimer
}

// GetRapidWithdrawal retrieves the value of the leaf RapidWithdrawal from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidWithdrawal is set, it can
// safely use t.GetRapidWithdrawal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidWithdrawal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRapidWithdrawal() bool {
	if t == nil || t.RapidWithdrawal == nil {
		return false
	}
	return *t.RapidWithdrawal
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetRrVpnForwarding retrieves the value of the leaf RrVpnForwarding from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RrVpnForwarding is set, it can
// safely use t.GetRrVpnForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RrVpnForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetRrVpnForwarding() bool {
	if t == nil || t.RrVpnForwarding == nil {
		return false
	}
	return *t.RrVpnForwarding
}

// GetSelectiveLabelIpPrioritization retrieves the value of the leaf SelectiveLabelIpPrioritization from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpPrioritization is set, it can
// safely use t.GetSelectiveLabelIpPrioritization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpPrioritization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSelectiveLabelIpPrioritization() bool {
	if t == nil || t.SelectiveLabelIpPrioritization == nil {
		return false
	}
	return *t.SelectiveLabelIpPrioritization
}

// GetSelectiveLabelIpv4Install retrieves the value of the leaf SelectiveLabelIpv4Install from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpv4Install is set, it can
// safely use t.GetSelectiveLabelIpv4Install() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpv4Install == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSelectiveLabelIpv4Install() bool {
	if t == nil || t.SelectiveLabelIpv4Install == nil {
		return false
	}
	return *t.SelectiveLabelIpv4Install
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetSrPolicyImport retrieves the value of the leaf SrPolicyImport from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyImport is set, it can
// safely use t.GetSrPolicyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSrPolicyImport() bool {
	if t == nil || t.SrPolicyImport == nil {
		return false
	}
	return *t.SrPolicyImport
}

// GetSubconfedVpnForwarding retrieves the value of the leaf SubconfedVpnForwarding from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubconfedVpnForwarding is set, it can
// safely use t.GetSubconfedVpnForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubconfedVpnForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetSubconfedVpnForwarding() bool {
	if t == nil || t.SubconfedVpnForwarding == nil {
		return false
	}
	return *t.SubconfedVpnForwarding
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetVpnApplyExport retrieves the value of the leaf VpnApplyExport from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyExport is set, it can
// safely use t.GetVpnApplyExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetVpnApplyExport() bool {
	if t == nil || t.VpnApplyExport == nil {
		return false
	}
	return *t.VpnApplyExport
}

// GetVpnApplyImport retrieves the value of the leaf VpnApplyImport from the NokiaConf_Configure_Groups_Group_Router_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyImport is set, it can
// safely use t.GetVpnApplyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) GetVpnApplyImport() bool {
	if t == nil || t.VpnApplyImport == nil {
		return false
	}
	return *t.VpnApplyImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseInactive == nil {
		var v bool = false
		t.AdvertiseInactive = &v
	}
	if t.AggregatorIdZero == nil {
		var v bool = false
		t.AggregatorIdZero = &v
	}
	if t.Asn_4Byte == nil {
		var v bool = true
		t.Asn_4Byte = &v
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.BgpTunnelPreference == nil {
		var v uint32 = 12
		t.BgpTunnelPreference = &v
	}
	if t.BlockPrefixSid == nil {
		var v bool = false
		t.BlockPrefixSid = &v
	}
	if t.ClientReflect == nil {
		var v bool = true
		t.ClientReflect = &v
	}
	if t.ConnectRetry == nil {
		var v int32 = 120
		t.ConnectRetry = &v
	}
	if t.Damping == nil {
		var v bool = false
		t.Damping = &v
	}
	if t.DefRecvEvpnEncap == 0 {
		t.DefRecvEvpnEncap = NokiaTypesBgp_Encap_mpls
	}
	if t.EnforceFirstAs == nil {
		var v bool = false
		t.EnforceFirstAs = &v
	}
	if t.FastExternalFailover == nil {
		var v bool = true
		t.FastExternalFailover = &v
	}
	if t.IbgpMultipath == nil {
		var v bool = false
		t.IbgpMultipath = &v
	}
	if t.InitialSendDelayZero == nil {
		var v bool = false
		t.InitialSendDelayZero = &v
	}
	if t.InterAsVpn == nil {
		var v bool = false
		t.InterAsVpn = &v
	}
	if t.Keepalive == nil {
		var v int32 = 30
		t.Keepalive = &v
	}
	if t.LabelPreference == nil {
		var v uint32 = 170
		t.LabelPreference = &v
	}
	if t.LinkStateRouteExport == nil {
		var v bool = false
		t.LinkStateRouteExport = &v
	}
	if t.LinkStateRouteImport == nil {
		var v bool = false
		t.LinkStateRouteImport = &v
	}
	if t.LocalPreference == nil {
		var v uint32 = 100
		t.LocalPreference = &v
	}
	if t.LoopDetect == 0 {
		t.LoopDetect = NokiaTypesBgp_LoopDetect_ignore_loop
	}
	if t.LoopDetectThreshold == nil {
		var v uint32 = 0
		t.LoopDetectThreshold = &v
	}
	if t.MinRouteAdvertisement == nil {
		var v int16 = 30
		t.MinRouteAdvertisement = &v
	}
	if t.MpBgpKeep == nil {
		var v bool = false
		t.MpBgpKeep = &v
	}
	if t.MvpnVrfImportSubtypeNew == nil {
		var v bool = false
		t.MvpnVrfImportSubtypeNew = &v
	}
	if t.OverrideTunnelElc == nil {
		var v bool = false
		t.OverrideTunnelElc = &v
	}
	if t.PathMtuDiscovery == nil {
		var v bool = false
		t.PathMtuDiscovery = &v
	}
	if t.PeerIpTracking == nil {
		var v bool = false
		t.PeerIpTracking = &v
	}
	if t.Preference == nil {
		var v uint32 = 170
		t.Preference = &v
	}
	if t.PurgeTimer == nil {
		var v uint32 = 10
		t.PurgeTimer = &v
	}
	if t.RapidWithdrawal == nil {
		var v bool = false
		t.RapidWithdrawal = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.RrVpnForwarding == nil {
		var v bool = false
		t.RrVpnForwarding = &v
	}
	if t.SelectiveLabelIpPrioritization == nil {
		var v bool = false
		t.SelectiveLabelIpPrioritization = &v
	}
	if t.SelectiveLabelIpv4Install == nil {
		var v bool = false
		t.SelectiveLabelIpv4Install = &v
	}
	if t.SplitHorizon == nil {
		var v bool = false
		t.SplitHorizon = &v
	}
	if t.SrPolicyImport == nil {
		var v bool = false
		t.SrPolicyImport = &v
	}
	if t.SubconfedVpnForwarding == nil {
		var v bool = false
		t.SubconfedVpnForwarding = &v
	}
	if t.ThirdPartyNexthop == nil {
		var v bool = false
		t.ThirdPartyNexthop = &v
	}
	if t.VpnApplyExport == nil {
		var v bool = false
		t.VpnApplyExport = &v
	}
	if t.VpnApplyImport == nil {
		var v bool = false
		t.VpnApplyImport = &v
	}
	t.AddPaths.PopulateDefaults()
	t.AdvertiseExternal.PopulateDefaults()
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.BackupPath.PopulateDefaults()
	t.BestPathSelection.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.EgressPeerEngineering.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LabelAllocation.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.Multipath.PopulateDefaults()
	t.NeighborTrust.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
	t.OptimalRouteReflection.PopulateDefaults()
	t.OutboundRouteFiltering.PopulateDefaults()
	t.RapidUpdate.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.RibManagement.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.SegmentRoutingV6.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteTargetList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths represents the /nokia-conf/configure/groups/group/router/bgp/add-paths YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths struct {
	Evpn         *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn         `path:"evpn" module:"nokia-conf"`
	Ipv4         *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4         `path:"ipv4" module:"nokia-conf"`
	Ipv6         *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6         `path:"ipv6" module:"nokia-conf"`
	LabelIpv4    *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4    `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6    `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4 `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6 `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MvpnIpv4     *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4     `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6     `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4      `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6      `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateEvpn() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6{}
	return t.LabelIpv6
}

// GetOrCreateMcastVpnIpv4 retrieves the value of the McastVpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateMcastVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4 {
	if t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	t.McastVpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4{}
	return t.McastVpnIpv4
}

// GetOrCreateMcastVpnIpv6 retrieves the value of the McastVpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateMcastVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6 {
	if t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	t.McastVpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6{}
	return t.McastVpnIpv6
}

// GetOrCreateMvpnIpv4 retrieves the value of the MvpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateMvpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4 {
	if t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	t.MvpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4{}
	return t.MvpnIpv4
}

// GetOrCreateMvpnIpv6 retrieves the value of the MvpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateMvpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6 {
	if t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	t.MvpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6{}
	return t.MvpnIpv6
}

// GetOrCreateVpnIpv4 retrieves the value of the VpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4 {
	if t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	t.VpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4{}
	return t.VpnIpv4
}

// GetOrCreateVpnIpv6 retrieves the value of the VpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetOrCreateVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6 {
	if t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	t.VpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6{}
	return t.VpnIpv6
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetEvpn() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// GetMcastVpnIpv4 returns the value of the McastVpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field McastVpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetMcastVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4 {
	if t != nil && t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	return nil
}

// GetMcastVpnIpv6 returns the value of the McastVpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field McastVpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetMcastVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6 {
	if t != nil && t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	return nil
}

// GetMvpnIpv4 returns the value of the MvpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field MvpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetMvpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4 {
	if t != nil && t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	return nil
}

// GetMvpnIpv6 returns the value of the MvpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field MvpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetMvpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6 {
	if t != nil && t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	return nil
}

// GetVpnIpv4 returns the value of the VpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field VpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4 {
	if t != nil && t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	return nil
}

// GetVpnIpv6 returns the value of the VpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths. If the receiver or the field VpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) GetVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6 {
	if t != nil && t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
	t.McastVpnIpv4.PopulateDefaults()
	t.McastVpnIpv6.PopulateDefaults()
	t.MvpnIpv4.PopulateDefaults()
	t.MvpnIpv6.PopulateDefaults()
	t.VpnIpv4.PopulateDefaults()
	t.VpnIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn struct {
	Receive *bool                                                                `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4 struct {
	Receive *bool                                                                `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6 struct {
	Receive *bool                                                                `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/label-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4 struct {
	Receive *bool                                                                     `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/label-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6 struct {
	Receive *bool                                                                     `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/mcast-vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/mcast-vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_McastVpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/mvpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/mvpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_MvpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4 struct {
	Receive *bool                                                                   `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/add-paths/vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6 struct {
	Receive *bool                                                                   `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AddPaths_VpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal represents the /nokia-conf/configure/groups/group/router/bgp/advertise-external YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseExternal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops represents the /nokia-conf/configure/groups/group/router/bgp/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath represents the /nokia-conf/configure/groups/group/router/bgp/backup-path YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BackupPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection represents the /nokia-conf/configure/groups/group/router/bgp/best-path-selection YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection struct {
	AlwaysCompareMed             *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed `path:"always-compare-med" module:"nokia-conf"`
	AsPathIgnore                 *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore     `path:"as-path-ignore" module:"nokia-conf"`
	CompareOriginValidationState *bool                                                                           `path:"compare-origin-validation-state" module:"nokia-conf"`
	DPathLengthIgnore            *bool                                                                           `path:"d-path-length-ignore" module:"nokia-conf"`
	DeterministicMed             *bool                                                                           `path:"deterministic-med" module:"nokia-conf"`
	EbgpIbgpEqual                *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual    `path:"ebgp-ibgp-equal" module:"nokia-conf"`
	IgnoreNhMetric               *bool                                                                           `path:"ignore-nh-metric" module:"nokia-conf"`
	IgnoreRouterId               *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId   `path:"ignore-router-id" module:"nokia-conf" yangPresence:"true"`
	OriginInvalidUnusable        *bool                                                                           `path:"origin-invalid-unusable" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) IsYANGGoStruct() {}

// GetOrCreateAlwaysCompareMed retrieves the value of the AlwaysCompareMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetOrCreateAlwaysCompareMed() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed {
	if t.AlwaysCompareMed != nil {
		return t.AlwaysCompareMed
	}
	t.AlwaysCompareMed = &NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed{}
	return t.AlwaysCompareMed
}

// GetOrCreateAsPathIgnore retrieves the value of the AsPathIgnore field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetOrCreateAsPathIgnore() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore {
	if t.AsPathIgnore != nil {
		return t.AsPathIgnore
	}
	t.AsPathIgnore = &NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore{}
	return t.AsPathIgnore
}

// GetOrCreateEbgpIbgpEqual retrieves the value of the EbgpIbgpEqual field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetOrCreateEbgpIbgpEqual() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual {
	if t.EbgpIbgpEqual != nil {
		return t.EbgpIbgpEqual
	}
	t.EbgpIbgpEqual = &NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual{}
	return t.EbgpIbgpEqual
}

// GetOrCreateIgnoreRouterId retrieves the value of the IgnoreRouterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetOrCreateIgnoreRouterId() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId {
	if t.IgnoreRouterId != nil {
		return t.IgnoreRouterId
	}
	t.IgnoreRouterId = &NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId{}
	return t.IgnoreRouterId
}

// GetAlwaysCompareMed returns the value of the AlwaysCompareMed struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection. If the receiver or the field AlwaysCompareMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetAlwaysCompareMed() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed {
	if t != nil && t.AlwaysCompareMed != nil {
		return t.AlwaysCompareMed
	}
	return nil
}

// GetAsPathIgnore returns the value of the AsPathIgnore struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection. If the receiver or the field AsPathIgnore is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetAsPathIgnore() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore {
	if t != nil && t.AsPathIgnore != nil {
		return t.AsPathIgnore
	}
	return nil
}

// GetEbgpIbgpEqual returns the value of the EbgpIbgpEqual struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection. If the receiver or the field EbgpIbgpEqual is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetEbgpIbgpEqual() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual {
	if t != nil && t.EbgpIbgpEqual != nil {
		return t.EbgpIbgpEqual
	}
	return nil
}

// GetIgnoreRouterId returns the value of the IgnoreRouterId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection. If the receiver or the field IgnoreRouterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetIgnoreRouterId() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId {
	if t != nil && t.IgnoreRouterId != nil {
		return t.IgnoreRouterId
	}
	return nil
}

// GetCompareOriginValidationState retrieves the value of the leaf CompareOriginValidationState from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompareOriginValidationState is set, it can
// safely use t.GetCompareOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompareOriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetCompareOriginValidationState() bool {
	if t == nil || t.CompareOriginValidationState == nil {
		return false
	}
	return *t.CompareOriginValidationState
}

// GetDPathLengthIgnore retrieves the value of the leaf DPathLengthIgnore from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DPathLengthIgnore is set, it can
// safely use t.GetDPathLengthIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DPathLengthIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetDPathLengthIgnore() bool {
	if t == nil || t.DPathLengthIgnore == nil {
		return false
	}
	return *t.DPathLengthIgnore
}

// GetDeterministicMed retrieves the value of the leaf DeterministicMed from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeterministicMed is set, it can
// safely use t.GetDeterministicMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeterministicMed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetDeterministicMed() bool {
	if t == nil || t.DeterministicMed == nil {
		return false
	}
	return *t.DeterministicMed
}

// GetIgnoreNhMetric retrieves the value of the leaf IgnoreNhMetric from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreNhMetric is set, it can
// safely use t.GetIgnoreNhMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreNhMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetIgnoreNhMetric() bool {
	if t == nil || t.IgnoreNhMetric == nil {
		return false
	}
	return *t.IgnoreNhMetric
}

// GetOriginInvalidUnusable retrieves the value of the leaf OriginInvalidUnusable from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginInvalidUnusable is set, it can
// safely use t.GetOriginInvalidUnusable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginInvalidUnusable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) GetOriginInvalidUnusable() bool {
	if t == nil || t.OriginInvalidUnusable == nil {
		return false
	}
	return *t.OriginInvalidUnusable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CompareOriginValidationState == nil {
		var v bool = false
		t.CompareOriginValidationState = &v
	}
	if t.DPathLengthIgnore == nil {
		var v bool = false
		t.DPathLengthIgnore = &v
	}
	if t.DeterministicMed == nil {
		var v bool = false
		t.DeterministicMed = &v
	}
	if t.IgnoreNhMetric == nil {
		var v bool = false
		t.IgnoreNhMetric = &v
	}
	if t.OriginInvalidUnusable == nil {
		var v bool = false
		t.OriginInvalidUnusable = &v
	}
	t.AlwaysCompareMed.PopulateDefaults()
	t.AsPathIgnore.PopulateDefaults()
	t.EbgpIbgpEqual.PopulateDefaults()
	t.IgnoreRouterId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed represents the /nokia-conf/configure/groups/group/router/bgp/best-path-selection/always-compare-med YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed struct {
	MedValue E_NokiaTypesBgp_MedValue `path:"med-value" module:"nokia-conf"`
	StrictAs *bool                    `path:"strict-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) IsYANGGoStruct() {
}

// GetMedValue retrieves the value of the leaf MedValue from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedValue is set, it can
// safely use t.GetMedValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) GetMedValue() E_NokiaTypesBgp_MedValue {
	if t == nil || t.MedValue == 0 {
		return NokiaTypesBgp_MedValue_off
	}
	return t.MedValue
}

// GetStrictAs retrieves the value of the leaf StrictAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictAs is set, it can
// safely use t.GetStrictAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) GetStrictAs() bool {
	if t == nil || t.StrictAs == nil {
		return true
	}
	return *t.StrictAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MedValue == 0 {
		t.MedValue = NokiaTypesBgp_MedValue_off
	}
	if t.StrictAs == nil {
		var v bool = true
		t.StrictAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AlwaysCompareMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore represents the /nokia-conf/configure/groups/group/router/bgp/best-path-selection/as-path-ignore YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn     *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4 *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6 *bool `path:"mcast-ipv6" module:"nokia-conf"`
	MvpnIpv4  *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6  *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_AsPathIgnore) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual represents the /nokia-conf/configure/groups/group/router/bgp/best-path-selection/ebgp-ibgp-equal YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_EbgpIbgpEqual) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId represents the /nokia-conf/configure/groups/group/router/bgp/best-path-selection/ignore-router-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId struct {
	IncludeInternal *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal `path:"include-internal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) IsYANGGoStruct() {
}

// GetOrCreateIncludeInternal retrieves the value of the IncludeInternal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) GetOrCreateIncludeInternal() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal {
	if t.IncludeInternal != nil {
		return t.IncludeInternal
	}
	t.IncludeInternal = &NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal{}
	return t.IncludeInternal
}

// GetIncludeInternal returns the value of the IncludeInternal struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId. If the receiver or the field IncludeInternal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) GetIncludeInternal() *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal {
	if t != nil && t.IncludeInternal != nil {
		return t.IncludeInternal
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeInternal.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal represents the /nokia-conf/configure/groups/group/router/bgp/best-path-selection/ignore-router-id/include-internal YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal struct {
	MvpnIpv4 *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6 *bool `path:"mvpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) IsYANGGoStruct() {
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BestPathSelection_IgnoreRouterId_IncludeInternal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric represents the /nokia-conf/configure/groups/group/router/bgp/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric struct {
	PreferAigp *bool   `path:"prefer-aigp" module:"nokia-conf"`
	Value      *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) IsYANGGoStruct() {}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 1000
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
	if t.Value == nil {
		var v uint32 = 1000
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster represents the /nokia-conf/configure/groups/group/router/bgp/cluster YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster struct {
	AllowLocalFallback *bool   `path:"allow-local-fallback" module:"nokia-conf"`
	ClusterId          *string `path:"cluster-id" module:"nokia-conf"`
	OrrLocation        *uint32 `path:"orr-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) IsYANGGoStruct() {}

// GetAllowLocalFallback retrieves the value of the leaf AllowLocalFallback from the NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalFallback is set, it can
// safely use t.GetAllowLocalFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) GetAllowLocalFallback() bool {
	if t == nil || t.AllowLocalFallback == nil {
		return false
	}
	return *t.AllowLocalFallback
}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// GetOrrLocation retrieves the value of the leaf OrrLocation from the NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrrLocation is set, it can
// safely use t.GetOrrLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrrLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) GetOrrLocation() uint32 {
	if t == nil || t.OrrLocation == nil {
		return 0
	}
	return *t.OrrLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalFallback == nil {
		var v bool = false
		t.AllowLocalFallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence represents the /nokia-conf/configure/groups/group/router/bgp/convergence YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence struct {
	Family             map[NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family `path:"family" module:"nokia-conf"`
	MinWaitToAdvertise *uint32                                                                                                                                             `path:"min-wait-to-advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetMinWaitToAdvertise retrieves the value of the leaf MinWaitToAdvertise from the NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinWaitToAdvertise is set, it can
// safely use t.GetMinWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) GetMinWaitToAdvertise() uint32 {
	if t == nil || t.MinWaitToAdvertise == nil {
		return 0
	}
	return *t.MinWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinWaitToAdvertise == nil {
		var v uint32 = 0
		t.MinWaitToAdvertise = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family represents the /nokia-conf/configure/groups/group/router/bgp/convergence/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family struct {
	FamilyType         NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	MaxWaitToAdvertise *uint32                                                                         `path:"max-wait-to-advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) IsYANGGoStruct() {}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) GetMaxWaitToAdvertise() uint32 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint32 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Convergence_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations represents the /nokia-conf/configure/groups/group/router/bgp/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                        `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/groups/group/router/bgp/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {
}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference represents the /nokia-conf/configure/groups/group/router/bgp/default-label-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint32 = 0
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint32 = 0
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference represents the /nokia-conf/configure/groups/group/router/bgp/default-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint32 = 0
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint32 = 0
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/groups/group/router/bgp/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering represents the /nokia-conf/configure/groups/group/router/bgp/egress-peer-engineering YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_EgressPeerEngineering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling represents the /nokia-conf/configure/groups/group/router/bgp/error-handling YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UpdateFaultTolerance == nil {
		var v bool = false
		t.UpdateFaultTolerance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Export represents the /nokia-conf/configure/groups/group/router/bgp/export YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Export struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Export) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Export.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Export) ΛBelongingModule() string {
	return "nokia-conf"
}
